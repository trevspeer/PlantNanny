
PlantNanny.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f70  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  0800702c  0800702c  0001702c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070f0  080070f0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080070f0  080070f0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080070f0  080070f0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070f0  080070f0  000170f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070f4  080070f4  000170f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080070f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002fc  2000000c  08007104  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000308  08007104  00020308  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001105d  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025e0  00000000  00000000  00031091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d78  00000000  00000000  00033678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c80  00000000  00000000  000343f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c379  00000000  00000000  00035070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011d57  00000000  00000000  000513e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aa2f9  00000000  00000000  00063140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010d439  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000320c  00000000  00000000  0010d48c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08007014 	.word	0x08007014

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08007014 	.word	0x08007014

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__aeabi_d2uiz>:
 800021c:	b570      	push	{r4, r5, r6, lr}
 800021e:	2200      	movs	r2, #0
 8000220:	4b0c      	ldr	r3, [pc, #48]	; (8000254 <__aeabi_d2uiz+0x38>)
 8000222:	0004      	movs	r4, r0
 8000224:	000d      	movs	r5, r1
 8000226:	f001 fd27 	bl	8001c78 <__aeabi_dcmpge>
 800022a:	2800      	cmp	r0, #0
 800022c:	d104      	bne.n	8000238 <__aeabi_d2uiz+0x1c>
 800022e:	0020      	movs	r0, r4
 8000230:	0029      	movs	r1, r5
 8000232:	f001 fc61 	bl	8001af8 <__aeabi_d2iz>
 8000236:	bd70      	pop	{r4, r5, r6, pc}
 8000238:	4b06      	ldr	r3, [pc, #24]	; (8000254 <__aeabi_d2uiz+0x38>)
 800023a:	2200      	movs	r2, #0
 800023c:	0020      	movs	r0, r4
 800023e:	0029      	movs	r1, r5
 8000240:	f001 f8c8 	bl	80013d4 <__aeabi_dsub>
 8000244:	f001 fc58 	bl	8001af8 <__aeabi_d2iz>
 8000248:	2380      	movs	r3, #128	; 0x80
 800024a:	061b      	lsls	r3, r3, #24
 800024c:	469c      	mov	ip, r3
 800024e:	4460      	add	r0, ip
 8000250:	e7f1      	b.n	8000236 <__aeabi_d2uiz+0x1a>
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	41e00000 	.word	0x41e00000

08000258 <__aeabi_dadd>:
 8000258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025a:	464f      	mov	r7, r9
 800025c:	46d6      	mov	lr, sl
 800025e:	4646      	mov	r6, r8
 8000260:	000d      	movs	r5, r1
 8000262:	0001      	movs	r1, r0
 8000264:	0018      	movs	r0, r3
 8000266:	b5c0      	push	{r6, r7, lr}
 8000268:	0017      	movs	r7, r2
 800026a:	032b      	lsls	r3, r5, #12
 800026c:	0a5a      	lsrs	r2, r3, #9
 800026e:	0f4b      	lsrs	r3, r1, #29
 8000270:	4313      	orrs	r3, r2
 8000272:	00ca      	lsls	r2, r1, #3
 8000274:	4691      	mov	r9, r2
 8000276:	0302      	lsls	r2, r0, #12
 8000278:	006e      	lsls	r6, r5, #1
 800027a:	0041      	lsls	r1, r0, #1
 800027c:	0a52      	lsrs	r2, r2, #9
 800027e:	0fec      	lsrs	r4, r5, #31
 8000280:	0f7d      	lsrs	r5, r7, #29
 8000282:	4315      	orrs	r5, r2
 8000284:	0d76      	lsrs	r6, r6, #21
 8000286:	0d49      	lsrs	r1, r1, #21
 8000288:	0fc0      	lsrs	r0, r0, #31
 800028a:	4682      	mov	sl, r0
 800028c:	46ac      	mov	ip, r5
 800028e:	00ff      	lsls	r7, r7, #3
 8000290:	1a72      	subs	r2, r6, r1
 8000292:	4284      	cmp	r4, r0
 8000294:	d100      	bne.n	8000298 <__aeabi_dadd+0x40>
 8000296:	e098      	b.n	80003ca <__aeabi_dadd+0x172>
 8000298:	2a00      	cmp	r2, #0
 800029a:	dc00      	bgt.n	800029e <__aeabi_dadd+0x46>
 800029c:	e081      	b.n	80003a2 <__aeabi_dadd+0x14a>
 800029e:	2900      	cmp	r1, #0
 80002a0:	d100      	bne.n	80002a4 <__aeabi_dadd+0x4c>
 80002a2:	e0b6      	b.n	8000412 <__aeabi_dadd+0x1ba>
 80002a4:	49c9      	ldr	r1, [pc, #804]	; (80005cc <__aeabi_dadd+0x374>)
 80002a6:	428e      	cmp	r6, r1
 80002a8:	d100      	bne.n	80002ac <__aeabi_dadd+0x54>
 80002aa:	e172      	b.n	8000592 <__aeabi_dadd+0x33a>
 80002ac:	2180      	movs	r1, #128	; 0x80
 80002ae:	0028      	movs	r0, r5
 80002b0:	0409      	lsls	r1, r1, #16
 80002b2:	4308      	orrs	r0, r1
 80002b4:	4684      	mov	ip, r0
 80002b6:	2a38      	cmp	r2, #56	; 0x38
 80002b8:	dd00      	ble.n	80002bc <__aeabi_dadd+0x64>
 80002ba:	e15e      	b.n	800057a <__aeabi_dadd+0x322>
 80002bc:	2a1f      	cmp	r2, #31
 80002be:	dd00      	ble.n	80002c2 <__aeabi_dadd+0x6a>
 80002c0:	e1ee      	b.n	80006a0 <__aeabi_dadd+0x448>
 80002c2:	2020      	movs	r0, #32
 80002c4:	0039      	movs	r1, r7
 80002c6:	4665      	mov	r5, ip
 80002c8:	1a80      	subs	r0, r0, r2
 80002ca:	4087      	lsls	r7, r0
 80002cc:	40d1      	lsrs	r1, r2
 80002ce:	4085      	lsls	r5, r0
 80002d0:	430d      	orrs	r5, r1
 80002d2:	0039      	movs	r1, r7
 80002d4:	1e4f      	subs	r7, r1, #1
 80002d6:	41b9      	sbcs	r1, r7
 80002d8:	4667      	mov	r7, ip
 80002da:	40d7      	lsrs	r7, r2
 80002dc:	4329      	orrs	r1, r5
 80002de:	1bdb      	subs	r3, r3, r7
 80002e0:	464a      	mov	r2, r9
 80002e2:	1a55      	subs	r5, r2, r1
 80002e4:	45a9      	cmp	r9, r5
 80002e6:	4189      	sbcs	r1, r1
 80002e8:	4249      	negs	r1, r1
 80002ea:	1a5b      	subs	r3, r3, r1
 80002ec:	4698      	mov	r8, r3
 80002ee:	4643      	mov	r3, r8
 80002f0:	021b      	lsls	r3, r3, #8
 80002f2:	d400      	bmi.n	80002f6 <__aeabi_dadd+0x9e>
 80002f4:	e0cc      	b.n	8000490 <__aeabi_dadd+0x238>
 80002f6:	4643      	mov	r3, r8
 80002f8:	025b      	lsls	r3, r3, #9
 80002fa:	0a5b      	lsrs	r3, r3, #9
 80002fc:	4698      	mov	r8, r3
 80002fe:	4643      	mov	r3, r8
 8000300:	2b00      	cmp	r3, #0
 8000302:	d100      	bne.n	8000306 <__aeabi_dadd+0xae>
 8000304:	e12c      	b.n	8000560 <__aeabi_dadd+0x308>
 8000306:	4640      	mov	r0, r8
 8000308:	f001 fcc0 	bl	8001c8c <__clzsi2>
 800030c:	0001      	movs	r1, r0
 800030e:	3908      	subs	r1, #8
 8000310:	2220      	movs	r2, #32
 8000312:	0028      	movs	r0, r5
 8000314:	4643      	mov	r3, r8
 8000316:	1a52      	subs	r2, r2, r1
 8000318:	408b      	lsls	r3, r1
 800031a:	40d0      	lsrs	r0, r2
 800031c:	408d      	lsls	r5, r1
 800031e:	4303      	orrs	r3, r0
 8000320:	428e      	cmp	r6, r1
 8000322:	dd00      	ble.n	8000326 <__aeabi_dadd+0xce>
 8000324:	e117      	b.n	8000556 <__aeabi_dadd+0x2fe>
 8000326:	1b8e      	subs	r6, r1, r6
 8000328:	1c72      	adds	r2, r6, #1
 800032a:	2a1f      	cmp	r2, #31
 800032c:	dd00      	ble.n	8000330 <__aeabi_dadd+0xd8>
 800032e:	e1a7      	b.n	8000680 <__aeabi_dadd+0x428>
 8000330:	2120      	movs	r1, #32
 8000332:	0018      	movs	r0, r3
 8000334:	002e      	movs	r6, r5
 8000336:	1a89      	subs	r1, r1, r2
 8000338:	408d      	lsls	r5, r1
 800033a:	4088      	lsls	r0, r1
 800033c:	40d6      	lsrs	r6, r2
 800033e:	40d3      	lsrs	r3, r2
 8000340:	1e69      	subs	r1, r5, #1
 8000342:	418d      	sbcs	r5, r1
 8000344:	4330      	orrs	r0, r6
 8000346:	4698      	mov	r8, r3
 8000348:	2600      	movs	r6, #0
 800034a:	4305      	orrs	r5, r0
 800034c:	076b      	lsls	r3, r5, #29
 800034e:	d009      	beq.n	8000364 <__aeabi_dadd+0x10c>
 8000350:	230f      	movs	r3, #15
 8000352:	402b      	ands	r3, r5
 8000354:	2b04      	cmp	r3, #4
 8000356:	d005      	beq.n	8000364 <__aeabi_dadd+0x10c>
 8000358:	1d2b      	adds	r3, r5, #4
 800035a:	42ab      	cmp	r3, r5
 800035c:	41ad      	sbcs	r5, r5
 800035e:	426d      	negs	r5, r5
 8000360:	44a8      	add	r8, r5
 8000362:	001d      	movs	r5, r3
 8000364:	4643      	mov	r3, r8
 8000366:	021b      	lsls	r3, r3, #8
 8000368:	d400      	bmi.n	800036c <__aeabi_dadd+0x114>
 800036a:	e094      	b.n	8000496 <__aeabi_dadd+0x23e>
 800036c:	4b97      	ldr	r3, [pc, #604]	; (80005cc <__aeabi_dadd+0x374>)
 800036e:	1c72      	adds	r2, r6, #1
 8000370:	429a      	cmp	r2, r3
 8000372:	d100      	bne.n	8000376 <__aeabi_dadd+0x11e>
 8000374:	e09d      	b.n	80004b2 <__aeabi_dadd+0x25a>
 8000376:	4641      	mov	r1, r8
 8000378:	4b95      	ldr	r3, [pc, #596]	; (80005d0 <__aeabi_dadd+0x378>)
 800037a:	08ed      	lsrs	r5, r5, #3
 800037c:	4019      	ands	r1, r3
 800037e:	000b      	movs	r3, r1
 8000380:	0552      	lsls	r2, r2, #21
 8000382:	0749      	lsls	r1, r1, #29
 8000384:	025b      	lsls	r3, r3, #9
 8000386:	4329      	orrs	r1, r5
 8000388:	0b1b      	lsrs	r3, r3, #12
 800038a:	0d52      	lsrs	r2, r2, #21
 800038c:	0512      	lsls	r2, r2, #20
 800038e:	4313      	orrs	r3, r2
 8000390:	07e4      	lsls	r4, r4, #31
 8000392:	4323      	orrs	r3, r4
 8000394:	0008      	movs	r0, r1
 8000396:	0019      	movs	r1, r3
 8000398:	bce0      	pop	{r5, r6, r7}
 800039a:	46ba      	mov	sl, r7
 800039c:	46b1      	mov	r9, r6
 800039e:	46a8      	mov	r8, r5
 80003a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003a2:	2a00      	cmp	r2, #0
 80003a4:	d043      	beq.n	800042e <__aeabi_dadd+0x1d6>
 80003a6:	1b8a      	subs	r2, r1, r6
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d000      	beq.n	80003ae <__aeabi_dadd+0x156>
 80003ac:	e12a      	b.n	8000604 <__aeabi_dadd+0x3ac>
 80003ae:	464c      	mov	r4, r9
 80003b0:	431c      	orrs	r4, r3
 80003b2:	d100      	bne.n	80003b6 <__aeabi_dadd+0x15e>
 80003b4:	e1d1      	b.n	800075a <__aeabi_dadd+0x502>
 80003b6:	1e54      	subs	r4, r2, #1
 80003b8:	2a01      	cmp	r2, #1
 80003ba:	d100      	bne.n	80003be <__aeabi_dadd+0x166>
 80003bc:	e21f      	b.n	80007fe <__aeabi_dadd+0x5a6>
 80003be:	4d83      	ldr	r5, [pc, #524]	; (80005cc <__aeabi_dadd+0x374>)
 80003c0:	42aa      	cmp	r2, r5
 80003c2:	d100      	bne.n	80003c6 <__aeabi_dadd+0x16e>
 80003c4:	e272      	b.n	80008ac <__aeabi_dadd+0x654>
 80003c6:	0022      	movs	r2, r4
 80003c8:	e123      	b.n	8000612 <__aeabi_dadd+0x3ba>
 80003ca:	2a00      	cmp	r2, #0
 80003cc:	dc00      	bgt.n	80003d0 <__aeabi_dadd+0x178>
 80003ce:	e098      	b.n	8000502 <__aeabi_dadd+0x2aa>
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d042      	beq.n	800045a <__aeabi_dadd+0x202>
 80003d4:	497d      	ldr	r1, [pc, #500]	; (80005cc <__aeabi_dadd+0x374>)
 80003d6:	428e      	cmp	r6, r1
 80003d8:	d100      	bne.n	80003dc <__aeabi_dadd+0x184>
 80003da:	e0da      	b.n	8000592 <__aeabi_dadd+0x33a>
 80003dc:	2180      	movs	r1, #128	; 0x80
 80003de:	0028      	movs	r0, r5
 80003e0:	0409      	lsls	r1, r1, #16
 80003e2:	4308      	orrs	r0, r1
 80003e4:	4684      	mov	ip, r0
 80003e6:	2a38      	cmp	r2, #56	; 0x38
 80003e8:	dd00      	ble.n	80003ec <__aeabi_dadd+0x194>
 80003ea:	e129      	b.n	8000640 <__aeabi_dadd+0x3e8>
 80003ec:	2a1f      	cmp	r2, #31
 80003ee:	dc00      	bgt.n	80003f2 <__aeabi_dadd+0x19a>
 80003f0:	e187      	b.n	8000702 <__aeabi_dadd+0x4aa>
 80003f2:	0011      	movs	r1, r2
 80003f4:	4665      	mov	r5, ip
 80003f6:	3920      	subs	r1, #32
 80003f8:	40cd      	lsrs	r5, r1
 80003fa:	2a20      	cmp	r2, #32
 80003fc:	d004      	beq.n	8000408 <__aeabi_dadd+0x1b0>
 80003fe:	2040      	movs	r0, #64	; 0x40
 8000400:	4661      	mov	r1, ip
 8000402:	1a82      	subs	r2, r0, r2
 8000404:	4091      	lsls	r1, r2
 8000406:	430f      	orrs	r7, r1
 8000408:	0039      	movs	r1, r7
 800040a:	1e4f      	subs	r7, r1, #1
 800040c:	41b9      	sbcs	r1, r7
 800040e:	430d      	orrs	r5, r1
 8000410:	e11b      	b.n	800064a <__aeabi_dadd+0x3f2>
 8000412:	0029      	movs	r1, r5
 8000414:	4339      	orrs	r1, r7
 8000416:	d100      	bne.n	800041a <__aeabi_dadd+0x1c2>
 8000418:	e0b5      	b.n	8000586 <__aeabi_dadd+0x32e>
 800041a:	1e51      	subs	r1, r2, #1
 800041c:	2a01      	cmp	r2, #1
 800041e:	d100      	bne.n	8000422 <__aeabi_dadd+0x1ca>
 8000420:	e1ab      	b.n	800077a <__aeabi_dadd+0x522>
 8000422:	486a      	ldr	r0, [pc, #424]	; (80005cc <__aeabi_dadd+0x374>)
 8000424:	4282      	cmp	r2, r0
 8000426:	d100      	bne.n	800042a <__aeabi_dadd+0x1d2>
 8000428:	e1b2      	b.n	8000790 <__aeabi_dadd+0x538>
 800042a:	000a      	movs	r2, r1
 800042c:	e743      	b.n	80002b6 <__aeabi_dadd+0x5e>
 800042e:	4969      	ldr	r1, [pc, #420]	; (80005d4 <__aeabi_dadd+0x37c>)
 8000430:	1c75      	adds	r5, r6, #1
 8000432:	420d      	tst	r5, r1
 8000434:	d000      	beq.n	8000438 <__aeabi_dadd+0x1e0>
 8000436:	e0cf      	b.n	80005d8 <__aeabi_dadd+0x380>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d000      	beq.n	800043e <__aeabi_dadd+0x1e6>
 800043c:	e193      	b.n	8000766 <__aeabi_dadd+0x50e>
 800043e:	4649      	mov	r1, r9
 8000440:	4319      	orrs	r1, r3
 8000442:	d100      	bne.n	8000446 <__aeabi_dadd+0x1ee>
 8000444:	e1d1      	b.n	80007ea <__aeabi_dadd+0x592>
 8000446:	4661      	mov	r1, ip
 8000448:	4339      	orrs	r1, r7
 800044a:	d000      	beq.n	800044e <__aeabi_dadd+0x1f6>
 800044c:	e1e3      	b.n	8000816 <__aeabi_dadd+0x5be>
 800044e:	4649      	mov	r1, r9
 8000450:	0758      	lsls	r0, r3, #29
 8000452:	08c9      	lsrs	r1, r1, #3
 8000454:	4301      	orrs	r1, r0
 8000456:	08db      	lsrs	r3, r3, #3
 8000458:	e026      	b.n	80004a8 <__aeabi_dadd+0x250>
 800045a:	0029      	movs	r1, r5
 800045c:	4339      	orrs	r1, r7
 800045e:	d100      	bne.n	8000462 <__aeabi_dadd+0x20a>
 8000460:	e091      	b.n	8000586 <__aeabi_dadd+0x32e>
 8000462:	1e51      	subs	r1, r2, #1
 8000464:	2a01      	cmp	r2, #1
 8000466:	d005      	beq.n	8000474 <__aeabi_dadd+0x21c>
 8000468:	4858      	ldr	r0, [pc, #352]	; (80005cc <__aeabi_dadd+0x374>)
 800046a:	4282      	cmp	r2, r0
 800046c:	d100      	bne.n	8000470 <__aeabi_dadd+0x218>
 800046e:	e18f      	b.n	8000790 <__aeabi_dadd+0x538>
 8000470:	000a      	movs	r2, r1
 8000472:	e7b8      	b.n	80003e6 <__aeabi_dadd+0x18e>
 8000474:	003d      	movs	r5, r7
 8000476:	444d      	add	r5, r9
 8000478:	454d      	cmp	r5, r9
 800047a:	4189      	sbcs	r1, r1
 800047c:	4463      	add	r3, ip
 800047e:	4698      	mov	r8, r3
 8000480:	4249      	negs	r1, r1
 8000482:	4488      	add	r8, r1
 8000484:	4643      	mov	r3, r8
 8000486:	2602      	movs	r6, #2
 8000488:	021b      	lsls	r3, r3, #8
 800048a:	d500      	bpl.n	800048e <__aeabi_dadd+0x236>
 800048c:	e0eb      	b.n	8000666 <__aeabi_dadd+0x40e>
 800048e:	3e01      	subs	r6, #1
 8000490:	076b      	lsls	r3, r5, #29
 8000492:	d000      	beq.n	8000496 <__aeabi_dadd+0x23e>
 8000494:	e75c      	b.n	8000350 <__aeabi_dadd+0xf8>
 8000496:	4643      	mov	r3, r8
 8000498:	08e9      	lsrs	r1, r5, #3
 800049a:	075a      	lsls	r2, r3, #29
 800049c:	4311      	orrs	r1, r2
 800049e:	0032      	movs	r2, r6
 80004a0:	08db      	lsrs	r3, r3, #3
 80004a2:	484a      	ldr	r0, [pc, #296]	; (80005cc <__aeabi_dadd+0x374>)
 80004a4:	4282      	cmp	r2, r0
 80004a6:	d021      	beq.n	80004ec <__aeabi_dadd+0x294>
 80004a8:	031b      	lsls	r3, r3, #12
 80004aa:	0552      	lsls	r2, r2, #21
 80004ac:	0b1b      	lsrs	r3, r3, #12
 80004ae:	0d52      	lsrs	r2, r2, #21
 80004b0:	e76c      	b.n	800038c <__aeabi_dadd+0x134>
 80004b2:	2300      	movs	r3, #0
 80004b4:	2100      	movs	r1, #0
 80004b6:	e769      	b.n	800038c <__aeabi_dadd+0x134>
 80004b8:	002a      	movs	r2, r5
 80004ba:	433a      	orrs	r2, r7
 80004bc:	d069      	beq.n	8000592 <__aeabi_dadd+0x33a>
 80004be:	464a      	mov	r2, r9
 80004c0:	0758      	lsls	r0, r3, #29
 80004c2:	08d1      	lsrs	r1, r2, #3
 80004c4:	08da      	lsrs	r2, r3, #3
 80004c6:	2380      	movs	r3, #128	; 0x80
 80004c8:	031b      	lsls	r3, r3, #12
 80004ca:	4308      	orrs	r0, r1
 80004cc:	421a      	tst	r2, r3
 80004ce:	d007      	beq.n	80004e0 <__aeabi_dadd+0x288>
 80004d0:	0029      	movs	r1, r5
 80004d2:	08ed      	lsrs	r5, r5, #3
 80004d4:	421d      	tst	r5, r3
 80004d6:	d103      	bne.n	80004e0 <__aeabi_dadd+0x288>
 80004d8:	002a      	movs	r2, r5
 80004da:	08ff      	lsrs	r7, r7, #3
 80004dc:	0748      	lsls	r0, r1, #29
 80004de:	4338      	orrs	r0, r7
 80004e0:	0f43      	lsrs	r3, r0, #29
 80004e2:	00c1      	lsls	r1, r0, #3
 80004e4:	075b      	lsls	r3, r3, #29
 80004e6:	08c9      	lsrs	r1, r1, #3
 80004e8:	4319      	orrs	r1, r3
 80004ea:	0013      	movs	r3, r2
 80004ec:	000a      	movs	r2, r1
 80004ee:	431a      	orrs	r2, r3
 80004f0:	d100      	bne.n	80004f4 <__aeabi_dadd+0x29c>
 80004f2:	e213      	b.n	800091c <__aeabi_dadd+0x6c4>
 80004f4:	2280      	movs	r2, #128	; 0x80
 80004f6:	0312      	lsls	r2, r2, #12
 80004f8:	4313      	orrs	r3, r2
 80004fa:	031b      	lsls	r3, r3, #12
 80004fc:	4a33      	ldr	r2, [pc, #204]	; (80005cc <__aeabi_dadd+0x374>)
 80004fe:	0b1b      	lsrs	r3, r3, #12
 8000500:	e744      	b.n	800038c <__aeabi_dadd+0x134>
 8000502:	2a00      	cmp	r2, #0
 8000504:	d04b      	beq.n	800059e <__aeabi_dadd+0x346>
 8000506:	1b8a      	subs	r2, r1, r6
 8000508:	2e00      	cmp	r6, #0
 800050a:	d100      	bne.n	800050e <__aeabi_dadd+0x2b6>
 800050c:	e0e7      	b.n	80006de <__aeabi_dadd+0x486>
 800050e:	482f      	ldr	r0, [pc, #188]	; (80005cc <__aeabi_dadd+0x374>)
 8000510:	4281      	cmp	r1, r0
 8000512:	d100      	bne.n	8000516 <__aeabi_dadd+0x2be>
 8000514:	e195      	b.n	8000842 <__aeabi_dadd+0x5ea>
 8000516:	2080      	movs	r0, #128	; 0x80
 8000518:	0400      	lsls	r0, r0, #16
 800051a:	4303      	orrs	r3, r0
 800051c:	2a38      	cmp	r2, #56	; 0x38
 800051e:	dd00      	ble.n	8000522 <__aeabi_dadd+0x2ca>
 8000520:	e143      	b.n	80007aa <__aeabi_dadd+0x552>
 8000522:	2a1f      	cmp	r2, #31
 8000524:	dd00      	ble.n	8000528 <__aeabi_dadd+0x2d0>
 8000526:	e1db      	b.n	80008e0 <__aeabi_dadd+0x688>
 8000528:	2020      	movs	r0, #32
 800052a:	001d      	movs	r5, r3
 800052c:	464e      	mov	r6, r9
 800052e:	1a80      	subs	r0, r0, r2
 8000530:	4085      	lsls	r5, r0
 8000532:	40d6      	lsrs	r6, r2
 8000534:	4335      	orrs	r5, r6
 8000536:	464e      	mov	r6, r9
 8000538:	4086      	lsls	r6, r0
 800053a:	0030      	movs	r0, r6
 800053c:	40d3      	lsrs	r3, r2
 800053e:	1e46      	subs	r6, r0, #1
 8000540:	41b0      	sbcs	r0, r6
 8000542:	449c      	add	ip, r3
 8000544:	4305      	orrs	r5, r0
 8000546:	19ed      	adds	r5, r5, r7
 8000548:	42bd      	cmp	r5, r7
 800054a:	419b      	sbcs	r3, r3
 800054c:	425b      	negs	r3, r3
 800054e:	4463      	add	r3, ip
 8000550:	4698      	mov	r8, r3
 8000552:	000e      	movs	r6, r1
 8000554:	e07f      	b.n	8000656 <__aeabi_dadd+0x3fe>
 8000556:	4a1e      	ldr	r2, [pc, #120]	; (80005d0 <__aeabi_dadd+0x378>)
 8000558:	1a76      	subs	r6, r6, r1
 800055a:	4013      	ands	r3, r2
 800055c:	4698      	mov	r8, r3
 800055e:	e6f5      	b.n	800034c <__aeabi_dadd+0xf4>
 8000560:	0028      	movs	r0, r5
 8000562:	f001 fb93 	bl	8001c8c <__clzsi2>
 8000566:	0001      	movs	r1, r0
 8000568:	3118      	adds	r1, #24
 800056a:	291f      	cmp	r1, #31
 800056c:	dc00      	bgt.n	8000570 <__aeabi_dadd+0x318>
 800056e:	e6cf      	b.n	8000310 <__aeabi_dadd+0xb8>
 8000570:	002b      	movs	r3, r5
 8000572:	3808      	subs	r0, #8
 8000574:	4083      	lsls	r3, r0
 8000576:	2500      	movs	r5, #0
 8000578:	e6d2      	b.n	8000320 <__aeabi_dadd+0xc8>
 800057a:	4662      	mov	r2, ip
 800057c:	433a      	orrs	r2, r7
 800057e:	0011      	movs	r1, r2
 8000580:	1e4f      	subs	r7, r1, #1
 8000582:	41b9      	sbcs	r1, r7
 8000584:	e6ac      	b.n	80002e0 <__aeabi_dadd+0x88>
 8000586:	4649      	mov	r1, r9
 8000588:	0758      	lsls	r0, r3, #29
 800058a:	08c9      	lsrs	r1, r1, #3
 800058c:	4301      	orrs	r1, r0
 800058e:	08db      	lsrs	r3, r3, #3
 8000590:	e787      	b.n	80004a2 <__aeabi_dadd+0x24a>
 8000592:	4649      	mov	r1, r9
 8000594:	075a      	lsls	r2, r3, #29
 8000596:	08c9      	lsrs	r1, r1, #3
 8000598:	4311      	orrs	r1, r2
 800059a:	08db      	lsrs	r3, r3, #3
 800059c:	e7a6      	b.n	80004ec <__aeabi_dadd+0x294>
 800059e:	490d      	ldr	r1, [pc, #52]	; (80005d4 <__aeabi_dadd+0x37c>)
 80005a0:	1c70      	adds	r0, r6, #1
 80005a2:	4208      	tst	r0, r1
 80005a4:	d000      	beq.n	80005a8 <__aeabi_dadd+0x350>
 80005a6:	e0bb      	b.n	8000720 <__aeabi_dadd+0x4c8>
 80005a8:	2e00      	cmp	r6, #0
 80005aa:	d000      	beq.n	80005ae <__aeabi_dadd+0x356>
 80005ac:	e114      	b.n	80007d8 <__aeabi_dadd+0x580>
 80005ae:	4649      	mov	r1, r9
 80005b0:	4319      	orrs	r1, r3
 80005b2:	d100      	bne.n	80005b6 <__aeabi_dadd+0x35e>
 80005b4:	e175      	b.n	80008a2 <__aeabi_dadd+0x64a>
 80005b6:	0029      	movs	r1, r5
 80005b8:	4339      	orrs	r1, r7
 80005ba:	d000      	beq.n	80005be <__aeabi_dadd+0x366>
 80005bc:	e17e      	b.n	80008bc <__aeabi_dadd+0x664>
 80005be:	4649      	mov	r1, r9
 80005c0:	0758      	lsls	r0, r3, #29
 80005c2:	08c9      	lsrs	r1, r1, #3
 80005c4:	4301      	orrs	r1, r0
 80005c6:	08db      	lsrs	r3, r3, #3
 80005c8:	e76e      	b.n	80004a8 <__aeabi_dadd+0x250>
 80005ca:	46c0      	nop			; (mov r8, r8)
 80005cc:	000007ff 	.word	0x000007ff
 80005d0:	ff7fffff 	.word	0xff7fffff
 80005d4:	000007fe 	.word	0x000007fe
 80005d8:	4649      	mov	r1, r9
 80005da:	1bcd      	subs	r5, r1, r7
 80005dc:	4661      	mov	r1, ip
 80005de:	1a58      	subs	r0, r3, r1
 80005e0:	45a9      	cmp	r9, r5
 80005e2:	4189      	sbcs	r1, r1
 80005e4:	4249      	negs	r1, r1
 80005e6:	4688      	mov	r8, r1
 80005e8:	0001      	movs	r1, r0
 80005ea:	4640      	mov	r0, r8
 80005ec:	1a09      	subs	r1, r1, r0
 80005ee:	4688      	mov	r8, r1
 80005f0:	0209      	lsls	r1, r1, #8
 80005f2:	d500      	bpl.n	80005f6 <__aeabi_dadd+0x39e>
 80005f4:	e0a6      	b.n	8000744 <__aeabi_dadd+0x4ec>
 80005f6:	4641      	mov	r1, r8
 80005f8:	4329      	orrs	r1, r5
 80005fa:	d000      	beq.n	80005fe <__aeabi_dadd+0x3a6>
 80005fc:	e67f      	b.n	80002fe <__aeabi_dadd+0xa6>
 80005fe:	2300      	movs	r3, #0
 8000600:	2400      	movs	r4, #0
 8000602:	e751      	b.n	80004a8 <__aeabi_dadd+0x250>
 8000604:	4cc7      	ldr	r4, [pc, #796]	; (8000924 <__aeabi_dadd+0x6cc>)
 8000606:	42a1      	cmp	r1, r4
 8000608:	d100      	bne.n	800060c <__aeabi_dadd+0x3b4>
 800060a:	e0c7      	b.n	800079c <__aeabi_dadd+0x544>
 800060c:	2480      	movs	r4, #128	; 0x80
 800060e:	0424      	lsls	r4, r4, #16
 8000610:	4323      	orrs	r3, r4
 8000612:	2a38      	cmp	r2, #56	; 0x38
 8000614:	dc54      	bgt.n	80006c0 <__aeabi_dadd+0x468>
 8000616:	2a1f      	cmp	r2, #31
 8000618:	dd00      	ble.n	800061c <__aeabi_dadd+0x3c4>
 800061a:	e0cc      	b.n	80007b6 <__aeabi_dadd+0x55e>
 800061c:	2420      	movs	r4, #32
 800061e:	4648      	mov	r0, r9
 8000620:	1aa4      	subs	r4, r4, r2
 8000622:	001d      	movs	r5, r3
 8000624:	464e      	mov	r6, r9
 8000626:	40a0      	lsls	r0, r4
 8000628:	40d6      	lsrs	r6, r2
 800062a:	40a5      	lsls	r5, r4
 800062c:	0004      	movs	r4, r0
 800062e:	40d3      	lsrs	r3, r2
 8000630:	4662      	mov	r2, ip
 8000632:	4335      	orrs	r5, r6
 8000634:	1e66      	subs	r6, r4, #1
 8000636:	41b4      	sbcs	r4, r6
 8000638:	1ad3      	subs	r3, r2, r3
 800063a:	469c      	mov	ip, r3
 800063c:	4325      	orrs	r5, r4
 800063e:	e044      	b.n	80006ca <__aeabi_dadd+0x472>
 8000640:	4662      	mov	r2, ip
 8000642:	433a      	orrs	r2, r7
 8000644:	0015      	movs	r5, r2
 8000646:	1e6f      	subs	r7, r5, #1
 8000648:	41bd      	sbcs	r5, r7
 800064a:	444d      	add	r5, r9
 800064c:	454d      	cmp	r5, r9
 800064e:	4189      	sbcs	r1, r1
 8000650:	4249      	negs	r1, r1
 8000652:	4688      	mov	r8, r1
 8000654:	4498      	add	r8, r3
 8000656:	4643      	mov	r3, r8
 8000658:	021b      	lsls	r3, r3, #8
 800065a:	d400      	bmi.n	800065e <__aeabi_dadd+0x406>
 800065c:	e718      	b.n	8000490 <__aeabi_dadd+0x238>
 800065e:	4bb1      	ldr	r3, [pc, #708]	; (8000924 <__aeabi_dadd+0x6cc>)
 8000660:	3601      	adds	r6, #1
 8000662:	429e      	cmp	r6, r3
 8000664:	d049      	beq.n	80006fa <__aeabi_dadd+0x4a2>
 8000666:	4642      	mov	r2, r8
 8000668:	4baf      	ldr	r3, [pc, #700]	; (8000928 <__aeabi_dadd+0x6d0>)
 800066a:	2101      	movs	r1, #1
 800066c:	401a      	ands	r2, r3
 800066e:	0013      	movs	r3, r2
 8000670:	086a      	lsrs	r2, r5, #1
 8000672:	400d      	ands	r5, r1
 8000674:	4315      	orrs	r5, r2
 8000676:	07d9      	lsls	r1, r3, #31
 8000678:	085b      	lsrs	r3, r3, #1
 800067a:	4698      	mov	r8, r3
 800067c:	430d      	orrs	r5, r1
 800067e:	e665      	b.n	800034c <__aeabi_dadd+0xf4>
 8000680:	0018      	movs	r0, r3
 8000682:	3e1f      	subs	r6, #31
 8000684:	40f0      	lsrs	r0, r6
 8000686:	2a20      	cmp	r2, #32
 8000688:	d003      	beq.n	8000692 <__aeabi_dadd+0x43a>
 800068a:	2140      	movs	r1, #64	; 0x40
 800068c:	1a8a      	subs	r2, r1, r2
 800068e:	4093      	lsls	r3, r2
 8000690:	431d      	orrs	r5, r3
 8000692:	1e69      	subs	r1, r5, #1
 8000694:	418d      	sbcs	r5, r1
 8000696:	2300      	movs	r3, #0
 8000698:	2600      	movs	r6, #0
 800069a:	4698      	mov	r8, r3
 800069c:	4305      	orrs	r5, r0
 800069e:	e6f7      	b.n	8000490 <__aeabi_dadd+0x238>
 80006a0:	0011      	movs	r1, r2
 80006a2:	4665      	mov	r5, ip
 80006a4:	3920      	subs	r1, #32
 80006a6:	40cd      	lsrs	r5, r1
 80006a8:	2a20      	cmp	r2, #32
 80006aa:	d004      	beq.n	80006b6 <__aeabi_dadd+0x45e>
 80006ac:	2040      	movs	r0, #64	; 0x40
 80006ae:	4661      	mov	r1, ip
 80006b0:	1a82      	subs	r2, r0, r2
 80006b2:	4091      	lsls	r1, r2
 80006b4:	430f      	orrs	r7, r1
 80006b6:	0039      	movs	r1, r7
 80006b8:	1e4f      	subs	r7, r1, #1
 80006ba:	41b9      	sbcs	r1, r7
 80006bc:	4329      	orrs	r1, r5
 80006be:	e60f      	b.n	80002e0 <__aeabi_dadd+0x88>
 80006c0:	464a      	mov	r2, r9
 80006c2:	4313      	orrs	r3, r2
 80006c4:	001d      	movs	r5, r3
 80006c6:	1e6b      	subs	r3, r5, #1
 80006c8:	419d      	sbcs	r5, r3
 80006ca:	1b7d      	subs	r5, r7, r5
 80006cc:	42af      	cmp	r7, r5
 80006ce:	419b      	sbcs	r3, r3
 80006d0:	4662      	mov	r2, ip
 80006d2:	425b      	negs	r3, r3
 80006d4:	1ad3      	subs	r3, r2, r3
 80006d6:	4698      	mov	r8, r3
 80006d8:	4654      	mov	r4, sl
 80006da:	000e      	movs	r6, r1
 80006dc:	e607      	b.n	80002ee <__aeabi_dadd+0x96>
 80006de:	4648      	mov	r0, r9
 80006e0:	4318      	orrs	r0, r3
 80006e2:	d100      	bne.n	80006e6 <__aeabi_dadd+0x48e>
 80006e4:	e0b3      	b.n	800084e <__aeabi_dadd+0x5f6>
 80006e6:	1e50      	subs	r0, r2, #1
 80006e8:	2a01      	cmp	r2, #1
 80006ea:	d100      	bne.n	80006ee <__aeabi_dadd+0x496>
 80006ec:	e10d      	b.n	800090a <__aeabi_dadd+0x6b2>
 80006ee:	4d8d      	ldr	r5, [pc, #564]	; (8000924 <__aeabi_dadd+0x6cc>)
 80006f0:	42aa      	cmp	r2, r5
 80006f2:	d100      	bne.n	80006f6 <__aeabi_dadd+0x49e>
 80006f4:	e0a5      	b.n	8000842 <__aeabi_dadd+0x5ea>
 80006f6:	0002      	movs	r2, r0
 80006f8:	e710      	b.n	800051c <__aeabi_dadd+0x2c4>
 80006fa:	0032      	movs	r2, r6
 80006fc:	2300      	movs	r3, #0
 80006fe:	2100      	movs	r1, #0
 8000700:	e644      	b.n	800038c <__aeabi_dadd+0x134>
 8000702:	2120      	movs	r1, #32
 8000704:	0038      	movs	r0, r7
 8000706:	1a89      	subs	r1, r1, r2
 8000708:	4665      	mov	r5, ip
 800070a:	408f      	lsls	r7, r1
 800070c:	408d      	lsls	r5, r1
 800070e:	40d0      	lsrs	r0, r2
 8000710:	1e79      	subs	r1, r7, #1
 8000712:	418f      	sbcs	r7, r1
 8000714:	4305      	orrs	r5, r0
 8000716:	433d      	orrs	r5, r7
 8000718:	4667      	mov	r7, ip
 800071a:	40d7      	lsrs	r7, r2
 800071c:	19db      	adds	r3, r3, r7
 800071e:	e794      	b.n	800064a <__aeabi_dadd+0x3f2>
 8000720:	4a80      	ldr	r2, [pc, #512]	; (8000924 <__aeabi_dadd+0x6cc>)
 8000722:	4290      	cmp	r0, r2
 8000724:	d100      	bne.n	8000728 <__aeabi_dadd+0x4d0>
 8000726:	e0ec      	b.n	8000902 <__aeabi_dadd+0x6aa>
 8000728:	0039      	movs	r1, r7
 800072a:	4449      	add	r1, r9
 800072c:	4549      	cmp	r1, r9
 800072e:	4192      	sbcs	r2, r2
 8000730:	4463      	add	r3, ip
 8000732:	4252      	negs	r2, r2
 8000734:	189b      	adds	r3, r3, r2
 8000736:	07dd      	lsls	r5, r3, #31
 8000738:	0849      	lsrs	r1, r1, #1
 800073a:	085b      	lsrs	r3, r3, #1
 800073c:	4698      	mov	r8, r3
 800073e:	0006      	movs	r6, r0
 8000740:	430d      	orrs	r5, r1
 8000742:	e6a5      	b.n	8000490 <__aeabi_dadd+0x238>
 8000744:	464a      	mov	r2, r9
 8000746:	1abd      	subs	r5, r7, r2
 8000748:	42af      	cmp	r7, r5
 800074a:	4189      	sbcs	r1, r1
 800074c:	4662      	mov	r2, ip
 800074e:	4249      	negs	r1, r1
 8000750:	1ad3      	subs	r3, r2, r3
 8000752:	1a5b      	subs	r3, r3, r1
 8000754:	4698      	mov	r8, r3
 8000756:	4654      	mov	r4, sl
 8000758:	e5d1      	b.n	80002fe <__aeabi_dadd+0xa6>
 800075a:	076c      	lsls	r4, r5, #29
 800075c:	08f9      	lsrs	r1, r7, #3
 800075e:	4321      	orrs	r1, r4
 8000760:	08eb      	lsrs	r3, r5, #3
 8000762:	0004      	movs	r4, r0
 8000764:	e69d      	b.n	80004a2 <__aeabi_dadd+0x24a>
 8000766:	464a      	mov	r2, r9
 8000768:	431a      	orrs	r2, r3
 800076a:	d175      	bne.n	8000858 <__aeabi_dadd+0x600>
 800076c:	4661      	mov	r1, ip
 800076e:	4339      	orrs	r1, r7
 8000770:	d114      	bne.n	800079c <__aeabi_dadd+0x544>
 8000772:	2380      	movs	r3, #128	; 0x80
 8000774:	2400      	movs	r4, #0
 8000776:	031b      	lsls	r3, r3, #12
 8000778:	e6bc      	b.n	80004f4 <__aeabi_dadd+0x29c>
 800077a:	464a      	mov	r2, r9
 800077c:	1bd5      	subs	r5, r2, r7
 800077e:	45a9      	cmp	r9, r5
 8000780:	4189      	sbcs	r1, r1
 8000782:	4662      	mov	r2, ip
 8000784:	4249      	negs	r1, r1
 8000786:	1a9b      	subs	r3, r3, r2
 8000788:	1a5b      	subs	r3, r3, r1
 800078a:	4698      	mov	r8, r3
 800078c:	2601      	movs	r6, #1
 800078e:	e5ae      	b.n	80002ee <__aeabi_dadd+0x96>
 8000790:	464a      	mov	r2, r9
 8000792:	08d1      	lsrs	r1, r2, #3
 8000794:	075a      	lsls	r2, r3, #29
 8000796:	4311      	orrs	r1, r2
 8000798:	08db      	lsrs	r3, r3, #3
 800079a:	e6a7      	b.n	80004ec <__aeabi_dadd+0x294>
 800079c:	4663      	mov	r3, ip
 800079e:	08f9      	lsrs	r1, r7, #3
 80007a0:	075a      	lsls	r2, r3, #29
 80007a2:	4654      	mov	r4, sl
 80007a4:	4311      	orrs	r1, r2
 80007a6:	08db      	lsrs	r3, r3, #3
 80007a8:	e6a0      	b.n	80004ec <__aeabi_dadd+0x294>
 80007aa:	464a      	mov	r2, r9
 80007ac:	4313      	orrs	r3, r2
 80007ae:	001d      	movs	r5, r3
 80007b0:	1e6b      	subs	r3, r5, #1
 80007b2:	419d      	sbcs	r5, r3
 80007b4:	e6c7      	b.n	8000546 <__aeabi_dadd+0x2ee>
 80007b6:	0014      	movs	r4, r2
 80007b8:	001e      	movs	r6, r3
 80007ba:	3c20      	subs	r4, #32
 80007bc:	40e6      	lsrs	r6, r4
 80007be:	2a20      	cmp	r2, #32
 80007c0:	d005      	beq.n	80007ce <__aeabi_dadd+0x576>
 80007c2:	2440      	movs	r4, #64	; 0x40
 80007c4:	1aa2      	subs	r2, r4, r2
 80007c6:	4093      	lsls	r3, r2
 80007c8:	464a      	mov	r2, r9
 80007ca:	431a      	orrs	r2, r3
 80007cc:	4691      	mov	r9, r2
 80007ce:	464d      	mov	r5, r9
 80007d0:	1e6b      	subs	r3, r5, #1
 80007d2:	419d      	sbcs	r5, r3
 80007d4:	4335      	orrs	r5, r6
 80007d6:	e778      	b.n	80006ca <__aeabi_dadd+0x472>
 80007d8:	464a      	mov	r2, r9
 80007da:	431a      	orrs	r2, r3
 80007dc:	d000      	beq.n	80007e0 <__aeabi_dadd+0x588>
 80007de:	e66b      	b.n	80004b8 <__aeabi_dadd+0x260>
 80007e0:	076b      	lsls	r3, r5, #29
 80007e2:	08f9      	lsrs	r1, r7, #3
 80007e4:	4319      	orrs	r1, r3
 80007e6:	08eb      	lsrs	r3, r5, #3
 80007e8:	e680      	b.n	80004ec <__aeabi_dadd+0x294>
 80007ea:	4661      	mov	r1, ip
 80007ec:	4339      	orrs	r1, r7
 80007ee:	d054      	beq.n	800089a <__aeabi_dadd+0x642>
 80007f0:	4663      	mov	r3, ip
 80007f2:	08f9      	lsrs	r1, r7, #3
 80007f4:	075c      	lsls	r4, r3, #29
 80007f6:	4321      	orrs	r1, r4
 80007f8:	08db      	lsrs	r3, r3, #3
 80007fa:	0004      	movs	r4, r0
 80007fc:	e654      	b.n	80004a8 <__aeabi_dadd+0x250>
 80007fe:	464a      	mov	r2, r9
 8000800:	1abd      	subs	r5, r7, r2
 8000802:	42af      	cmp	r7, r5
 8000804:	4189      	sbcs	r1, r1
 8000806:	4662      	mov	r2, ip
 8000808:	4249      	negs	r1, r1
 800080a:	1ad3      	subs	r3, r2, r3
 800080c:	1a5b      	subs	r3, r3, r1
 800080e:	4698      	mov	r8, r3
 8000810:	0004      	movs	r4, r0
 8000812:	2601      	movs	r6, #1
 8000814:	e56b      	b.n	80002ee <__aeabi_dadd+0x96>
 8000816:	464a      	mov	r2, r9
 8000818:	1bd5      	subs	r5, r2, r7
 800081a:	45a9      	cmp	r9, r5
 800081c:	4189      	sbcs	r1, r1
 800081e:	4662      	mov	r2, ip
 8000820:	4249      	negs	r1, r1
 8000822:	1a9a      	subs	r2, r3, r2
 8000824:	1a52      	subs	r2, r2, r1
 8000826:	4690      	mov	r8, r2
 8000828:	0212      	lsls	r2, r2, #8
 800082a:	d532      	bpl.n	8000892 <__aeabi_dadd+0x63a>
 800082c:	464a      	mov	r2, r9
 800082e:	1abd      	subs	r5, r7, r2
 8000830:	42af      	cmp	r7, r5
 8000832:	4189      	sbcs	r1, r1
 8000834:	4662      	mov	r2, ip
 8000836:	4249      	negs	r1, r1
 8000838:	1ad3      	subs	r3, r2, r3
 800083a:	1a5b      	subs	r3, r3, r1
 800083c:	4698      	mov	r8, r3
 800083e:	0004      	movs	r4, r0
 8000840:	e584      	b.n	800034c <__aeabi_dadd+0xf4>
 8000842:	4663      	mov	r3, ip
 8000844:	08f9      	lsrs	r1, r7, #3
 8000846:	075a      	lsls	r2, r3, #29
 8000848:	4311      	orrs	r1, r2
 800084a:	08db      	lsrs	r3, r3, #3
 800084c:	e64e      	b.n	80004ec <__aeabi_dadd+0x294>
 800084e:	08f9      	lsrs	r1, r7, #3
 8000850:	0768      	lsls	r0, r5, #29
 8000852:	4301      	orrs	r1, r0
 8000854:	08eb      	lsrs	r3, r5, #3
 8000856:	e624      	b.n	80004a2 <__aeabi_dadd+0x24a>
 8000858:	4662      	mov	r2, ip
 800085a:	433a      	orrs	r2, r7
 800085c:	d100      	bne.n	8000860 <__aeabi_dadd+0x608>
 800085e:	e698      	b.n	8000592 <__aeabi_dadd+0x33a>
 8000860:	464a      	mov	r2, r9
 8000862:	08d1      	lsrs	r1, r2, #3
 8000864:	075a      	lsls	r2, r3, #29
 8000866:	4311      	orrs	r1, r2
 8000868:	08da      	lsrs	r2, r3, #3
 800086a:	2380      	movs	r3, #128	; 0x80
 800086c:	031b      	lsls	r3, r3, #12
 800086e:	421a      	tst	r2, r3
 8000870:	d008      	beq.n	8000884 <__aeabi_dadd+0x62c>
 8000872:	4660      	mov	r0, ip
 8000874:	08c5      	lsrs	r5, r0, #3
 8000876:	421d      	tst	r5, r3
 8000878:	d104      	bne.n	8000884 <__aeabi_dadd+0x62c>
 800087a:	4654      	mov	r4, sl
 800087c:	002a      	movs	r2, r5
 800087e:	08f9      	lsrs	r1, r7, #3
 8000880:	0743      	lsls	r3, r0, #29
 8000882:	4319      	orrs	r1, r3
 8000884:	0f4b      	lsrs	r3, r1, #29
 8000886:	00c9      	lsls	r1, r1, #3
 8000888:	075b      	lsls	r3, r3, #29
 800088a:	08c9      	lsrs	r1, r1, #3
 800088c:	4319      	orrs	r1, r3
 800088e:	0013      	movs	r3, r2
 8000890:	e62c      	b.n	80004ec <__aeabi_dadd+0x294>
 8000892:	4641      	mov	r1, r8
 8000894:	4329      	orrs	r1, r5
 8000896:	d000      	beq.n	800089a <__aeabi_dadd+0x642>
 8000898:	e5fa      	b.n	8000490 <__aeabi_dadd+0x238>
 800089a:	2300      	movs	r3, #0
 800089c:	000a      	movs	r2, r1
 800089e:	2400      	movs	r4, #0
 80008a0:	e602      	b.n	80004a8 <__aeabi_dadd+0x250>
 80008a2:	076b      	lsls	r3, r5, #29
 80008a4:	08f9      	lsrs	r1, r7, #3
 80008a6:	4319      	orrs	r1, r3
 80008a8:	08eb      	lsrs	r3, r5, #3
 80008aa:	e5fd      	b.n	80004a8 <__aeabi_dadd+0x250>
 80008ac:	4663      	mov	r3, ip
 80008ae:	08f9      	lsrs	r1, r7, #3
 80008b0:	075b      	lsls	r3, r3, #29
 80008b2:	4319      	orrs	r1, r3
 80008b4:	4663      	mov	r3, ip
 80008b6:	0004      	movs	r4, r0
 80008b8:	08db      	lsrs	r3, r3, #3
 80008ba:	e617      	b.n	80004ec <__aeabi_dadd+0x294>
 80008bc:	003d      	movs	r5, r7
 80008be:	444d      	add	r5, r9
 80008c0:	4463      	add	r3, ip
 80008c2:	454d      	cmp	r5, r9
 80008c4:	4189      	sbcs	r1, r1
 80008c6:	4698      	mov	r8, r3
 80008c8:	4249      	negs	r1, r1
 80008ca:	4488      	add	r8, r1
 80008cc:	4643      	mov	r3, r8
 80008ce:	021b      	lsls	r3, r3, #8
 80008d0:	d400      	bmi.n	80008d4 <__aeabi_dadd+0x67c>
 80008d2:	e5dd      	b.n	8000490 <__aeabi_dadd+0x238>
 80008d4:	4642      	mov	r2, r8
 80008d6:	4b14      	ldr	r3, [pc, #80]	; (8000928 <__aeabi_dadd+0x6d0>)
 80008d8:	2601      	movs	r6, #1
 80008da:	401a      	ands	r2, r3
 80008dc:	4690      	mov	r8, r2
 80008de:	e5d7      	b.n	8000490 <__aeabi_dadd+0x238>
 80008e0:	0010      	movs	r0, r2
 80008e2:	001e      	movs	r6, r3
 80008e4:	3820      	subs	r0, #32
 80008e6:	40c6      	lsrs	r6, r0
 80008e8:	2a20      	cmp	r2, #32
 80008ea:	d005      	beq.n	80008f8 <__aeabi_dadd+0x6a0>
 80008ec:	2040      	movs	r0, #64	; 0x40
 80008ee:	1a82      	subs	r2, r0, r2
 80008f0:	4093      	lsls	r3, r2
 80008f2:	464a      	mov	r2, r9
 80008f4:	431a      	orrs	r2, r3
 80008f6:	4691      	mov	r9, r2
 80008f8:	464d      	mov	r5, r9
 80008fa:	1e6b      	subs	r3, r5, #1
 80008fc:	419d      	sbcs	r5, r3
 80008fe:	4335      	orrs	r5, r6
 8000900:	e621      	b.n	8000546 <__aeabi_dadd+0x2ee>
 8000902:	0002      	movs	r2, r0
 8000904:	2300      	movs	r3, #0
 8000906:	2100      	movs	r1, #0
 8000908:	e540      	b.n	800038c <__aeabi_dadd+0x134>
 800090a:	464a      	mov	r2, r9
 800090c:	19d5      	adds	r5, r2, r7
 800090e:	42bd      	cmp	r5, r7
 8000910:	4189      	sbcs	r1, r1
 8000912:	4463      	add	r3, ip
 8000914:	4698      	mov	r8, r3
 8000916:	4249      	negs	r1, r1
 8000918:	4488      	add	r8, r1
 800091a:	e5b3      	b.n	8000484 <__aeabi_dadd+0x22c>
 800091c:	2100      	movs	r1, #0
 800091e:	4a01      	ldr	r2, [pc, #4]	; (8000924 <__aeabi_dadd+0x6cc>)
 8000920:	000b      	movs	r3, r1
 8000922:	e533      	b.n	800038c <__aeabi_dadd+0x134>
 8000924:	000007ff 	.word	0x000007ff
 8000928:	ff7fffff 	.word	0xff7fffff

0800092c <__aeabi_ddiv>:
 800092c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800092e:	4657      	mov	r7, sl
 8000930:	464e      	mov	r6, r9
 8000932:	4645      	mov	r5, r8
 8000934:	46de      	mov	lr, fp
 8000936:	b5e0      	push	{r5, r6, r7, lr}
 8000938:	4681      	mov	r9, r0
 800093a:	0005      	movs	r5, r0
 800093c:	030c      	lsls	r4, r1, #12
 800093e:	0048      	lsls	r0, r1, #1
 8000940:	4692      	mov	sl, r2
 8000942:	001f      	movs	r7, r3
 8000944:	b085      	sub	sp, #20
 8000946:	0b24      	lsrs	r4, r4, #12
 8000948:	0d40      	lsrs	r0, r0, #21
 800094a:	0fce      	lsrs	r6, r1, #31
 800094c:	2800      	cmp	r0, #0
 800094e:	d059      	beq.n	8000a04 <__aeabi_ddiv+0xd8>
 8000950:	4b87      	ldr	r3, [pc, #540]	; (8000b70 <__aeabi_ddiv+0x244>)
 8000952:	4298      	cmp	r0, r3
 8000954:	d100      	bne.n	8000958 <__aeabi_ddiv+0x2c>
 8000956:	e098      	b.n	8000a8a <__aeabi_ddiv+0x15e>
 8000958:	0f6b      	lsrs	r3, r5, #29
 800095a:	00e4      	lsls	r4, r4, #3
 800095c:	431c      	orrs	r4, r3
 800095e:	2380      	movs	r3, #128	; 0x80
 8000960:	041b      	lsls	r3, r3, #16
 8000962:	4323      	orrs	r3, r4
 8000964:	4698      	mov	r8, r3
 8000966:	4b83      	ldr	r3, [pc, #524]	; (8000b74 <__aeabi_ddiv+0x248>)
 8000968:	00ed      	lsls	r5, r5, #3
 800096a:	469b      	mov	fp, r3
 800096c:	2300      	movs	r3, #0
 800096e:	4699      	mov	r9, r3
 8000970:	4483      	add	fp, r0
 8000972:	9300      	str	r3, [sp, #0]
 8000974:	033c      	lsls	r4, r7, #12
 8000976:	007b      	lsls	r3, r7, #1
 8000978:	4650      	mov	r0, sl
 800097a:	0b24      	lsrs	r4, r4, #12
 800097c:	0d5b      	lsrs	r3, r3, #21
 800097e:	0fff      	lsrs	r7, r7, #31
 8000980:	2b00      	cmp	r3, #0
 8000982:	d067      	beq.n	8000a54 <__aeabi_ddiv+0x128>
 8000984:	4a7a      	ldr	r2, [pc, #488]	; (8000b70 <__aeabi_ddiv+0x244>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d018      	beq.n	80009bc <__aeabi_ddiv+0x90>
 800098a:	497a      	ldr	r1, [pc, #488]	; (8000b74 <__aeabi_ddiv+0x248>)
 800098c:	0f42      	lsrs	r2, r0, #29
 800098e:	468c      	mov	ip, r1
 8000990:	00e4      	lsls	r4, r4, #3
 8000992:	4659      	mov	r1, fp
 8000994:	4314      	orrs	r4, r2
 8000996:	2280      	movs	r2, #128	; 0x80
 8000998:	4463      	add	r3, ip
 800099a:	0412      	lsls	r2, r2, #16
 800099c:	1acb      	subs	r3, r1, r3
 800099e:	4314      	orrs	r4, r2
 80009a0:	469b      	mov	fp, r3
 80009a2:	00c2      	lsls	r2, r0, #3
 80009a4:	2000      	movs	r0, #0
 80009a6:	0033      	movs	r3, r6
 80009a8:	407b      	eors	r3, r7
 80009aa:	469a      	mov	sl, r3
 80009ac:	464b      	mov	r3, r9
 80009ae:	2b0f      	cmp	r3, #15
 80009b0:	d900      	bls.n	80009b4 <__aeabi_ddiv+0x88>
 80009b2:	e0ef      	b.n	8000b94 <__aeabi_ddiv+0x268>
 80009b4:	4970      	ldr	r1, [pc, #448]	; (8000b78 <__aeabi_ddiv+0x24c>)
 80009b6:	009b      	lsls	r3, r3, #2
 80009b8:	58cb      	ldr	r3, [r1, r3]
 80009ba:	469f      	mov	pc, r3
 80009bc:	4b6f      	ldr	r3, [pc, #444]	; (8000b7c <__aeabi_ddiv+0x250>)
 80009be:	4652      	mov	r2, sl
 80009c0:	469c      	mov	ip, r3
 80009c2:	4322      	orrs	r2, r4
 80009c4:	44e3      	add	fp, ip
 80009c6:	2a00      	cmp	r2, #0
 80009c8:	d000      	beq.n	80009cc <__aeabi_ddiv+0xa0>
 80009ca:	e095      	b.n	8000af8 <__aeabi_ddiv+0x1cc>
 80009cc:	4649      	mov	r1, r9
 80009ce:	2302      	movs	r3, #2
 80009d0:	4319      	orrs	r1, r3
 80009d2:	4689      	mov	r9, r1
 80009d4:	2400      	movs	r4, #0
 80009d6:	2002      	movs	r0, #2
 80009d8:	e7e5      	b.n	80009a6 <__aeabi_ddiv+0x7a>
 80009da:	2300      	movs	r3, #0
 80009dc:	2400      	movs	r4, #0
 80009de:	2500      	movs	r5, #0
 80009e0:	4652      	mov	r2, sl
 80009e2:	051b      	lsls	r3, r3, #20
 80009e4:	4323      	orrs	r3, r4
 80009e6:	07d2      	lsls	r2, r2, #31
 80009e8:	4313      	orrs	r3, r2
 80009ea:	0028      	movs	r0, r5
 80009ec:	0019      	movs	r1, r3
 80009ee:	b005      	add	sp, #20
 80009f0:	bcf0      	pop	{r4, r5, r6, r7}
 80009f2:	46bb      	mov	fp, r7
 80009f4:	46b2      	mov	sl, r6
 80009f6:	46a9      	mov	r9, r5
 80009f8:	46a0      	mov	r8, r4
 80009fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009fc:	2400      	movs	r4, #0
 80009fe:	2500      	movs	r5, #0
 8000a00:	4b5b      	ldr	r3, [pc, #364]	; (8000b70 <__aeabi_ddiv+0x244>)
 8000a02:	e7ed      	b.n	80009e0 <__aeabi_ddiv+0xb4>
 8000a04:	464b      	mov	r3, r9
 8000a06:	4323      	orrs	r3, r4
 8000a08:	4698      	mov	r8, r3
 8000a0a:	d100      	bne.n	8000a0e <__aeabi_ddiv+0xe2>
 8000a0c:	e089      	b.n	8000b22 <__aeabi_ddiv+0x1f6>
 8000a0e:	2c00      	cmp	r4, #0
 8000a10:	d100      	bne.n	8000a14 <__aeabi_ddiv+0xe8>
 8000a12:	e1e0      	b.n	8000dd6 <__aeabi_ddiv+0x4aa>
 8000a14:	0020      	movs	r0, r4
 8000a16:	f001 f939 	bl	8001c8c <__clzsi2>
 8000a1a:	0001      	movs	r1, r0
 8000a1c:	0002      	movs	r2, r0
 8000a1e:	390b      	subs	r1, #11
 8000a20:	231d      	movs	r3, #29
 8000a22:	1a5b      	subs	r3, r3, r1
 8000a24:	4649      	mov	r1, r9
 8000a26:	0010      	movs	r0, r2
 8000a28:	40d9      	lsrs	r1, r3
 8000a2a:	3808      	subs	r0, #8
 8000a2c:	4084      	lsls	r4, r0
 8000a2e:	000b      	movs	r3, r1
 8000a30:	464d      	mov	r5, r9
 8000a32:	4323      	orrs	r3, r4
 8000a34:	4698      	mov	r8, r3
 8000a36:	4085      	lsls	r5, r0
 8000a38:	4851      	ldr	r0, [pc, #324]	; (8000b80 <__aeabi_ddiv+0x254>)
 8000a3a:	033c      	lsls	r4, r7, #12
 8000a3c:	1a83      	subs	r3, r0, r2
 8000a3e:	469b      	mov	fp, r3
 8000a40:	2300      	movs	r3, #0
 8000a42:	4699      	mov	r9, r3
 8000a44:	9300      	str	r3, [sp, #0]
 8000a46:	007b      	lsls	r3, r7, #1
 8000a48:	4650      	mov	r0, sl
 8000a4a:	0b24      	lsrs	r4, r4, #12
 8000a4c:	0d5b      	lsrs	r3, r3, #21
 8000a4e:	0fff      	lsrs	r7, r7, #31
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d197      	bne.n	8000984 <__aeabi_ddiv+0x58>
 8000a54:	4652      	mov	r2, sl
 8000a56:	4322      	orrs	r2, r4
 8000a58:	d055      	beq.n	8000b06 <__aeabi_ddiv+0x1da>
 8000a5a:	2c00      	cmp	r4, #0
 8000a5c:	d100      	bne.n	8000a60 <__aeabi_ddiv+0x134>
 8000a5e:	e1ca      	b.n	8000df6 <__aeabi_ddiv+0x4ca>
 8000a60:	0020      	movs	r0, r4
 8000a62:	f001 f913 	bl	8001c8c <__clzsi2>
 8000a66:	0002      	movs	r2, r0
 8000a68:	3a0b      	subs	r2, #11
 8000a6a:	231d      	movs	r3, #29
 8000a6c:	0001      	movs	r1, r0
 8000a6e:	1a9b      	subs	r3, r3, r2
 8000a70:	4652      	mov	r2, sl
 8000a72:	3908      	subs	r1, #8
 8000a74:	40da      	lsrs	r2, r3
 8000a76:	408c      	lsls	r4, r1
 8000a78:	4314      	orrs	r4, r2
 8000a7a:	4652      	mov	r2, sl
 8000a7c:	408a      	lsls	r2, r1
 8000a7e:	4b41      	ldr	r3, [pc, #260]	; (8000b84 <__aeabi_ddiv+0x258>)
 8000a80:	4458      	add	r0, fp
 8000a82:	469b      	mov	fp, r3
 8000a84:	4483      	add	fp, r0
 8000a86:	2000      	movs	r0, #0
 8000a88:	e78d      	b.n	80009a6 <__aeabi_ddiv+0x7a>
 8000a8a:	464b      	mov	r3, r9
 8000a8c:	4323      	orrs	r3, r4
 8000a8e:	4698      	mov	r8, r3
 8000a90:	d140      	bne.n	8000b14 <__aeabi_ddiv+0x1e8>
 8000a92:	2308      	movs	r3, #8
 8000a94:	4699      	mov	r9, r3
 8000a96:	3b06      	subs	r3, #6
 8000a98:	2500      	movs	r5, #0
 8000a9a:	4683      	mov	fp, r0
 8000a9c:	9300      	str	r3, [sp, #0]
 8000a9e:	e769      	b.n	8000974 <__aeabi_ddiv+0x48>
 8000aa0:	46b2      	mov	sl, r6
 8000aa2:	9b00      	ldr	r3, [sp, #0]
 8000aa4:	2b02      	cmp	r3, #2
 8000aa6:	d0a9      	beq.n	80009fc <__aeabi_ddiv+0xd0>
 8000aa8:	2b03      	cmp	r3, #3
 8000aaa:	d100      	bne.n	8000aae <__aeabi_ddiv+0x182>
 8000aac:	e211      	b.n	8000ed2 <__aeabi_ddiv+0x5a6>
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d093      	beq.n	80009da <__aeabi_ddiv+0xae>
 8000ab2:	4a35      	ldr	r2, [pc, #212]	; (8000b88 <__aeabi_ddiv+0x25c>)
 8000ab4:	445a      	add	r2, fp
 8000ab6:	2a00      	cmp	r2, #0
 8000ab8:	dc00      	bgt.n	8000abc <__aeabi_ddiv+0x190>
 8000aba:	e13c      	b.n	8000d36 <__aeabi_ddiv+0x40a>
 8000abc:	076b      	lsls	r3, r5, #29
 8000abe:	d000      	beq.n	8000ac2 <__aeabi_ddiv+0x196>
 8000ac0:	e1a7      	b.n	8000e12 <__aeabi_ddiv+0x4e6>
 8000ac2:	08ed      	lsrs	r5, r5, #3
 8000ac4:	4643      	mov	r3, r8
 8000ac6:	01db      	lsls	r3, r3, #7
 8000ac8:	d506      	bpl.n	8000ad8 <__aeabi_ddiv+0x1ac>
 8000aca:	4642      	mov	r2, r8
 8000acc:	4b2f      	ldr	r3, [pc, #188]	; (8000b8c <__aeabi_ddiv+0x260>)
 8000ace:	401a      	ands	r2, r3
 8000ad0:	4690      	mov	r8, r2
 8000ad2:	2280      	movs	r2, #128	; 0x80
 8000ad4:	00d2      	lsls	r2, r2, #3
 8000ad6:	445a      	add	r2, fp
 8000ad8:	4b2d      	ldr	r3, [pc, #180]	; (8000b90 <__aeabi_ddiv+0x264>)
 8000ada:	429a      	cmp	r2, r3
 8000adc:	dc8e      	bgt.n	80009fc <__aeabi_ddiv+0xd0>
 8000ade:	4643      	mov	r3, r8
 8000ae0:	0552      	lsls	r2, r2, #21
 8000ae2:	0758      	lsls	r0, r3, #29
 8000ae4:	025c      	lsls	r4, r3, #9
 8000ae6:	4305      	orrs	r5, r0
 8000ae8:	0b24      	lsrs	r4, r4, #12
 8000aea:	0d53      	lsrs	r3, r2, #21
 8000aec:	e778      	b.n	80009e0 <__aeabi_ddiv+0xb4>
 8000aee:	46ba      	mov	sl, r7
 8000af0:	46a0      	mov	r8, r4
 8000af2:	0015      	movs	r5, r2
 8000af4:	9000      	str	r0, [sp, #0]
 8000af6:	e7d4      	b.n	8000aa2 <__aeabi_ddiv+0x176>
 8000af8:	464a      	mov	r2, r9
 8000afa:	2303      	movs	r3, #3
 8000afc:	431a      	orrs	r2, r3
 8000afe:	4691      	mov	r9, r2
 8000b00:	2003      	movs	r0, #3
 8000b02:	4652      	mov	r2, sl
 8000b04:	e74f      	b.n	80009a6 <__aeabi_ddiv+0x7a>
 8000b06:	4649      	mov	r1, r9
 8000b08:	2301      	movs	r3, #1
 8000b0a:	4319      	orrs	r1, r3
 8000b0c:	4689      	mov	r9, r1
 8000b0e:	2400      	movs	r4, #0
 8000b10:	2001      	movs	r0, #1
 8000b12:	e748      	b.n	80009a6 <__aeabi_ddiv+0x7a>
 8000b14:	230c      	movs	r3, #12
 8000b16:	4699      	mov	r9, r3
 8000b18:	3b09      	subs	r3, #9
 8000b1a:	46a0      	mov	r8, r4
 8000b1c:	4683      	mov	fp, r0
 8000b1e:	9300      	str	r3, [sp, #0]
 8000b20:	e728      	b.n	8000974 <__aeabi_ddiv+0x48>
 8000b22:	2304      	movs	r3, #4
 8000b24:	4699      	mov	r9, r3
 8000b26:	2300      	movs	r3, #0
 8000b28:	469b      	mov	fp, r3
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	2500      	movs	r5, #0
 8000b2e:	9300      	str	r3, [sp, #0]
 8000b30:	e720      	b.n	8000974 <__aeabi_ddiv+0x48>
 8000b32:	2300      	movs	r3, #0
 8000b34:	2480      	movs	r4, #128	; 0x80
 8000b36:	469a      	mov	sl, r3
 8000b38:	2500      	movs	r5, #0
 8000b3a:	4b0d      	ldr	r3, [pc, #52]	; (8000b70 <__aeabi_ddiv+0x244>)
 8000b3c:	0324      	lsls	r4, r4, #12
 8000b3e:	e74f      	b.n	80009e0 <__aeabi_ddiv+0xb4>
 8000b40:	2380      	movs	r3, #128	; 0x80
 8000b42:	4641      	mov	r1, r8
 8000b44:	031b      	lsls	r3, r3, #12
 8000b46:	4219      	tst	r1, r3
 8000b48:	d008      	beq.n	8000b5c <__aeabi_ddiv+0x230>
 8000b4a:	421c      	tst	r4, r3
 8000b4c:	d106      	bne.n	8000b5c <__aeabi_ddiv+0x230>
 8000b4e:	431c      	orrs	r4, r3
 8000b50:	0324      	lsls	r4, r4, #12
 8000b52:	46ba      	mov	sl, r7
 8000b54:	0015      	movs	r5, r2
 8000b56:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <__aeabi_ddiv+0x244>)
 8000b58:	0b24      	lsrs	r4, r4, #12
 8000b5a:	e741      	b.n	80009e0 <__aeabi_ddiv+0xb4>
 8000b5c:	2480      	movs	r4, #128	; 0x80
 8000b5e:	4643      	mov	r3, r8
 8000b60:	0324      	lsls	r4, r4, #12
 8000b62:	431c      	orrs	r4, r3
 8000b64:	0324      	lsls	r4, r4, #12
 8000b66:	46b2      	mov	sl, r6
 8000b68:	4b01      	ldr	r3, [pc, #4]	; (8000b70 <__aeabi_ddiv+0x244>)
 8000b6a:	0b24      	lsrs	r4, r4, #12
 8000b6c:	e738      	b.n	80009e0 <__aeabi_ddiv+0xb4>
 8000b6e:	46c0      	nop			; (mov r8, r8)
 8000b70:	000007ff 	.word	0x000007ff
 8000b74:	fffffc01 	.word	0xfffffc01
 8000b78:	08007058 	.word	0x08007058
 8000b7c:	fffff801 	.word	0xfffff801
 8000b80:	fffffc0d 	.word	0xfffffc0d
 8000b84:	000003f3 	.word	0x000003f3
 8000b88:	000003ff 	.word	0x000003ff
 8000b8c:	feffffff 	.word	0xfeffffff
 8000b90:	000007fe 	.word	0x000007fe
 8000b94:	4544      	cmp	r4, r8
 8000b96:	d200      	bcs.n	8000b9a <__aeabi_ddiv+0x26e>
 8000b98:	e116      	b.n	8000dc8 <__aeabi_ddiv+0x49c>
 8000b9a:	d100      	bne.n	8000b9e <__aeabi_ddiv+0x272>
 8000b9c:	e111      	b.n	8000dc2 <__aeabi_ddiv+0x496>
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	425b      	negs	r3, r3
 8000ba2:	469c      	mov	ip, r3
 8000ba4:	002e      	movs	r6, r5
 8000ba6:	4640      	mov	r0, r8
 8000ba8:	2500      	movs	r5, #0
 8000baa:	44e3      	add	fp, ip
 8000bac:	0223      	lsls	r3, r4, #8
 8000bae:	0e14      	lsrs	r4, r2, #24
 8000bb0:	431c      	orrs	r4, r3
 8000bb2:	0c1b      	lsrs	r3, r3, #16
 8000bb4:	4699      	mov	r9, r3
 8000bb6:	0423      	lsls	r3, r4, #16
 8000bb8:	0c1f      	lsrs	r7, r3, #16
 8000bba:	0212      	lsls	r2, r2, #8
 8000bbc:	4649      	mov	r1, r9
 8000bbe:	9200      	str	r2, [sp, #0]
 8000bc0:	9701      	str	r7, [sp, #4]
 8000bc2:	f7ff fb25 	bl	8000210 <__aeabi_uidivmod>
 8000bc6:	0002      	movs	r2, r0
 8000bc8:	437a      	muls	r2, r7
 8000bca:	040b      	lsls	r3, r1, #16
 8000bcc:	0c31      	lsrs	r1, r6, #16
 8000bce:	4680      	mov	r8, r0
 8000bd0:	4319      	orrs	r1, r3
 8000bd2:	428a      	cmp	r2, r1
 8000bd4:	d90b      	bls.n	8000bee <__aeabi_ddiv+0x2c2>
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	425b      	negs	r3, r3
 8000bda:	469c      	mov	ip, r3
 8000bdc:	1909      	adds	r1, r1, r4
 8000bde:	44e0      	add	r8, ip
 8000be0:	428c      	cmp	r4, r1
 8000be2:	d804      	bhi.n	8000bee <__aeabi_ddiv+0x2c2>
 8000be4:	428a      	cmp	r2, r1
 8000be6:	d902      	bls.n	8000bee <__aeabi_ddiv+0x2c2>
 8000be8:	1e83      	subs	r3, r0, #2
 8000bea:	4698      	mov	r8, r3
 8000bec:	1909      	adds	r1, r1, r4
 8000bee:	1a88      	subs	r0, r1, r2
 8000bf0:	4649      	mov	r1, r9
 8000bf2:	f7ff fb0d 	bl	8000210 <__aeabi_uidivmod>
 8000bf6:	0409      	lsls	r1, r1, #16
 8000bf8:	468c      	mov	ip, r1
 8000bfa:	0431      	lsls	r1, r6, #16
 8000bfc:	4666      	mov	r6, ip
 8000bfe:	9a01      	ldr	r2, [sp, #4]
 8000c00:	0c09      	lsrs	r1, r1, #16
 8000c02:	4342      	muls	r2, r0
 8000c04:	0003      	movs	r3, r0
 8000c06:	4331      	orrs	r1, r6
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	d904      	bls.n	8000c16 <__aeabi_ddiv+0x2ea>
 8000c0c:	1909      	adds	r1, r1, r4
 8000c0e:	3b01      	subs	r3, #1
 8000c10:	428c      	cmp	r4, r1
 8000c12:	d800      	bhi.n	8000c16 <__aeabi_ddiv+0x2ea>
 8000c14:	e111      	b.n	8000e3a <__aeabi_ddiv+0x50e>
 8000c16:	1a89      	subs	r1, r1, r2
 8000c18:	4642      	mov	r2, r8
 8000c1a:	9e00      	ldr	r6, [sp, #0]
 8000c1c:	0412      	lsls	r2, r2, #16
 8000c1e:	431a      	orrs	r2, r3
 8000c20:	0c33      	lsrs	r3, r6, #16
 8000c22:	001f      	movs	r7, r3
 8000c24:	0c10      	lsrs	r0, r2, #16
 8000c26:	4690      	mov	r8, r2
 8000c28:	9302      	str	r3, [sp, #8]
 8000c2a:	0413      	lsls	r3, r2, #16
 8000c2c:	0432      	lsls	r2, r6, #16
 8000c2e:	0c16      	lsrs	r6, r2, #16
 8000c30:	0032      	movs	r2, r6
 8000c32:	0c1b      	lsrs	r3, r3, #16
 8000c34:	435a      	muls	r2, r3
 8000c36:	9603      	str	r6, [sp, #12]
 8000c38:	437b      	muls	r3, r7
 8000c3a:	4346      	muls	r6, r0
 8000c3c:	4378      	muls	r0, r7
 8000c3e:	0c17      	lsrs	r7, r2, #16
 8000c40:	46bc      	mov	ip, r7
 8000c42:	199b      	adds	r3, r3, r6
 8000c44:	4463      	add	r3, ip
 8000c46:	429e      	cmp	r6, r3
 8000c48:	d903      	bls.n	8000c52 <__aeabi_ddiv+0x326>
 8000c4a:	2680      	movs	r6, #128	; 0x80
 8000c4c:	0276      	lsls	r6, r6, #9
 8000c4e:	46b4      	mov	ip, r6
 8000c50:	4460      	add	r0, ip
 8000c52:	0c1e      	lsrs	r6, r3, #16
 8000c54:	1830      	adds	r0, r6, r0
 8000c56:	0416      	lsls	r6, r2, #16
 8000c58:	041b      	lsls	r3, r3, #16
 8000c5a:	0c36      	lsrs	r6, r6, #16
 8000c5c:	199e      	adds	r6, r3, r6
 8000c5e:	4281      	cmp	r1, r0
 8000c60:	d200      	bcs.n	8000c64 <__aeabi_ddiv+0x338>
 8000c62:	e09c      	b.n	8000d9e <__aeabi_ddiv+0x472>
 8000c64:	d100      	bne.n	8000c68 <__aeabi_ddiv+0x33c>
 8000c66:	e097      	b.n	8000d98 <__aeabi_ddiv+0x46c>
 8000c68:	1bae      	subs	r6, r5, r6
 8000c6a:	1a09      	subs	r1, r1, r0
 8000c6c:	42b5      	cmp	r5, r6
 8000c6e:	4180      	sbcs	r0, r0
 8000c70:	4240      	negs	r0, r0
 8000c72:	1a08      	subs	r0, r1, r0
 8000c74:	4284      	cmp	r4, r0
 8000c76:	d100      	bne.n	8000c7a <__aeabi_ddiv+0x34e>
 8000c78:	e111      	b.n	8000e9e <__aeabi_ddiv+0x572>
 8000c7a:	4649      	mov	r1, r9
 8000c7c:	f7ff fac8 	bl	8000210 <__aeabi_uidivmod>
 8000c80:	9a01      	ldr	r2, [sp, #4]
 8000c82:	040b      	lsls	r3, r1, #16
 8000c84:	4342      	muls	r2, r0
 8000c86:	0c31      	lsrs	r1, r6, #16
 8000c88:	0005      	movs	r5, r0
 8000c8a:	4319      	orrs	r1, r3
 8000c8c:	428a      	cmp	r2, r1
 8000c8e:	d907      	bls.n	8000ca0 <__aeabi_ddiv+0x374>
 8000c90:	1909      	adds	r1, r1, r4
 8000c92:	3d01      	subs	r5, #1
 8000c94:	428c      	cmp	r4, r1
 8000c96:	d803      	bhi.n	8000ca0 <__aeabi_ddiv+0x374>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	d901      	bls.n	8000ca0 <__aeabi_ddiv+0x374>
 8000c9c:	1e85      	subs	r5, r0, #2
 8000c9e:	1909      	adds	r1, r1, r4
 8000ca0:	1a88      	subs	r0, r1, r2
 8000ca2:	4649      	mov	r1, r9
 8000ca4:	f7ff fab4 	bl	8000210 <__aeabi_uidivmod>
 8000ca8:	0409      	lsls	r1, r1, #16
 8000caa:	468c      	mov	ip, r1
 8000cac:	0431      	lsls	r1, r6, #16
 8000cae:	4666      	mov	r6, ip
 8000cb0:	9a01      	ldr	r2, [sp, #4]
 8000cb2:	0c09      	lsrs	r1, r1, #16
 8000cb4:	4342      	muls	r2, r0
 8000cb6:	0003      	movs	r3, r0
 8000cb8:	4331      	orrs	r1, r6
 8000cba:	428a      	cmp	r2, r1
 8000cbc:	d907      	bls.n	8000cce <__aeabi_ddiv+0x3a2>
 8000cbe:	1909      	adds	r1, r1, r4
 8000cc0:	3b01      	subs	r3, #1
 8000cc2:	428c      	cmp	r4, r1
 8000cc4:	d803      	bhi.n	8000cce <__aeabi_ddiv+0x3a2>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	d901      	bls.n	8000cce <__aeabi_ddiv+0x3a2>
 8000cca:	1e83      	subs	r3, r0, #2
 8000ccc:	1909      	adds	r1, r1, r4
 8000cce:	9e03      	ldr	r6, [sp, #12]
 8000cd0:	1a89      	subs	r1, r1, r2
 8000cd2:	0032      	movs	r2, r6
 8000cd4:	042d      	lsls	r5, r5, #16
 8000cd6:	431d      	orrs	r5, r3
 8000cd8:	9f02      	ldr	r7, [sp, #8]
 8000cda:	042b      	lsls	r3, r5, #16
 8000cdc:	0c1b      	lsrs	r3, r3, #16
 8000cde:	435a      	muls	r2, r3
 8000ce0:	437b      	muls	r3, r7
 8000ce2:	469c      	mov	ip, r3
 8000ce4:	0c28      	lsrs	r0, r5, #16
 8000ce6:	4346      	muls	r6, r0
 8000ce8:	0c13      	lsrs	r3, r2, #16
 8000cea:	44b4      	add	ip, r6
 8000cec:	4463      	add	r3, ip
 8000cee:	4378      	muls	r0, r7
 8000cf0:	429e      	cmp	r6, r3
 8000cf2:	d903      	bls.n	8000cfc <__aeabi_ddiv+0x3d0>
 8000cf4:	2680      	movs	r6, #128	; 0x80
 8000cf6:	0276      	lsls	r6, r6, #9
 8000cf8:	46b4      	mov	ip, r6
 8000cfa:	4460      	add	r0, ip
 8000cfc:	0c1e      	lsrs	r6, r3, #16
 8000cfe:	0412      	lsls	r2, r2, #16
 8000d00:	041b      	lsls	r3, r3, #16
 8000d02:	0c12      	lsrs	r2, r2, #16
 8000d04:	1830      	adds	r0, r6, r0
 8000d06:	189b      	adds	r3, r3, r2
 8000d08:	4281      	cmp	r1, r0
 8000d0a:	d306      	bcc.n	8000d1a <__aeabi_ddiv+0x3ee>
 8000d0c:	d002      	beq.n	8000d14 <__aeabi_ddiv+0x3e8>
 8000d0e:	2301      	movs	r3, #1
 8000d10:	431d      	orrs	r5, r3
 8000d12:	e6ce      	b.n	8000ab2 <__aeabi_ddiv+0x186>
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d100      	bne.n	8000d1a <__aeabi_ddiv+0x3ee>
 8000d18:	e6cb      	b.n	8000ab2 <__aeabi_ddiv+0x186>
 8000d1a:	1861      	adds	r1, r4, r1
 8000d1c:	1e6e      	subs	r6, r5, #1
 8000d1e:	42a1      	cmp	r1, r4
 8000d20:	d200      	bcs.n	8000d24 <__aeabi_ddiv+0x3f8>
 8000d22:	e0a4      	b.n	8000e6e <__aeabi_ddiv+0x542>
 8000d24:	4281      	cmp	r1, r0
 8000d26:	d200      	bcs.n	8000d2a <__aeabi_ddiv+0x3fe>
 8000d28:	e0c9      	b.n	8000ebe <__aeabi_ddiv+0x592>
 8000d2a:	d100      	bne.n	8000d2e <__aeabi_ddiv+0x402>
 8000d2c:	e0d9      	b.n	8000ee2 <__aeabi_ddiv+0x5b6>
 8000d2e:	0035      	movs	r5, r6
 8000d30:	e7ed      	b.n	8000d0e <__aeabi_ddiv+0x3e2>
 8000d32:	2501      	movs	r5, #1
 8000d34:	426d      	negs	r5, r5
 8000d36:	2101      	movs	r1, #1
 8000d38:	1a89      	subs	r1, r1, r2
 8000d3a:	2938      	cmp	r1, #56	; 0x38
 8000d3c:	dd00      	ble.n	8000d40 <__aeabi_ddiv+0x414>
 8000d3e:	e64c      	b.n	80009da <__aeabi_ddiv+0xae>
 8000d40:	291f      	cmp	r1, #31
 8000d42:	dc00      	bgt.n	8000d46 <__aeabi_ddiv+0x41a>
 8000d44:	e07f      	b.n	8000e46 <__aeabi_ddiv+0x51a>
 8000d46:	231f      	movs	r3, #31
 8000d48:	425b      	negs	r3, r3
 8000d4a:	1a9a      	subs	r2, r3, r2
 8000d4c:	4643      	mov	r3, r8
 8000d4e:	40d3      	lsrs	r3, r2
 8000d50:	2920      	cmp	r1, #32
 8000d52:	d004      	beq.n	8000d5e <__aeabi_ddiv+0x432>
 8000d54:	4644      	mov	r4, r8
 8000d56:	4a65      	ldr	r2, [pc, #404]	; (8000eec <__aeabi_ddiv+0x5c0>)
 8000d58:	445a      	add	r2, fp
 8000d5a:	4094      	lsls	r4, r2
 8000d5c:	4325      	orrs	r5, r4
 8000d5e:	1e6a      	subs	r2, r5, #1
 8000d60:	4195      	sbcs	r5, r2
 8000d62:	2207      	movs	r2, #7
 8000d64:	432b      	orrs	r3, r5
 8000d66:	0015      	movs	r5, r2
 8000d68:	2400      	movs	r4, #0
 8000d6a:	401d      	ands	r5, r3
 8000d6c:	421a      	tst	r2, r3
 8000d6e:	d100      	bne.n	8000d72 <__aeabi_ddiv+0x446>
 8000d70:	e0a1      	b.n	8000eb6 <__aeabi_ddiv+0x58a>
 8000d72:	220f      	movs	r2, #15
 8000d74:	2400      	movs	r4, #0
 8000d76:	401a      	ands	r2, r3
 8000d78:	2a04      	cmp	r2, #4
 8000d7a:	d100      	bne.n	8000d7e <__aeabi_ddiv+0x452>
 8000d7c:	e098      	b.n	8000eb0 <__aeabi_ddiv+0x584>
 8000d7e:	1d1a      	adds	r2, r3, #4
 8000d80:	429a      	cmp	r2, r3
 8000d82:	419b      	sbcs	r3, r3
 8000d84:	425b      	negs	r3, r3
 8000d86:	18e4      	adds	r4, r4, r3
 8000d88:	0013      	movs	r3, r2
 8000d8a:	0222      	lsls	r2, r4, #8
 8000d8c:	d400      	bmi.n	8000d90 <__aeabi_ddiv+0x464>
 8000d8e:	e08f      	b.n	8000eb0 <__aeabi_ddiv+0x584>
 8000d90:	2301      	movs	r3, #1
 8000d92:	2400      	movs	r4, #0
 8000d94:	2500      	movs	r5, #0
 8000d96:	e623      	b.n	80009e0 <__aeabi_ddiv+0xb4>
 8000d98:	42b5      	cmp	r5, r6
 8000d9a:	d300      	bcc.n	8000d9e <__aeabi_ddiv+0x472>
 8000d9c:	e764      	b.n	8000c68 <__aeabi_ddiv+0x33c>
 8000d9e:	4643      	mov	r3, r8
 8000da0:	1e5a      	subs	r2, r3, #1
 8000da2:	9b00      	ldr	r3, [sp, #0]
 8000da4:	469c      	mov	ip, r3
 8000da6:	4465      	add	r5, ip
 8000da8:	001f      	movs	r7, r3
 8000daa:	429d      	cmp	r5, r3
 8000dac:	419b      	sbcs	r3, r3
 8000dae:	425b      	negs	r3, r3
 8000db0:	191b      	adds	r3, r3, r4
 8000db2:	18c9      	adds	r1, r1, r3
 8000db4:	428c      	cmp	r4, r1
 8000db6:	d23a      	bcs.n	8000e2e <__aeabi_ddiv+0x502>
 8000db8:	4288      	cmp	r0, r1
 8000dba:	d863      	bhi.n	8000e84 <__aeabi_ddiv+0x558>
 8000dbc:	d060      	beq.n	8000e80 <__aeabi_ddiv+0x554>
 8000dbe:	4690      	mov	r8, r2
 8000dc0:	e752      	b.n	8000c68 <__aeabi_ddiv+0x33c>
 8000dc2:	42aa      	cmp	r2, r5
 8000dc4:	d900      	bls.n	8000dc8 <__aeabi_ddiv+0x49c>
 8000dc6:	e6ea      	b.n	8000b9e <__aeabi_ddiv+0x272>
 8000dc8:	4643      	mov	r3, r8
 8000dca:	07de      	lsls	r6, r3, #31
 8000dcc:	0858      	lsrs	r0, r3, #1
 8000dce:	086b      	lsrs	r3, r5, #1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	07ed      	lsls	r5, r5, #31
 8000dd4:	e6ea      	b.n	8000bac <__aeabi_ddiv+0x280>
 8000dd6:	4648      	mov	r0, r9
 8000dd8:	f000 ff58 	bl	8001c8c <__clzsi2>
 8000ddc:	0001      	movs	r1, r0
 8000dde:	0002      	movs	r2, r0
 8000de0:	3115      	adds	r1, #21
 8000de2:	3220      	adds	r2, #32
 8000de4:	291c      	cmp	r1, #28
 8000de6:	dc00      	bgt.n	8000dea <__aeabi_ddiv+0x4be>
 8000de8:	e61a      	b.n	8000a20 <__aeabi_ddiv+0xf4>
 8000dea:	464b      	mov	r3, r9
 8000dec:	3808      	subs	r0, #8
 8000dee:	4083      	lsls	r3, r0
 8000df0:	2500      	movs	r5, #0
 8000df2:	4698      	mov	r8, r3
 8000df4:	e620      	b.n	8000a38 <__aeabi_ddiv+0x10c>
 8000df6:	f000 ff49 	bl	8001c8c <__clzsi2>
 8000dfa:	0003      	movs	r3, r0
 8000dfc:	001a      	movs	r2, r3
 8000dfe:	3215      	adds	r2, #21
 8000e00:	3020      	adds	r0, #32
 8000e02:	2a1c      	cmp	r2, #28
 8000e04:	dc00      	bgt.n	8000e08 <__aeabi_ddiv+0x4dc>
 8000e06:	e630      	b.n	8000a6a <__aeabi_ddiv+0x13e>
 8000e08:	4654      	mov	r4, sl
 8000e0a:	3b08      	subs	r3, #8
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	409c      	lsls	r4, r3
 8000e10:	e635      	b.n	8000a7e <__aeabi_ddiv+0x152>
 8000e12:	230f      	movs	r3, #15
 8000e14:	402b      	ands	r3, r5
 8000e16:	2b04      	cmp	r3, #4
 8000e18:	d100      	bne.n	8000e1c <__aeabi_ddiv+0x4f0>
 8000e1a:	e652      	b.n	8000ac2 <__aeabi_ddiv+0x196>
 8000e1c:	2305      	movs	r3, #5
 8000e1e:	425b      	negs	r3, r3
 8000e20:	42ab      	cmp	r3, r5
 8000e22:	419b      	sbcs	r3, r3
 8000e24:	3504      	adds	r5, #4
 8000e26:	425b      	negs	r3, r3
 8000e28:	08ed      	lsrs	r5, r5, #3
 8000e2a:	4498      	add	r8, r3
 8000e2c:	e64a      	b.n	8000ac4 <__aeabi_ddiv+0x198>
 8000e2e:	428c      	cmp	r4, r1
 8000e30:	d1c5      	bne.n	8000dbe <__aeabi_ddiv+0x492>
 8000e32:	42af      	cmp	r7, r5
 8000e34:	d9c0      	bls.n	8000db8 <__aeabi_ddiv+0x48c>
 8000e36:	4690      	mov	r8, r2
 8000e38:	e716      	b.n	8000c68 <__aeabi_ddiv+0x33c>
 8000e3a:	428a      	cmp	r2, r1
 8000e3c:	d800      	bhi.n	8000e40 <__aeabi_ddiv+0x514>
 8000e3e:	e6ea      	b.n	8000c16 <__aeabi_ddiv+0x2ea>
 8000e40:	1e83      	subs	r3, r0, #2
 8000e42:	1909      	adds	r1, r1, r4
 8000e44:	e6e7      	b.n	8000c16 <__aeabi_ddiv+0x2ea>
 8000e46:	4a2a      	ldr	r2, [pc, #168]	; (8000ef0 <__aeabi_ddiv+0x5c4>)
 8000e48:	0028      	movs	r0, r5
 8000e4a:	445a      	add	r2, fp
 8000e4c:	4643      	mov	r3, r8
 8000e4e:	4095      	lsls	r5, r2
 8000e50:	4093      	lsls	r3, r2
 8000e52:	40c8      	lsrs	r0, r1
 8000e54:	1e6a      	subs	r2, r5, #1
 8000e56:	4195      	sbcs	r5, r2
 8000e58:	4644      	mov	r4, r8
 8000e5a:	4303      	orrs	r3, r0
 8000e5c:	432b      	orrs	r3, r5
 8000e5e:	40cc      	lsrs	r4, r1
 8000e60:	075a      	lsls	r2, r3, #29
 8000e62:	d092      	beq.n	8000d8a <__aeabi_ddiv+0x45e>
 8000e64:	220f      	movs	r2, #15
 8000e66:	401a      	ands	r2, r3
 8000e68:	2a04      	cmp	r2, #4
 8000e6a:	d188      	bne.n	8000d7e <__aeabi_ddiv+0x452>
 8000e6c:	e78d      	b.n	8000d8a <__aeabi_ddiv+0x45e>
 8000e6e:	0035      	movs	r5, r6
 8000e70:	4281      	cmp	r1, r0
 8000e72:	d000      	beq.n	8000e76 <__aeabi_ddiv+0x54a>
 8000e74:	e74b      	b.n	8000d0e <__aeabi_ddiv+0x3e2>
 8000e76:	9a00      	ldr	r2, [sp, #0]
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d000      	beq.n	8000e7e <__aeabi_ddiv+0x552>
 8000e7c:	e747      	b.n	8000d0e <__aeabi_ddiv+0x3e2>
 8000e7e:	e618      	b.n	8000ab2 <__aeabi_ddiv+0x186>
 8000e80:	42ae      	cmp	r6, r5
 8000e82:	d99c      	bls.n	8000dbe <__aeabi_ddiv+0x492>
 8000e84:	2302      	movs	r3, #2
 8000e86:	425b      	negs	r3, r3
 8000e88:	469c      	mov	ip, r3
 8000e8a:	9b00      	ldr	r3, [sp, #0]
 8000e8c:	44e0      	add	r8, ip
 8000e8e:	469c      	mov	ip, r3
 8000e90:	4465      	add	r5, ip
 8000e92:	429d      	cmp	r5, r3
 8000e94:	419b      	sbcs	r3, r3
 8000e96:	425b      	negs	r3, r3
 8000e98:	191b      	adds	r3, r3, r4
 8000e9a:	18c9      	adds	r1, r1, r3
 8000e9c:	e6e4      	b.n	8000c68 <__aeabi_ddiv+0x33c>
 8000e9e:	4a15      	ldr	r2, [pc, #84]	; (8000ef4 <__aeabi_ddiv+0x5c8>)
 8000ea0:	445a      	add	r2, fp
 8000ea2:	2a00      	cmp	r2, #0
 8000ea4:	dc00      	bgt.n	8000ea8 <__aeabi_ddiv+0x57c>
 8000ea6:	e744      	b.n	8000d32 <__aeabi_ddiv+0x406>
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	2500      	movs	r5, #0
 8000eac:	4498      	add	r8, r3
 8000eae:	e609      	b.n	8000ac4 <__aeabi_ddiv+0x198>
 8000eb0:	0765      	lsls	r5, r4, #29
 8000eb2:	0264      	lsls	r4, r4, #9
 8000eb4:	0b24      	lsrs	r4, r4, #12
 8000eb6:	08db      	lsrs	r3, r3, #3
 8000eb8:	431d      	orrs	r5, r3
 8000eba:	2300      	movs	r3, #0
 8000ebc:	e590      	b.n	80009e0 <__aeabi_ddiv+0xb4>
 8000ebe:	9e00      	ldr	r6, [sp, #0]
 8000ec0:	3d02      	subs	r5, #2
 8000ec2:	0072      	lsls	r2, r6, #1
 8000ec4:	42b2      	cmp	r2, r6
 8000ec6:	41bf      	sbcs	r7, r7
 8000ec8:	427f      	negs	r7, r7
 8000eca:	193c      	adds	r4, r7, r4
 8000ecc:	1909      	adds	r1, r1, r4
 8000ece:	9200      	str	r2, [sp, #0]
 8000ed0:	e7ce      	b.n	8000e70 <__aeabi_ddiv+0x544>
 8000ed2:	2480      	movs	r4, #128	; 0x80
 8000ed4:	4643      	mov	r3, r8
 8000ed6:	0324      	lsls	r4, r4, #12
 8000ed8:	431c      	orrs	r4, r3
 8000eda:	0324      	lsls	r4, r4, #12
 8000edc:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <__aeabi_ddiv+0x5cc>)
 8000ede:	0b24      	lsrs	r4, r4, #12
 8000ee0:	e57e      	b.n	80009e0 <__aeabi_ddiv+0xb4>
 8000ee2:	9a00      	ldr	r2, [sp, #0]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d3ea      	bcc.n	8000ebe <__aeabi_ddiv+0x592>
 8000ee8:	0035      	movs	r5, r6
 8000eea:	e7c4      	b.n	8000e76 <__aeabi_ddiv+0x54a>
 8000eec:	0000043e 	.word	0x0000043e
 8000ef0:	0000041e 	.word	0x0000041e
 8000ef4:	000003ff 	.word	0x000003ff
 8000ef8:	000007ff 	.word	0x000007ff

08000efc <__aeabi_dmul>:
 8000efc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000efe:	4657      	mov	r7, sl
 8000f00:	464e      	mov	r6, r9
 8000f02:	4645      	mov	r5, r8
 8000f04:	46de      	mov	lr, fp
 8000f06:	b5e0      	push	{r5, r6, r7, lr}
 8000f08:	4698      	mov	r8, r3
 8000f0a:	030c      	lsls	r4, r1, #12
 8000f0c:	004b      	lsls	r3, r1, #1
 8000f0e:	0006      	movs	r6, r0
 8000f10:	4692      	mov	sl, r2
 8000f12:	b087      	sub	sp, #28
 8000f14:	0b24      	lsrs	r4, r4, #12
 8000f16:	0d5b      	lsrs	r3, r3, #21
 8000f18:	0fcf      	lsrs	r7, r1, #31
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d06c      	beq.n	8000ff8 <__aeabi_dmul+0xfc>
 8000f1e:	4add      	ldr	r2, [pc, #884]	; (8001294 <__aeabi_dmul+0x398>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d100      	bne.n	8000f26 <__aeabi_dmul+0x2a>
 8000f24:	e086      	b.n	8001034 <__aeabi_dmul+0x138>
 8000f26:	0f42      	lsrs	r2, r0, #29
 8000f28:	00e4      	lsls	r4, r4, #3
 8000f2a:	4314      	orrs	r4, r2
 8000f2c:	2280      	movs	r2, #128	; 0x80
 8000f2e:	0412      	lsls	r2, r2, #16
 8000f30:	4314      	orrs	r4, r2
 8000f32:	4ad9      	ldr	r2, [pc, #868]	; (8001298 <__aeabi_dmul+0x39c>)
 8000f34:	00c5      	lsls	r5, r0, #3
 8000f36:	4694      	mov	ip, r2
 8000f38:	4463      	add	r3, ip
 8000f3a:	9300      	str	r3, [sp, #0]
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	4699      	mov	r9, r3
 8000f40:	469b      	mov	fp, r3
 8000f42:	4643      	mov	r3, r8
 8000f44:	4642      	mov	r2, r8
 8000f46:	031e      	lsls	r6, r3, #12
 8000f48:	0fd2      	lsrs	r2, r2, #31
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	4650      	mov	r0, sl
 8000f4e:	4690      	mov	r8, r2
 8000f50:	0b36      	lsrs	r6, r6, #12
 8000f52:	0d5b      	lsrs	r3, r3, #21
 8000f54:	d100      	bne.n	8000f58 <__aeabi_dmul+0x5c>
 8000f56:	e078      	b.n	800104a <__aeabi_dmul+0x14e>
 8000f58:	4ace      	ldr	r2, [pc, #824]	; (8001294 <__aeabi_dmul+0x398>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d01d      	beq.n	8000f9a <__aeabi_dmul+0x9e>
 8000f5e:	49ce      	ldr	r1, [pc, #824]	; (8001298 <__aeabi_dmul+0x39c>)
 8000f60:	0f42      	lsrs	r2, r0, #29
 8000f62:	468c      	mov	ip, r1
 8000f64:	9900      	ldr	r1, [sp, #0]
 8000f66:	4463      	add	r3, ip
 8000f68:	00f6      	lsls	r6, r6, #3
 8000f6a:	468c      	mov	ip, r1
 8000f6c:	4316      	orrs	r6, r2
 8000f6e:	2280      	movs	r2, #128	; 0x80
 8000f70:	449c      	add	ip, r3
 8000f72:	0412      	lsls	r2, r2, #16
 8000f74:	4663      	mov	r3, ip
 8000f76:	4316      	orrs	r6, r2
 8000f78:	00c2      	lsls	r2, r0, #3
 8000f7a:	2000      	movs	r0, #0
 8000f7c:	9300      	str	r3, [sp, #0]
 8000f7e:	9900      	ldr	r1, [sp, #0]
 8000f80:	4643      	mov	r3, r8
 8000f82:	3101      	adds	r1, #1
 8000f84:	468c      	mov	ip, r1
 8000f86:	4649      	mov	r1, r9
 8000f88:	407b      	eors	r3, r7
 8000f8a:	9301      	str	r3, [sp, #4]
 8000f8c:	290f      	cmp	r1, #15
 8000f8e:	d900      	bls.n	8000f92 <__aeabi_dmul+0x96>
 8000f90:	e07e      	b.n	8001090 <__aeabi_dmul+0x194>
 8000f92:	4bc2      	ldr	r3, [pc, #776]	; (800129c <__aeabi_dmul+0x3a0>)
 8000f94:	0089      	lsls	r1, r1, #2
 8000f96:	5859      	ldr	r1, [r3, r1]
 8000f98:	468f      	mov	pc, r1
 8000f9a:	4652      	mov	r2, sl
 8000f9c:	9b00      	ldr	r3, [sp, #0]
 8000f9e:	4332      	orrs	r2, r6
 8000fa0:	d000      	beq.n	8000fa4 <__aeabi_dmul+0xa8>
 8000fa2:	e156      	b.n	8001252 <__aeabi_dmul+0x356>
 8000fa4:	49bb      	ldr	r1, [pc, #748]	; (8001294 <__aeabi_dmul+0x398>)
 8000fa6:	2600      	movs	r6, #0
 8000fa8:	468c      	mov	ip, r1
 8000faa:	4463      	add	r3, ip
 8000fac:	4649      	mov	r1, r9
 8000fae:	9300      	str	r3, [sp, #0]
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	4319      	orrs	r1, r3
 8000fb4:	4689      	mov	r9, r1
 8000fb6:	2002      	movs	r0, #2
 8000fb8:	e7e1      	b.n	8000f7e <__aeabi_dmul+0x82>
 8000fba:	4643      	mov	r3, r8
 8000fbc:	9301      	str	r3, [sp, #4]
 8000fbe:	0034      	movs	r4, r6
 8000fc0:	0015      	movs	r5, r2
 8000fc2:	4683      	mov	fp, r0
 8000fc4:	465b      	mov	r3, fp
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d05e      	beq.n	8001088 <__aeabi_dmul+0x18c>
 8000fca:	2b03      	cmp	r3, #3
 8000fcc:	d100      	bne.n	8000fd0 <__aeabi_dmul+0xd4>
 8000fce:	e1f3      	b.n	80013b8 <__aeabi_dmul+0x4bc>
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d000      	beq.n	8000fd6 <__aeabi_dmul+0xda>
 8000fd4:	e118      	b.n	8001208 <__aeabi_dmul+0x30c>
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2400      	movs	r4, #0
 8000fda:	2500      	movs	r5, #0
 8000fdc:	9b01      	ldr	r3, [sp, #4]
 8000fde:	0512      	lsls	r2, r2, #20
 8000fe0:	4322      	orrs	r2, r4
 8000fe2:	07db      	lsls	r3, r3, #31
 8000fe4:	431a      	orrs	r2, r3
 8000fe6:	0028      	movs	r0, r5
 8000fe8:	0011      	movs	r1, r2
 8000fea:	b007      	add	sp, #28
 8000fec:	bcf0      	pop	{r4, r5, r6, r7}
 8000fee:	46bb      	mov	fp, r7
 8000ff0:	46b2      	mov	sl, r6
 8000ff2:	46a9      	mov	r9, r5
 8000ff4:	46a0      	mov	r8, r4
 8000ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ff8:	0025      	movs	r5, r4
 8000ffa:	4305      	orrs	r5, r0
 8000ffc:	d100      	bne.n	8001000 <__aeabi_dmul+0x104>
 8000ffe:	e141      	b.n	8001284 <__aeabi_dmul+0x388>
 8001000:	2c00      	cmp	r4, #0
 8001002:	d100      	bne.n	8001006 <__aeabi_dmul+0x10a>
 8001004:	e1ad      	b.n	8001362 <__aeabi_dmul+0x466>
 8001006:	0020      	movs	r0, r4
 8001008:	f000 fe40 	bl	8001c8c <__clzsi2>
 800100c:	0001      	movs	r1, r0
 800100e:	0002      	movs	r2, r0
 8001010:	390b      	subs	r1, #11
 8001012:	231d      	movs	r3, #29
 8001014:	0010      	movs	r0, r2
 8001016:	1a5b      	subs	r3, r3, r1
 8001018:	0031      	movs	r1, r6
 800101a:	0035      	movs	r5, r6
 800101c:	3808      	subs	r0, #8
 800101e:	4084      	lsls	r4, r0
 8001020:	40d9      	lsrs	r1, r3
 8001022:	4085      	lsls	r5, r0
 8001024:	430c      	orrs	r4, r1
 8001026:	489e      	ldr	r0, [pc, #632]	; (80012a0 <__aeabi_dmul+0x3a4>)
 8001028:	1a83      	subs	r3, r0, r2
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	2300      	movs	r3, #0
 800102e:	4699      	mov	r9, r3
 8001030:	469b      	mov	fp, r3
 8001032:	e786      	b.n	8000f42 <__aeabi_dmul+0x46>
 8001034:	0005      	movs	r5, r0
 8001036:	4325      	orrs	r5, r4
 8001038:	d000      	beq.n	800103c <__aeabi_dmul+0x140>
 800103a:	e11c      	b.n	8001276 <__aeabi_dmul+0x37a>
 800103c:	2208      	movs	r2, #8
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	2302      	movs	r3, #2
 8001042:	2400      	movs	r4, #0
 8001044:	4691      	mov	r9, r2
 8001046:	469b      	mov	fp, r3
 8001048:	e77b      	b.n	8000f42 <__aeabi_dmul+0x46>
 800104a:	4652      	mov	r2, sl
 800104c:	4332      	orrs	r2, r6
 800104e:	d100      	bne.n	8001052 <__aeabi_dmul+0x156>
 8001050:	e10a      	b.n	8001268 <__aeabi_dmul+0x36c>
 8001052:	2e00      	cmp	r6, #0
 8001054:	d100      	bne.n	8001058 <__aeabi_dmul+0x15c>
 8001056:	e176      	b.n	8001346 <__aeabi_dmul+0x44a>
 8001058:	0030      	movs	r0, r6
 800105a:	f000 fe17 	bl	8001c8c <__clzsi2>
 800105e:	0002      	movs	r2, r0
 8001060:	3a0b      	subs	r2, #11
 8001062:	231d      	movs	r3, #29
 8001064:	0001      	movs	r1, r0
 8001066:	1a9b      	subs	r3, r3, r2
 8001068:	4652      	mov	r2, sl
 800106a:	3908      	subs	r1, #8
 800106c:	40da      	lsrs	r2, r3
 800106e:	408e      	lsls	r6, r1
 8001070:	4316      	orrs	r6, r2
 8001072:	4652      	mov	r2, sl
 8001074:	408a      	lsls	r2, r1
 8001076:	9b00      	ldr	r3, [sp, #0]
 8001078:	4989      	ldr	r1, [pc, #548]	; (80012a0 <__aeabi_dmul+0x3a4>)
 800107a:	1a18      	subs	r0, r3, r0
 800107c:	0003      	movs	r3, r0
 800107e:	468c      	mov	ip, r1
 8001080:	4463      	add	r3, ip
 8001082:	2000      	movs	r0, #0
 8001084:	9300      	str	r3, [sp, #0]
 8001086:	e77a      	b.n	8000f7e <__aeabi_dmul+0x82>
 8001088:	2400      	movs	r4, #0
 800108a:	2500      	movs	r5, #0
 800108c:	4a81      	ldr	r2, [pc, #516]	; (8001294 <__aeabi_dmul+0x398>)
 800108e:	e7a5      	b.n	8000fdc <__aeabi_dmul+0xe0>
 8001090:	0c2f      	lsrs	r7, r5, #16
 8001092:	042d      	lsls	r5, r5, #16
 8001094:	0c2d      	lsrs	r5, r5, #16
 8001096:	002b      	movs	r3, r5
 8001098:	0c11      	lsrs	r1, r2, #16
 800109a:	0412      	lsls	r2, r2, #16
 800109c:	0c12      	lsrs	r2, r2, #16
 800109e:	4353      	muls	r3, r2
 80010a0:	4698      	mov	r8, r3
 80010a2:	0013      	movs	r3, r2
 80010a4:	0028      	movs	r0, r5
 80010a6:	437b      	muls	r3, r7
 80010a8:	4699      	mov	r9, r3
 80010aa:	4348      	muls	r0, r1
 80010ac:	4448      	add	r0, r9
 80010ae:	4683      	mov	fp, r0
 80010b0:	4640      	mov	r0, r8
 80010b2:	000b      	movs	r3, r1
 80010b4:	0c00      	lsrs	r0, r0, #16
 80010b6:	4682      	mov	sl, r0
 80010b8:	4658      	mov	r0, fp
 80010ba:	437b      	muls	r3, r7
 80010bc:	4450      	add	r0, sl
 80010be:	9302      	str	r3, [sp, #8]
 80010c0:	4581      	cmp	r9, r0
 80010c2:	d906      	bls.n	80010d2 <__aeabi_dmul+0x1d6>
 80010c4:	469a      	mov	sl, r3
 80010c6:	2380      	movs	r3, #128	; 0x80
 80010c8:	025b      	lsls	r3, r3, #9
 80010ca:	4699      	mov	r9, r3
 80010cc:	44ca      	add	sl, r9
 80010ce:	4653      	mov	r3, sl
 80010d0:	9302      	str	r3, [sp, #8]
 80010d2:	0c03      	lsrs	r3, r0, #16
 80010d4:	469b      	mov	fp, r3
 80010d6:	4643      	mov	r3, r8
 80010d8:	041b      	lsls	r3, r3, #16
 80010da:	0400      	lsls	r0, r0, #16
 80010dc:	0c1b      	lsrs	r3, r3, #16
 80010de:	4698      	mov	r8, r3
 80010e0:	0003      	movs	r3, r0
 80010e2:	4443      	add	r3, r8
 80010e4:	9304      	str	r3, [sp, #16]
 80010e6:	0c33      	lsrs	r3, r6, #16
 80010e8:	4699      	mov	r9, r3
 80010ea:	002b      	movs	r3, r5
 80010ec:	0436      	lsls	r6, r6, #16
 80010ee:	0c36      	lsrs	r6, r6, #16
 80010f0:	4373      	muls	r3, r6
 80010f2:	4698      	mov	r8, r3
 80010f4:	0033      	movs	r3, r6
 80010f6:	437b      	muls	r3, r7
 80010f8:	469a      	mov	sl, r3
 80010fa:	464b      	mov	r3, r9
 80010fc:	435d      	muls	r5, r3
 80010fe:	435f      	muls	r7, r3
 8001100:	4643      	mov	r3, r8
 8001102:	4455      	add	r5, sl
 8001104:	0c18      	lsrs	r0, r3, #16
 8001106:	1940      	adds	r0, r0, r5
 8001108:	4582      	cmp	sl, r0
 800110a:	d903      	bls.n	8001114 <__aeabi_dmul+0x218>
 800110c:	2380      	movs	r3, #128	; 0x80
 800110e:	025b      	lsls	r3, r3, #9
 8001110:	469a      	mov	sl, r3
 8001112:	4457      	add	r7, sl
 8001114:	0c05      	lsrs	r5, r0, #16
 8001116:	19eb      	adds	r3, r5, r7
 8001118:	9305      	str	r3, [sp, #20]
 800111a:	4643      	mov	r3, r8
 800111c:	041d      	lsls	r5, r3, #16
 800111e:	0c2d      	lsrs	r5, r5, #16
 8001120:	0400      	lsls	r0, r0, #16
 8001122:	1940      	adds	r0, r0, r5
 8001124:	0c25      	lsrs	r5, r4, #16
 8001126:	0424      	lsls	r4, r4, #16
 8001128:	0c24      	lsrs	r4, r4, #16
 800112a:	0027      	movs	r7, r4
 800112c:	4357      	muls	r7, r2
 800112e:	436a      	muls	r2, r5
 8001130:	4690      	mov	r8, r2
 8001132:	002a      	movs	r2, r5
 8001134:	0c3b      	lsrs	r3, r7, #16
 8001136:	469a      	mov	sl, r3
 8001138:	434a      	muls	r2, r1
 800113a:	4361      	muls	r1, r4
 800113c:	4441      	add	r1, r8
 800113e:	4451      	add	r1, sl
 8001140:	4483      	add	fp, r0
 8001142:	4588      	cmp	r8, r1
 8001144:	d903      	bls.n	800114e <__aeabi_dmul+0x252>
 8001146:	2380      	movs	r3, #128	; 0x80
 8001148:	025b      	lsls	r3, r3, #9
 800114a:	4698      	mov	r8, r3
 800114c:	4442      	add	r2, r8
 800114e:	043f      	lsls	r7, r7, #16
 8001150:	0c0b      	lsrs	r3, r1, #16
 8001152:	0c3f      	lsrs	r7, r7, #16
 8001154:	0409      	lsls	r1, r1, #16
 8001156:	19c9      	adds	r1, r1, r7
 8001158:	0027      	movs	r7, r4
 800115a:	4698      	mov	r8, r3
 800115c:	464b      	mov	r3, r9
 800115e:	4377      	muls	r7, r6
 8001160:	435c      	muls	r4, r3
 8001162:	436e      	muls	r6, r5
 8001164:	435d      	muls	r5, r3
 8001166:	0c3b      	lsrs	r3, r7, #16
 8001168:	4699      	mov	r9, r3
 800116a:	19a4      	adds	r4, r4, r6
 800116c:	444c      	add	r4, r9
 800116e:	4442      	add	r2, r8
 8001170:	9503      	str	r5, [sp, #12]
 8001172:	42a6      	cmp	r6, r4
 8001174:	d904      	bls.n	8001180 <__aeabi_dmul+0x284>
 8001176:	2380      	movs	r3, #128	; 0x80
 8001178:	025b      	lsls	r3, r3, #9
 800117a:	4698      	mov	r8, r3
 800117c:	4445      	add	r5, r8
 800117e:	9503      	str	r5, [sp, #12]
 8001180:	9b02      	ldr	r3, [sp, #8]
 8001182:	043f      	lsls	r7, r7, #16
 8001184:	445b      	add	r3, fp
 8001186:	001e      	movs	r6, r3
 8001188:	4283      	cmp	r3, r0
 800118a:	4180      	sbcs	r0, r0
 800118c:	0423      	lsls	r3, r4, #16
 800118e:	4698      	mov	r8, r3
 8001190:	9b05      	ldr	r3, [sp, #20]
 8001192:	0c3f      	lsrs	r7, r7, #16
 8001194:	4447      	add	r7, r8
 8001196:	4698      	mov	r8, r3
 8001198:	1876      	adds	r6, r6, r1
 800119a:	428e      	cmp	r6, r1
 800119c:	4189      	sbcs	r1, r1
 800119e:	4447      	add	r7, r8
 80011a0:	4240      	negs	r0, r0
 80011a2:	183d      	adds	r5, r7, r0
 80011a4:	46a8      	mov	r8, r5
 80011a6:	4693      	mov	fp, r2
 80011a8:	4249      	negs	r1, r1
 80011aa:	468a      	mov	sl, r1
 80011ac:	44c3      	add	fp, r8
 80011ae:	429f      	cmp	r7, r3
 80011b0:	41bf      	sbcs	r7, r7
 80011b2:	4580      	cmp	r8, r0
 80011b4:	4180      	sbcs	r0, r0
 80011b6:	9b03      	ldr	r3, [sp, #12]
 80011b8:	44da      	add	sl, fp
 80011ba:	4698      	mov	r8, r3
 80011bc:	4653      	mov	r3, sl
 80011be:	4240      	negs	r0, r0
 80011c0:	427f      	negs	r7, r7
 80011c2:	4307      	orrs	r7, r0
 80011c4:	0c24      	lsrs	r4, r4, #16
 80011c6:	4593      	cmp	fp, r2
 80011c8:	4192      	sbcs	r2, r2
 80011ca:	458a      	cmp	sl, r1
 80011cc:	4189      	sbcs	r1, r1
 80011ce:	193f      	adds	r7, r7, r4
 80011d0:	0ddc      	lsrs	r4, r3, #23
 80011d2:	9b04      	ldr	r3, [sp, #16]
 80011d4:	0275      	lsls	r5, r6, #9
 80011d6:	431d      	orrs	r5, r3
 80011d8:	1e68      	subs	r0, r5, #1
 80011da:	4185      	sbcs	r5, r0
 80011dc:	4653      	mov	r3, sl
 80011de:	4252      	negs	r2, r2
 80011e0:	4249      	negs	r1, r1
 80011e2:	430a      	orrs	r2, r1
 80011e4:	18bf      	adds	r7, r7, r2
 80011e6:	4447      	add	r7, r8
 80011e8:	0df6      	lsrs	r6, r6, #23
 80011ea:	027f      	lsls	r7, r7, #9
 80011ec:	4335      	orrs	r5, r6
 80011ee:	025a      	lsls	r2, r3, #9
 80011f0:	433c      	orrs	r4, r7
 80011f2:	4315      	orrs	r5, r2
 80011f4:	01fb      	lsls	r3, r7, #7
 80011f6:	d400      	bmi.n	80011fa <__aeabi_dmul+0x2fe>
 80011f8:	e0c1      	b.n	800137e <__aeabi_dmul+0x482>
 80011fa:	2101      	movs	r1, #1
 80011fc:	086a      	lsrs	r2, r5, #1
 80011fe:	400d      	ands	r5, r1
 8001200:	4315      	orrs	r5, r2
 8001202:	07e2      	lsls	r2, r4, #31
 8001204:	4315      	orrs	r5, r2
 8001206:	0864      	lsrs	r4, r4, #1
 8001208:	4926      	ldr	r1, [pc, #152]	; (80012a4 <__aeabi_dmul+0x3a8>)
 800120a:	4461      	add	r1, ip
 800120c:	2900      	cmp	r1, #0
 800120e:	dd56      	ble.n	80012be <__aeabi_dmul+0x3c2>
 8001210:	076b      	lsls	r3, r5, #29
 8001212:	d009      	beq.n	8001228 <__aeabi_dmul+0x32c>
 8001214:	220f      	movs	r2, #15
 8001216:	402a      	ands	r2, r5
 8001218:	2a04      	cmp	r2, #4
 800121a:	d005      	beq.n	8001228 <__aeabi_dmul+0x32c>
 800121c:	1d2a      	adds	r2, r5, #4
 800121e:	42aa      	cmp	r2, r5
 8001220:	41ad      	sbcs	r5, r5
 8001222:	426d      	negs	r5, r5
 8001224:	1964      	adds	r4, r4, r5
 8001226:	0015      	movs	r5, r2
 8001228:	01e3      	lsls	r3, r4, #7
 800122a:	d504      	bpl.n	8001236 <__aeabi_dmul+0x33a>
 800122c:	2180      	movs	r1, #128	; 0x80
 800122e:	4a1e      	ldr	r2, [pc, #120]	; (80012a8 <__aeabi_dmul+0x3ac>)
 8001230:	00c9      	lsls	r1, r1, #3
 8001232:	4014      	ands	r4, r2
 8001234:	4461      	add	r1, ip
 8001236:	4a1d      	ldr	r2, [pc, #116]	; (80012ac <__aeabi_dmul+0x3b0>)
 8001238:	4291      	cmp	r1, r2
 800123a:	dd00      	ble.n	800123e <__aeabi_dmul+0x342>
 800123c:	e724      	b.n	8001088 <__aeabi_dmul+0x18c>
 800123e:	0762      	lsls	r2, r4, #29
 8001240:	08ed      	lsrs	r5, r5, #3
 8001242:	0264      	lsls	r4, r4, #9
 8001244:	0549      	lsls	r1, r1, #21
 8001246:	4315      	orrs	r5, r2
 8001248:	0b24      	lsrs	r4, r4, #12
 800124a:	0d4a      	lsrs	r2, r1, #21
 800124c:	e6c6      	b.n	8000fdc <__aeabi_dmul+0xe0>
 800124e:	9701      	str	r7, [sp, #4]
 8001250:	e6b8      	b.n	8000fc4 <__aeabi_dmul+0xc8>
 8001252:	4a10      	ldr	r2, [pc, #64]	; (8001294 <__aeabi_dmul+0x398>)
 8001254:	2003      	movs	r0, #3
 8001256:	4694      	mov	ip, r2
 8001258:	4463      	add	r3, ip
 800125a:	464a      	mov	r2, r9
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	2303      	movs	r3, #3
 8001260:	431a      	orrs	r2, r3
 8001262:	4691      	mov	r9, r2
 8001264:	4652      	mov	r2, sl
 8001266:	e68a      	b.n	8000f7e <__aeabi_dmul+0x82>
 8001268:	4649      	mov	r1, r9
 800126a:	2301      	movs	r3, #1
 800126c:	4319      	orrs	r1, r3
 800126e:	4689      	mov	r9, r1
 8001270:	2600      	movs	r6, #0
 8001272:	2001      	movs	r0, #1
 8001274:	e683      	b.n	8000f7e <__aeabi_dmul+0x82>
 8001276:	220c      	movs	r2, #12
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	2303      	movs	r3, #3
 800127c:	0005      	movs	r5, r0
 800127e:	4691      	mov	r9, r2
 8001280:	469b      	mov	fp, r3
 8001282:	e65e      	b.n	8000f42 <__aeabi_dmul+0x46>
 8001284:	2304      	movs	r3, #4
 8001286:	4699      	mov	r9, r3
 8001288:	2300      	movs	r3, #0
 800128a:	9300      	str	r3, [sp, #0]
 800128c:	3301      	adds	r3, #1
 800128e:	2400      	movs	r4, #0
 8001290:	469b      	mov	fp, r3
 8001292:	e656      	b.n	8000f42 <__aeabi_dmul+0x46>
 8001294:	000007ff 	.word	0x000007ff
 8001298:	fffffc01 	.word	0xfffffc01
 800129c:	08007098 	.word	0x08007098
 80012a0:	fffffc0d 	.word	0xfffffc0d
 80012a4:	000003ff 	.word	0x000003ff
 80012a8:	feffffff 	.word	0xfeffffff
 80012ac:	000007fe 	.word	0x000007fe
 80012b0:	2300      	movs	r3, #0
 80012b2:	2480      	movs	r4, #128	; 0x80
 80012b4:	2500      	movs	r5, #0
 80012b6:	4a44      	ldr	r2, [pc, #272]	; (80013c8 <__aeabi_dmul+0x4cc>)
 80012b8:	9301      	str	r3, [sp, #4]
 80012ba:	0324      	lsls	r4, r4, #12
 80012bc:	e68e      	b.n	8000fdc <__aeabi_dmul+0xe0>
 80012be:	2001      	movs	r0, #1
 80012c0:	1a40      	subs	r0, r0, r1
 80012c2:	2838      	cmp	r0, #56	; 0x38
 80012c4:	dd00      	ble.n	80012c8 <__aeabi_dmul+0x3cc>
 80012c6:	e686      	b.n	8000fd6 <__aeabi_dmul+0xda>
 80012c8:	281f      	cmp	r0, #31
 80012ca:	dd5b      	ble.n	8001384 <__aeabi_dmul+0x488>
 80012cc:	221f      	movs	r2, #31
 80012ce:	0023      	movs	r3, r4
 80012d0:	4252      	negs	r2, r2
 80012d2:	1a51      	subs	r1, r2, r1
 80012d4:	40cb      	lsrs	r3, r1
 80012d6:	0019      	movs	r1, r3
 80012d8:	2820      	cmp	r0, #32
 80012da:	d003      	beq.n	80012e4 <__aeabi_dmul+0x3e8>
 80012dc:	4a3b      	ldr	r2, [pc, #236]	; (80013cc <__aeabi_dmul+0x4d0>)
 80012de:	4462      	add	r2, ip
 80012e0:	4094      	lsls	r4, r2
 80012e2:	4325      	orrs	r5, r4
 80012e4:	1e6a      	subs	r2, r5, #1
 80012e6:	4195      	sbcs	r5, r2
 80012e8:	002a      	movs	r2, r5
 80012ea:	430a      	orrs	r2, r1
 80012ec:	2107      	movs	r1, #7
 80012ee:	000d      	movs	r5, r1
 80012f0:	2400      	movs	r4, #0
 80012f2:	4015      	ands	r5, r2
 80012f4:	4211      	tst	r1, r2
 80012f6:	d05b      	beq.n	80013b0 <__aeabi_dmul+0x4b4>
 80012f8:	210f      	movs	r1, #15
 80012fa:	2400      	movs	r4, #0
 80012fc:	4011      	ands	r1, r2
 80012fe:	2904      	cmp	r1, #4
 8001300:	d053      	beq.n	80013aa <__aeabi_dmul+0x4ae>
 8001302:	1d11      	adds	r1, r2, #4
 8001304:	4291      	cmp	r1, r2
 8001306:	4192      	sbcs	r2, r2
 8001308:	4252      	negs	r2, r2
 800130a:	18a4      	adds	r4, r4, r2
 800130c:	000a      	movs	r2, r1
 800130e:	0223      	lsls	r3, r4, #8
 8001310:	d54b      	bpl.n	80013aa <__aeabi_dmul+0x4ae>
 8001312:	2201      	movs	r2, #1
 8001314:	2400      	movs	r4, #0
 8001316:	2500      	movs	r5, #0
 8001318:	e660      	b.n	8000fdc <__aeabi_dmul+0xe0>
 800131a:	2380      	movs	r3, #128	; 0x80
 800131c:	031b      	lsls	r3, r3, #12
 800131e:	421c      	tst	r4, r3
 8001320:	d009      	beq.n	8001336 <__aeabi_dmul+0x43a>
 8001322:	421e      	tst	r6, r3
 8001324:	d107      	bne.n	8001336 <__aeabi_dmul+0x43a>
 8001326:	4333      	orrs	r3, r6
 8001328:	031c      	lsls	r4, r3, #12
 800132a:	4643      	mov	r3, r8
 800132c:	0015      	movs	r5, r2
 800132e:	0b24      	lsrs	r4, r4, #12
 8001330:	4a25      	ldr	r2, [pc, #148]	; (80013c8 <__aeabi_dmul+0x4cc>)
 8001332:	9301      	str	r3, [sp, #4]
 8001334:	e652      	b.n	8000fdc <__aeabi_dmul+0xe0>
 8001336:	2280      	movs	r2, #128	; 0x80
 8001338:	0312      	lsls	r2, r2, #12
 800133a:	4314      	orrs	r4, r2
 800133c:	0324      	lsls	r4, r4, #12
 800133e:	4a22      	ldr	r2, [pc, #136]	; (80013c8 <__aeabi_dmul+0x4cc>)
 8001340:	0b24      	lsrs	r4, r4, #12
 8001342:	9701      	str	r7, [sp, #4]
 8001344:	e64a      	b.n	8000fdc <__aeabi_dmul+0xe0>
 8001346:	f000 fca1 	bl	8001c8c <__clzsi2>
 800134a:	0003      	movs	r3, r0
 800134c:	001a      	movs	r2, r3
 800134e:	3215      	adds	r2, #21
 8001350:	3020      	adds	r0, #32
 8001352:	2a1c      	cmp	r2, #28
 8001354:	dc00      	bgt.n	8001358 <__aeabi_dmul+0x45c>
 8001356:	e684      	b.n	8001062 <__aeabi_dmul+0x166>
 8001358:	4656      	mov	r6, sl
 800135a:	3b08      	subs	r3, #8
 800135c:	2200      	movs	r2, #0
 800135e:	409e      	lsls	r6, r3
 8001360:	e689      	b.n	8001076 <__aeabi_dmul+0x17a>
 8001362:	f000 fc93 	bl	8001c8c <__clzsi2>
 8001366:	0001      	movs	r1, r0
 8001368:	0002      	movs	r2, r0
 800136a:	3115      	adds	r1, #21
 800136c:	3220      	adds	r2, #32
 800136e:	291c      	cmp	r1, #28
 8001370:	dc00      	bgt.n	8001374 <__aeabi_dmul+0x478>
 8001372:	e64e      	b.n	8001012 <__aeabi_dmul+0x116>
 8001374:	0034      	movs	r4, r6
 8001376:	3808      	subs	r0, #8
 8001378:	2500      	movs	r5, #0
 800137a:	4084      	lsls	r4, r0
 800137c:	e653      	b.n	8001026 <__aeabi_dmul+0x12a>
 800137e:	9b00      	ldr	r3, [sp, #0]
 8001380:	469c      	mov	ip, r3
 8001382:	e741      	b.n	8001208 <__aeabi_dmul+0x30c>
 8001384:	4912      	ldr	r1, [pc, #72]	; (80013d0 <__aeabi_dmul+0x4d4>)
 8001386:	0022      	movs	r2, r4
 8001388:	4461      	add	r1, ip
 800138a:	002e      	movs	r6, r5
 800138c:	408d      	lsls	r5, r1
 800138e:	408a      	lsls	r2, r1
 8001390:	40c6      	lsrs	r6, r0
 8001392:	1e69      	subs	r1, r5, #1
 8001394:	418d      	sbcs	r5, r1
 8001396:	4332      	orrs	r2, r6
 8001398:	432a      	orrs	r2, r5
 800139a:	40c4      	lsrs	r4, r0
 800139c:	0753      	lsls	r3, r2, #29
 800139e:	d0b6      	beq.n	800130e <__aeabi_dmul+0x412>
 80013a0:	210f      	movs	r1, #15
 80013a2:	4011      	ands	r1, r2
 80013a4:	2904      	cmp	r1, #4
 80013a6:	d1ac      	bne.n	8001302 <__aeabi_dmul+0x406>
 80013a8:	e7b1      	b.n	800130e <__aeabi_dmul+0x412>
 80013aa:	0765      	lsls	r5, r4, #29
 80013ac:	0264      	lsls	r4, r4, #9
 80013ae:	0b24      	lsrs	r4, r4, #12
 80013b0:	08d2      	lsrs	r2, r2, #3
 80013b2:	4315      	orrs	r5, r2
 80013b4:	2200      	movs	r2, #0
 80013b6:	e611      	b.n	8000fdc <__aeabi_dmul+0xe0>
 80013b8:	2280      	movs	r2, #128	; 0x80
 80013ba:	0312      	lsls	r2, r2, #12
 80013bc:	4314      	orrs	r4, r2
 80013be:	0324      	lsls	r4, r4, #12
 80013c0:	4a01      	ldr	r2, [pc, #4]	; (80013c8 <__aeabi_dmul+0x4cc>)
 80013c2:	0b24      	lsrs	r4, r4, #12
 80013c4:	e60a      	b.n	8000fdc <__aeabi_dmul+0xe0>
 80013c6:	46c0      	nop			; (mov r8, r8)
 80013c8:	000007ff 	.word	0x000007ff
 80013cc:	0000043e 	.word	0x0000043e
 80013d0:	0000041e 	.word	0x0000041e

080013d4 <__aeabi_dsub>:
 80013d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013d6:	4657      	mov	r7, sl
 80013d8:	464e      	mov	r6, r9
 80013da:	4645      	mov	r5, r8
 80013dc:	46de      	mov	lr, fp
 80013de:	0004      	movs	r4, r0
 80013e0:	b5e0      	push	{r5, r6, r7, lr}
 80013e2:	001f      	movs	r7, r3
 80013e4:	0010      	movs	r0, r2
 80013e6:	030b      	lsls	r3, r1, #12
 80013e8:	0f62      	lsrs	r2, r4, #29
 80013ea:	004e      	lsls	r6, r1, #1
 80013ec:	0fcd      	lsrs	r5, r1, #31
 80013ee:	0a5b      	lsrs	r3, r3, #9
 80013f0:	0339      	lsls	r1, r7, #12
 80013f2:	4313      	orrs	r3, r2
 80013f4:	0a49      	lsrs	r1, r1, #9
 80013f6:	00e2      	lsls	r2, r4, #3
 80013f8:	0f44      	lsrs	r4, r0, #29
 80013fa:	4321      	orrs	r1, r4
 80013fc:	4cc2      	ldr	r4, [pc, #776]	; (8001708 <__aeabi_dsub+0x334>)
 80013fe:	4691      	mov	r9, r2
 8001400:	4692      	mov	sl, r2
 8001402:	00c0      	lsls	r0, r0, #3
 8001404:	007a      	lsls	r2, r7, #1
 8001406:	4680      	mov	r8, r0
 8001408:	0d76      	lsrs	r6, r6, #21
 800140a:	0d52      	lsrs	r2, r2, #21
 800140c:	0fff      	lsrs	r7, r7, #31
 800140e:	42a2      	cmp	r2, r4
 8001410:	d100      	bne.n	8001414 <__aeabi_dsub+0x40>
 8001412:	e0b4      	b.n	800157e <__aeabi_dsub+0x1aa>
 8001414:	2401      	movs	r4, #1
 8001416:	4067      	eors	r7, r4
 8001418:	46bb      	mov	fp, r7
 800141a:	42bd      	cmp	r5, r7
 800141c:	d100      	bne.n	8001420 <__aeabi_dsub+0x4c>
 800141e:	e088      	b.n	8001532 <__aeabi_dsub+0x15e>
 8001420:	1ab4      	subs	r4, r6, r2
 8001422:	46a4      	mov	ip, r4
 8001424:	2c00      	cmp	r4, #0
 8001426:	dc00      	bgt.n	800142a <__aeabi_dsub+0x56>
 8001428:	e0b2      	b.n	8001590 <__aeabi_dsub+0x1bc>
 800142a:	2a00      	cmp	r2, #0
 800142c:	d100      	bne.n	8001430 <__aeabi_dsub+0x5c>
 800142e:	e0c5      	b.n	80015bc <__aeabi_dsub+0x1e8>
 8001430:	4ab5      	ldr	r2, [pc, #724]	; (8001708 <__aeabi_dsub+0x334>)
 8001432:	4296      	cmp	r6, r2
 8001434:	d100      	bne.n	8001438 <__aeabi_dsub+0x64>
 8001436:	e28b      	b.n	8001950 <__aeabi_dsub+0x57c>
 8001438:	2280      	movs	r2, #128	; 0x80
 800143a:	0412      	lsls	r2, r2, #16
 800143c:	4311      	orrs	r1, r2
 800143e:	4662      	mov	r2, ip
 8001440:	2a38      	cmp	r2, #56	; 0x38
 8001442:	dd00      	ble.n	8001446 <__aeabi_dsub+0x72>
 8001444:	e1a1      	b.n	800178a <__aeabi_dsub+0x3b6>
 8001446:	2a1f      	cmp	r2, #31
 8001448:	dd00      	ble.n	800144c <__aeabi_dsub+0x78>
 800144a:	e216      	b.n	800187a <__aeabi_dsub+0x4a6>
 800144c:	2720      	movs	r7, #32
 800144e:	000c      	movs	r4, r1
 8001450:	1abf      	subs	r7, r7, r2
 8001452:	40bc      	lsls	r4, r7
 8001454:	0002      	movs	r2, r0
 8001456:	46a0      	mov	r8, r4
 8001458:	4664      	mov	r4, ip
 800145a:	40b8      	lsls	r0, r7
 800145c:	40e2      	lsrs	r2, r4
 800145e:	4644      	mov	r4, r8
 8001460:	4314      	orrs	r4, r2
 8001462:	0002      	movs	r2, r0
 8001464:	1e50      	subs	r0, r2, #1
 8001466:	4182      	sbcs	r2, r0
 8001468:	4660      	mov	r0, ip
 800146a:	40c1      	lsrs	r1, r0
 800146c:	4322      	orrs	r2, r4
 800146e:	1a5b      	subs	r3, r3, r1
 8001470:	4649      	mov	r1, r9
 8001472:	1a8c      	subs	r4, r1, r2
 8001474:	45a1      	cmp	r9, r4
 8001476:	4192      	sbcs	r2, r2
 8001478:	4252      	negs	r2, r2
 800147a:	1a9b      	subs	r3, r3, r2
 800147c:	4698      	mov	r8, r3
 800147e:	4643      	mov	r3, r8
 8001480:	021b      	lsls	r3, r3, #8
 8001482:	d400      	bmi.n	8001486 <__aeabi_dsub+0xb2>
 8001484:	e117      	b.n	80016b6 <__aeabi_dsub+0x2e2>
 8001486:	4643      	mov	r3, r8
 8001488:	025b      	lsls	r3, r3, #9
 800148a:	0a5b      	lsrs	r3, r3, #9
 800148c:	4698      	mov	r8, r3
 800148e:	4643      	mov	r3, r8
 8001490:	2b00      	cmp	r3, #0
 8001492:	d100      	bne.n	8001496 <__aeabi_dsub+0xc2>
 8001494:	e16c      	b.n	8001770 <__aeabi_dsub+0x39c>
 8001496:	4640      	mov	r0, r8
 8001498:	f000 fbf8 	bl	8001c8c <__clzsi2>
 800149c:	0002      	movs	r2, r0
 800149e:	3a08      	subs	r2, #8
 80014a0:	2120      	movs	r1, #32
 80014a2:	0020      	movs	r0, r4
 80014a4:	4643      	mov	r3, r8
 80014a6:	1a89      	subs	r1, r1, r2
 80014a8:	4093      	lsls	r3, r2
 80014aa:	40c8      	lsrs	r0, r1
 80014ac:	4094      	lsls	r4, r2
 80014ae:	4303      	orrs	r3, r0
 80014b0:	4296      	cmp	r6, r2
 80014b2:	dd00      	ble.n	80014b6 <__aeabi_dsub+0xe2>
 80014b4:	e157      	b.n	8001766 <__aeabi_dsub+0x392>
 80014b6:	1b96      	subs	r6, r2, r6
 80014b8:	1c71      	adds	r1, r6, #1
 80014ba:	291f      	cmp	r1, #31
 80014bc:	dd00      	ble.n	80014c0 <__aeabi_dsub+0xec>
 80014be:	e1cb      	b.n	8001858 <__aeabi_dsub+0x484>
 80014c0:	2220      	movs	r2, #32
 80014c2:	0018      	movs	r0, r3
 80014c4:	0026      	movs	r6, r4
 80014c6:	1a52      	subs	r2, r2, r1
 80014c8:	4094      	lsls	r4, r2
 80014ca:	4090      	lsls	r0, r2
 80014cc:	40ce      	lsrs	r6, r1
 80014ce:	40cb      	lsrs	r3, r1
 80014d0:	1e62      	subs	r2, r4, #1
 80014d2:	4194      	sbcs	r4, r2
 80014d4:	4330      	orrs	r0, r6
 80014d6:	4698      	mov	r8, r3
 80014d8:	2600      	movs	r6, #0
 80014da:	4304      	orrs	r4, r0
 80014dc:	0763      	lsls	r3, r4, #29
 80014de:	d009      	beq.n	80014f4 <__aeabi_dsub+0x120>
 80014e0:	230f      	movs	r3, #15
 80014e2:	4023      	ands	r3, r4
 80014e4:	2b04      	cmp	r3, #4
 80014e6:	d005      	beq.n	80014f4 <__aeabi_dsub+0x120>
 80014e8:	1d23      	adds	r3, r4, #4
 80014ea:	42a3      	cmp	r3, r4
 80014ec:	41a4      	sbcs	r4, r4
 80014ee:	4264      	negs	r4, r4
 80014f0:	44a0      	add	r8, r4
 80014f2:	001c      	movs	r4, r3
 80014f4:	4643      	mov	r3, r8
 80014f6:	021b      	lsls	r3, r3, #8
 80014f8:	d400      	bmi.n	80014fc <__aeabi_dsub+0x128>
 80014fa:	e0df      	b.n	80016bc <__aeabi_dsub+0x2e8>
 80014fc:	4b82      	ldr	r3, [pc, #520]	; (8001708 <__aeabi_dsub+0x334>)
 80014fe:	3601      	adds	r6, #1
 8001500:	429e      	cmp	r6, r3
 8001502:	d100      	bne.n	8001506 <__aeabi_dsub+0x132>
 8001504:	e0fb      	b.n	80016fe <__aeabi_dsub+0x32a>
 8001506:	4642      	mov	r2, r8
 8001508:	4b80      	ldr	r3, [pc, #512]	; (800170c <__aeabi_dsub+0x338>)
 800150a:	08e4      	lsrs	r4, r4, #3
 800150c:	401a      	ands	r2, r3
 800150e:	0013      	movs	r3, r2
 8001510:	0571      	lsls	r1, r6, #21
 8001512:	0752      	lsls	r2, r2, #29
 8001514:	025b      	lsls	r3, r3, #9
 8001516:	4322      	orrs	r2, r4
 8001518:	0b1b      	lsrs	r3, r3, #12
 800151a:	0d49      	lsrs	r1, r1, #21
 800151c:	0509      	lsls	r1, r1, #20
 800151e:	07ed      	lsls	r5, r5, #31
 8001520:	4319      	orrs	r1, r3
 8001522:	4329      	orrs	r1, r5
 8001524:	0010      	movs	r0, r2
 8001526:	bcf0      	pop	{r4, r5, r6, r7}
 8001528:	46bb      	mov	fp, r7
 800152a:	46b2      	mov	sl, r6
 800152c:	46a9      	mov	r9, r5
 800152e:	46a0      	mov	r8, r4
 8001530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001532:	1ab4      	subs	r4, r6, r2
 8001534:	46a4      	mov	ip, r4
 8001536:	2c00      	cmp	r4, #0
 8001538:	dd58      	ble.n	80015ec <__aeabi_dsub+0x218>
 800153a:	2a00      	cmp	r2, #0
 800153c:	d100      	bne.n	8001540 <__aeabi_dsub+0x16c>
 800153e:	e09e      	b.n	800167e <__aeabi_dsub+0x2aa>
 8001540:	4a71      	ldr	r2, [pc, #452]	; (8001708 <__aeabi_dsub+0x334>)
 8001542:	4296      	cmp	r6, r2
 8001544:	d100      	bne.n	8001548 <__aeabi_dsub+0x174>
 8001546:	e13b      	b.n	80017c0 <__aeabi_dsub+0x3ec>
 8001548:	2280      	movs	r2, #128	; 0x80
 800154a:	0412      	lsls	r2, r2, #16
 800154c:	4311      	orrs	r1, r2
 800154e:	4662      	mov	r2, ip
 8001550:	2a38      	cmp	r2, #56	; 0x38
 8001552:	dd00      	ble.n	8001556 <__aeabi_dsub+0x182>
 8001554:	e0c1      	b.n	80016da <__aeabi_dsub+0x306>
 8001556:	2a1f      	cmp	r2, #31
 8001558:	dc00      	bgt.n	800155c <__aeabi_dsub+0x188>
 800155a:	e1bb      	b.n	80018d4 <__aeabi_dsub+0x500>
 800155c:	000c      	movs	r4, r1
 800155e:	3a20      	subs	r2, #32
 8001560:	40d4      	lsrs	r4, r2
 8001562:	0022      	movs	r2, r4
 8001564:	4664      	mov	r4, ip
 8001566:	2c20      	cmp	r4, #32
 8001568:	d004      	beq.n	8001574 <__aeabi_dsub+0x1a0>
 800156a:	2740      	movs	r7, #64	; 0x40
 800156c:	1b3f      	subs	r7, r7, r4
 800156e:	40b9      	lsls	r1, r7
 8001570:	4308      	orrs	r0, r1
 8001572:	4680      	mov	r8, r0
 8001574:	4644      	mov	r4, r8
 8001576:	1e61      	subs	r1, r4, #1
 8001578:	418c      	sbcs	r4, r1
 800157a:	4314      	orrs	r4, r2
 800157c:	e0b1      	b.n	80016e2 <__aeabi_dsub+0x30e>
 800157e:	000c      	movs	r4, r1
 8001580:	4304      	orrs	r4, r0
 8001582:	d02a      	beq.n	80015da <__aeabi_dsub+0x206>
 8001584:	46bb      	mov	fp, r7
 8001586:	42bd      	cmp	r5, r7
 8001588:	d02d      	beq.n	80015e6 <__aeabi_dsub+0x212>
 800158a:	4c61      	ldr	r4, [pc, #388]	; (8001710 <__aeabi_dsub+0x33c>)
 800158c:	46a4      	mov	ip, r4
 800158e:	44b4      	add	ip, r6
 8001590:	4664      	mov	r4, ip
 8001592:	2c00      	cmp	r4, #0
 8001594:	d05c      	beq.n	8001650 <__aeabi_dsub+0x27c>
 8001596:	1b94      	subs	r4, r2, r6
 8001598:	46a4      	mov	ip, r4
 800159a:	2e00      	cmp	r6, #0
 800159c:	d000      	beq.n	80015a0 <__aeabi_dsub+0x1cc>
 800159e:	e115      	b.n	80017cc <__aeabi_dsub+0x3f8>
 80015a0:	464d      	mov	r5, r9
 80015a2:	431d      	orrs	r5, r3
 80015a4:	d100      	bne.n	80015a8 <__aeabi_dsub+0x1d4>
 80015a6:	e1c3      	b.n	8001930 <__aeabi_dsub+0x55c>
 80015a8:	1e65      	subs	r5, r4, #1
 80015aa:	2c01      	cmp	r4, #1
 80015ac:	d100      	bne.n	80015b0 <__aeabi_dsub+0x1dc>
 80015ae:	e20c      	b.n	80019ca <__aeabi_dsub+0x5f6>
 80015b0:	4e55      	ldr	r6, [pc, #340]	; (8001708 <__aeabi_dsub+0x334>)
 80015b2:	42b4      	cmp	r4, r6
 80015b4:	d100      	bne.n	80015b8 <__aeabi_dsub+0x1e4>
 80015b6:	e1f8      	b.n	80019aa <__aeabi_dsub+0x5d6>
 80015b8:	46ac      	mov	ip, r5
 80015ba:	e10e      	b.n	80017da <__aeabi_dsub+0x406>
 80015bc:	000a      	movs	r2, r1
 80015be:	4302      	orrs	r2, r0
 80015c0:	d100      	bne.n	80015c4 <__aeabi_dsub+0x1f0>
 80015c2:	e136      	b.n	8001832 <__aeabi_dsub+0x45e>
 80015c4:	0022      	movs	r2, r4
 80015c6:	3a01      	subs	r2, #1
 80015c8:	2c01      	cmp	r4, #1
 80015ca:	d100      	bne.n	80015ce <__aeabi_dsub+0x1fa>
 80015cc:	e1c6      	b.n	800195c <__aeabi_dsub+0x588>
 80015ce:	4c4e      	ldr	r4, [pc, #312]	; (8001708 <__aeabi_dsub+0x334>)
 80015d0:	45a4      	cmp	ip, r4
 80015d2:	d100      	bne.n	80015d6 <__aeabi_dsub+0x202>
 80015d4:	e0f4      	b.n	80017c0 <__aeabi_dsub+0x3ec>
 80015d6:	4694      	mov	ip, r2
 80015d8:	e731      	b.n	800143e <__aeabi_dsub+0x6a>
 80015da:	2401      	movs	r4, #1
 80015dc:	4067      	eors	r7, r4
 80015de:	46bb      	mov	fp, r7
 80015e0:	42bd      	cmp	r5, r7
 80015e2:	d000      	beq.n	80015e6 <__aeabi_dsub+0x212>
 80015e4:	e71c      	b.n	8001420 <__aeabi_dsub+0x4c>
 80015e6:	4c4a      	ldr	r4, [pc, #296]	; (8001710 <__aeabi_dsub+0x33c>)
 80015e8:	46a4      	mov	ip, r4
 80015ea:	44b4      	add	ip, r6
 80015ec:	4664      	mov	r4, ip
 80015ee:	2c00      	cmp	r4, #0
 80015f0:	d100      	bne.n	80015f4 <__aeabi_dsub+0x220>
 80015f2:	e0cf      	b.n	8001794 <__aeabi_dsub+0x3c0>
 80015f4:	1b94      	subs	r4, r2, r6
 80015f6:	46a4      	mov	ip, r4
 80015f8:	2e00      	cmp	r6, #0
 80015fa:	d100      	bne.n	80015fe <__aeabi_dsub+0x22a>
 80015fc:	e15c      	b.n	80018b8 <__aeabi_dsub+0x4e4>
 80015fe:	4e42      	ldr	r6, [pc, #264]	; (8001708 <__aeabi_dsub+0x334>)
 8001600:	42b2      	cmp	r2, r6
 8001602:	d100      	bne.n	8001606 <__aeabi_dsub+0x232>
 8001604:	e1ec      	b.n	80019e0 <__aeabi_dsub+0x60c>
 8001606:	2680      	movs	r6, #128	; 0x80
 8001608:	0436      	lsls	r6, r6, #16
 800160a:	4333      	orrs	r3, r6
 800160c:	4664      	mov	r4, ip
 800160e:	2c38      	cmp	r4, #56	; 0x38
 8001610:	dd00      	ble.n	8001614 <__aeabi_dsub+0x240>
 8001612:	e1b3      	b.n	800197c <__aeabi_dsub+0x5a8>
 8001614:	2c1f      	cmp	r4, #31
 8001616:	dd00      	ble.n	800161a <__aeabi_dsub+0x246>
 8001618:	e238      	b.n	8001a8c <__aeabi_dsub+0x6b8>
 800161a:	2620      	movs	r6, #32
 800161c:	1b36      	subs	r6, r6, r4
 800161e:	001c      	movs	r4, r3
 8001620:	40b4      	lsls	r4, r6
 8001622:	464f      	mov	r7, r9
 8001624:	46a0      	mov	r8, r4
 8001626:	4664      	mov	r4, ip
 8001628:	40e7      	lsrs	r7, r4
 800162a:	4644      	mov	r4, r8
 800162c:	433c      	orrs	r4, r7
 800162e:	464f      	mov	r7, r9
 8001630:	40b7      	lsls	r7, r6
 8001632:	003e      	movs	r6, r7
 8001634:	1e77      	subs	r7, r6, #1
 8001636:	41be      	sbcs	r6, r7
 8001638:	4334      	orrs	r4, r6
 800163a:	4666      	mov	r6, ip
 800163c:	40f3      	lsrs	r3, r6
 800163e:	18c9      	adds	r1, r1, r3
 8001640:	1824      	adds	r4, r4, r0
 8001642:	4284      	cmp	r4, r0
 8001644:	419b      	sbcs	r3, r3
 8001646:	425b      	negs	r3, r3
 8001648:	4698      	mov	r8, r3
 800164a:	0016      	movs	r6, r2
 800164c:	4488      	add	r8, r1
 800164e:	e04e      	b.n	80016ee <__aeabi_dsub+0x31a>
 8001650:	4a30      	ldr	r2, [pc, #192]	; (8001714 <__aeabi_dsub+0x340>)
 8001652:	1c74      	adds	r4, r6, #1
 8001654:	4214      	tst	r4, r2
 8001656:	d000      	beq.n	800165a <__aeabi_dsub+0x286>
 8001658:	e0d6      	b.n	8001808 <__aeabi_dsub+0x434>
 800165a:	464a      	mov	r2, r9
 800165c:	431a      	orrs	r2, r3
 800165e:	2e00      	cmp	r6, #0
 8001660:	d000      	beq.n	8001664 <__aeabi_dsub+0x290>
 8001662:	e15b      	b.n	800191c <__aeabi_dsub+0x548>
 8001664:	2a00      	cmp	r2, #0
 8001666:	d100      	bne.n	800166a <__aeabi_dsub+0x296>
 8001668:	e1a5      	b.n	80019b6 <__aeabi_dsub+0x5e2>
 800166a:	000a      	movs	r2, r1
 800166c:	4302      	orrs	r2, r0
 800166e:	d000      	beq.n	8001672 <__aeabi_dsub+0x29e>
 8001670:	e1bb      	b.n	80019ea <__aeabi_dsub+0x616>
 8001672:	464a      	mov	r2, r9
 8001674:	0759      	lsls	r1, r3, #29
 8001676:	08d2      	lsrs	r2, r2, #3
 8001678:	430a      	orrs	r2, r1
 800167a:	08db      	lsrs	r3, r3, #3
 800167c:	e027      	b.n	80016ce <__aeabi_dsub+0x2fa>
 800167e:	000a      	movs	r2, r1
 8001680:	4302      	orrs	r2, r0
 8001682:	d100      	bne.n	8001686 <__aeabi_dsub+0x2b2>
 8001684:	e174      	b.n	8001970 <__aeabi_dsub+0x59c>
 8001686:	0022      	movs	r2, r4
 8001688:	3a01      	subs	r2, #1
 800168a:	2c01      	cmp	r4, #1
 800168c:	d005      	beq.n	800169a <__aeabi_dsub+0x2c6>
 800168e:	4c1e      	ldr	r4, [pc, #120]	; (8001708 <__aeabi_dsub+0x334>)
 8001690:	45a4      	cmp	ip, r4
 8001692:	d100      	bne.n	8001696 <__aeabi_dsub+0x2c2>
 8001694:	e094      	b.n	80017c0 <__aeabi_dsub+0x3ec>
 8001696:	4694      	mov	ip, r2
 8001698:	e759      	b.n	800154e <__aeabi_dsub+0x17a>
 800169a:	4448      	add	r0, r9
 800169c:	4548      	cmp	r0, r9
 800169e:	4192      	sbcs	r2, r2
 80016a0:	185b      	adds	r3, r3, r1
 80016a2:	4698      	mov	r8, r3
 80016a4:	0004      	movs	r4, r0
 80016a6:	4252      	negs	r2, r2
 80016a8:	4490      	add	r8, r2
 80016aa:	4643      	mov	r3, r8
 80016ac:	2602      	movs	r6, #2
 80016ae:	021b      	lsls	r3, r3, #8
 80016b0:	d500      	bpl.n	80016b4 <__aeabi_dsub+0x2e0>
 80016b2:	e0c4      	b.n	800183e <__aeabi_dsub+0x46a>
 80016b4:	3e01      	subs	r6, #1
 80016b6:	0763      	lsls	r3, r4, #29
 80016b8:	d000      	beq.n	80016bc <__aeabi_dsub+0x2e8>
 80016ba:	e711      	b.n	80014e0 <__aeabi_dsub+0x10c>
 80016bc:	4643      	mov	r3, r8
 80016be:	46b4      	mov	ip, r6
 80016c0:	0759      	lsls	r1, r3, #29
 80016c2:	08e2      	lsrs	r2, r4, #3
 80016c4:	430a      	orrs	r2, r1
 80016c6:	08db      	lsrs	r3, r3, #3
 80016c8:	490f      	ldr	r1, [pc, #60]	; (8001708 <__aeabi_dsub+0x334>)
 80016ca:	458c      	cmp	ip, r1
 80016cc:	d040      	beq.n	8001750 <__aeabi_dsub+0x37c>
 80016ce:	4661      	mov	r1, ip
 80016d0:	031b      	lsls	r3, r3, #12
 80016d2:	0549      	lsls	r1, r1, #21
 80016d4:	0b1b      	lsrs	r3, r3, #12
 80016d6:	0d49      	lsrs	r1, r1, #21
 80016d8:	e720      	b.n	800151c <__aeabi_dsub+0x148>
 80016da:	4301      	orrs	r1, r0
 80016dc:	000c      	movs	r4, r1
 80016de:	1e61      	subs	r1, r4, #1
 80016e0:	418c      	sbcs	r4, r1
 80016e2:	444c      	add	r4, r9
 80016e4:	454c      	cmp	r4, r9
 80016e6:	4192      	sbcs	r2, r2
 80016e8:	4252      	negs	r2, r2
 80016ea:	4690      	mov	r8, r2
 80016ec:	4498      	add	r8, r3
 80016ee:	4643      	mov	r3, r8
 80016f0:	021b      	lsls	r3, r3, #8
 80016f2:	d5e0      	bpl.n	80016b6 <__aeabi_dsub+0x2e2>
 80016f4:	4b04      	ldr	r3, [pc, #16]	; (8001708 <__aeabi_dsub+0x334>)
 80016f6:	3601      	adds	r6, #1
 80016f8:	429e      	cmp	r6, r3
 80016fa:	d000      	beq.n	80016fe <__aeabi_dsub+0x32a>
 80016fc:	e09f      	b.n	800183e <__aeabi_dsub+0x46a>
 80016fe:	0031      	movs	r1, r6
 8001700:	2300      	movs	r3, #0
 8001702:	2200      	movs	r2, #0
 8001704:	e70a      	b.n	800151c <__aeabi_dsub+0x148>
 8001706:	46c0      	nop			; (mov r8, r8)
 8001708:	000007ff 	.word	0x000007ff
 800170c:	ff7fffff 	.word	0xff7fffff
 8001710:	fffff801 	.word	0xfffff801
 8001714:	000007fe 	.word	0x000007fe
 8001718:	2a00      	cmp	r2, #0
 800171a:	d100      	bne.n	800171e <__aeabi_dsub+0x34a>
 800171c:	e160      	b.n	80019e0 <__aeabi_dsub+0x60c>
 800171e:	000a      	movs	r2, r1
 8001720:	4302      	orrs	r2, r0
 8001722:	d04d      	beq.n	80017c0 <__aeabi_dsub+0x3ec>
 8001724:	464a      	mov	r2, r9
 8001726:	075c      	lsls	r4, r3, #29
 8001728:	08d2      	lsrs	r2, r2, #3
 800172a:	4322      	orrs	r2, r4
 800172c:	2480      	movs	r4, #128	; 0x80
 800172e:	08db      	lsrs	r3, r3, #3
 8001730:	0324      	lsls	r4, r4, #12
 8001732:	4223      	tst	r3, r4
 8001734:	d007      	beq.n	8001746 <__aeabi_dsub+0x372>
 8001736:	08ce      	lsrs	r6, r1, #3
 8001738:	4226      	tst	r6, r4
 800173a:	d104      	bne.n	8001746 <__aeabi_dsub+0x372>
 800173c:	465d      	mov	r5, fp
 800173e:	0033      	movs	r3, r6
 8001740:	08c2      	lsrs	r2, r0, #3
 8001742:	0749      	lsls	r1, r1, #29
 8001744:	430a      	orrs	r2, r1
 8001746:	0f51      	lsrs	r1, r2, #29
 8001748:	00d2      	lsls	r2, r2, #3
 800174a:	08d2      	lsrs	r2, r2, #3
 800174c:	0749      	lsls	r1, r1, #29
 800174e:	430a      	orrs	r2, r1
 8001750:	0011      	movs	r1, r2
 8001752:	4319      	orrs	r1, r3
 8001754:	d100      	bne.n	8001758 <__aeabi_dsub+0x384>
 8001756:	e1c8      	b.n	8001aea <__aeabi_dsub+0x716>
 8001758:	2180      	movs	r1, #128	; 0x80
 800175a:	0309      	lsls	r1, r1, #12
 800175c:	430b      	orrs	r3, r1
 800175e:	031b      	lsls	r3, r3, #12
 8001760:	49d5      	ldr	r1, [pc, #852]	; (8001ab8 <__aeabi_dsub+0x6e4>)
 8001762:	0b1b      	lsrs	r3, r3, #12
 8001764:	e6da      	b.n	800151c <__aeabi_dsub+0x148>
 8001766:	49d5      	ldr	r1, [pc, #852]	; (8001abc <__aeabi_dsub+0x6e8>)
 8001768:	1ab6      	subs	r6, r6, r2
 800176a:	400b      	ands	r3, r1
 800176c:	4698      	mov	r8, r3
 800176e:	e6b5      	b.n	80014dc <__aeabi_dsub+0x108>
 8001770:	0020      	movs	r0, r4
 8001772:	f000 fa8b 	bl	8001c8c <__clzsi2>
 8001776:	0002      	movs	r2, r0
 8001778:	3218      	adds	r2, #24
 800177a:	2a1f      	cmp	r2, #31
 800177c:	dc00      	bgt.n	8001780 <__aeabi_dsub+0x3ac>
 800177e:	e68f      	b.n	80014a0 <__aeabi_dsub+0xcc>
 8001780:	0023      	movs	r3, r4
 8001782:	3808      	subs	r0, #8
 8001784:	4083      	lsls	r3, r0
 8001786:	2400      	movs	r4, #0
 8001788:	e692      	b.n	80014b0 <__aeabi_dsub+0xdc>
 800178a:	4308      	orrs	r0, r1
 800178c:	0002      	movs	r2, r0
 800178e:	1e50      	subs	r0, r2, #1
 8001790:	4182      	sbcs	r2, r0
 8001792:	e66d      	b.n	8001470 <__aeabi_dsub+0x9c>
 8001794:	4cca      	ldr	r4, [pc, #808]	; (8001ac0 <__aeabi_dsub+0x6ec>)
 8001796:	1c72      	adds	r2, r6, #1
 8001798:	4222      	tst	r2, r4
 800179a:	d000      	beq.n	800179e <__aeabi_dsub+0x3ca>
 800179c:	e0ad      	b.n	80018fa <__aeabi_dsub+0x526>
 800179e:	464a      	mov	r2, r9
 80017a0:	431a      	orrs	r2, r3
 80017a2:	2e00      	cmp	r6, #0
 80017a4:	d1b8      	bne.n	8001718 <__aeabi_dsub+0x344>
 80017a6:	2a00      	cmp	r2, #0
 80017a8:	d100      	bne.n	80017ac <__aeabi_dsub+0x3d8>
 80017aa:	e158      	b.n	8001a5e <__aeabi_dsub+0x68a>
 80017ac:	000a      	movs	r2, r1
 80017ae:	4302      	orrs	r2, r0
 80017b0:	d000      	beq.n	80017b4 <__aeabi_dsub+0x3e0>
 80017b2:	e159      	b.n	8001a68 <__aeabi_dsub+0x694>
 80017b4:	464a      	mov	r2, r9
 80017b6:	0759      	lsls	r1, r3, #29
 80017b8:	08d2      	lsrs	r2, r2, #3
 80017ba:	430a      	orrs	r2, r1
 80017bc:	08db      	lsrs	r3, r3, #3
 80017be:	e786      	b.n	80016ce <__aeabi_dsub+0x2fa>
 80017c0:	464a      	mov	r2, r9
 80017c2:	0759      	lsls	r1, r3, #29
 80017c4:	08d2      	lsrs	r2, r2, #3
 80017c6:	430a      	orrs	r2, r1
 80017c8:	08db      	lsrs	r3, r3, #3
 80017ca:	e7c1      	b.n	8001750 <__aeabi_dsub+0x37c>
 80017cc:	4dba      	ldr	r5, [pc, #744]	; (8001ab8 <__aeabi_dsub+0x6e4>)
 80017ce:	42aa      	cmp	r2, r5
 80017d0:	d100      	bne.n	80017d4 <__aeabi_dsub+0x400>
 80017d2:	e11e      	b.n	8001a12 <__aeabi_dsub+0x63e>
 80017d4:	2580      	movs	r5, #128	; 0x80
 80017d6:	042d      	lsls	r5, r5, #16
 80017d8:	432b      	orrs	r3, r5
 80017da:	4664      	mov	r4, ip
 80017dc:	2c38      	cmp	r4, #56	; 0x38
 80017de:	dc5d      	bgt.n	800189c <__aeabi_dsub+0x4c8>
 80017e0:	2c1f      	cmp	r4, #31
 80017e2:	dd00      	ble.n	80017e6 <__aeabi_dsub+0x412>
 80017e4:	e0d0      	b.n	8001988 <__aeabi_dsub+0x5b4>
 80017e6:	2520      	movs	r5, #32
 80017e8:	4667      	mov	r7, ip
 80017ea:	1b2d      	subs	r5, r5, r4
 80017ec:	464e      	mov	r6, r9
 80017ee:	001c      	movs	r4, r3
 80017f0:	40fe      	lsrs	r6, r7
 80017f2:	40ac      	lsls	r4, r5
 80017f4:	4334      	orrs	r4, r6
 80017f6:	464e      	mov	r6, r9
 80017f8:	40ae      	lsls	r6, r5
 80017fa:	0035      	movs	r5, r6
 80017fc:	40fb      	lsrs	r3, r7
 80017fe:	1e6e      	subs	r6, r5, #1
 8001800:	41b5      	sbcs	r5, r6
 8001802:	1ac9      	subs	r1, r1, r3
 8001804:	432c      	orrs	r4, r5
 8001806:	e04e      	b.n	80018a6 <__aeabi_dsub+0x4d2>
 8001808:	464a      	mov	r2, r9
 800180a:	1a14      	subs	r4, r2, r0
 800180c:	45a1      	cmp	r9, r4
 800180e:	4192      	sbcs	r2, r2
 8001810:	4252      	negs	r2, r2
 8001812:	4690      	mov	r8, r2
 8001814:	1a5f      	subs	r7, r3, r1
 8001816:	003a      	movs	r2, r7
 8001818:	4647      	mov	r7, r8
 800181a:	1bd2      	subs	r2, r2, r7
 800181c:	4690      	mov	r8, r2
 800181e:	0212      	lsls	r2, r2, #8
 8001820:	d500      	bpl.n	8001824 <__aeabi_dsub+0x450>
 8001822:	e08b      	b.n	800193c <__aeabi_dsub+0x568>
 8001824:	4642      	mov	r2, r8
 8001826:	4322      	orrs	r2, r4
 8001828:	d000      	beq.n	800182c <__aeabi_dsub+0x458>
 800182a:	e630      	b.n	800148e <__aeabi_dsub+0xba>
 800182c:	2300      	movs	r3, #0
 800182e:	2500      	movs	r5, #0
 8001830:	e74d      	b.n	80016ce <__aeabi_dsub+0x2fa>
 8001832:	464a      	mov	r2, r9
 8001834:	0759      	lsls	r1, r3, #29
 8001836:	08d2      	lsrs	r2, r2, #3
 8001838:	430a      	orrs	r2, r1
 800183a:	08db      	lsrs	r3, r3, #3
 800183c:	e744      	b.n	80016c8 <__aeabi_dsub+0x2f4>
 800183e:	4642      	mov	r2, r8
 8001840:	4b9e      	ldr	r3, [pc, #632]	; (8001abc <__aeabi_dsub+0x6e8>)
 8001842:	0861      	lsrs	r1, r4, #1
 8001844:	401a      	ands	r2, r3
 8001846:	0013      	movs	r3, r2
 8001848:	2201      	movs	r2, #1
 800184a:	4014      	ands	r4, r2
 800184c:	430c      	orrs	r4, r1
 800184e:	07da      	lsls	r2, r3, #31
 8001850:	085b      	lsrs	r3, r3, #1
 8001852:	4698      	mov	r8, r3
 8001854:	4314      	orrs	r4, r2
 8001856:	e641      	b.n	80014dc <__aeabi_dsub+0x108>
 8001858:	001a      	movs	r2, r3
 800185a:	3e1f      	subs	r6, #31
 800185c:	40f2      	lsrs	r2, r6
 800185e:	0016      	movs	r6, r2
 8001860:	2920      	cmp	r1, #32
 8001862:	d003      	beq.n	800186c <__aeabi_dsub+0x498>
 8001864:	2240      	movs	r2, #64	; 0x40
 8001866:	1a51      	subs	r1, r2, r1
 8001868:	408b      	lsls	r3, r1
 800186a:	431c      	orrs	r4, r3
 800186c:	1e62      	subs	r2, r4, #1
 800186e:	4194      	sbcs	r4, r2
 8001870:	2300      	movs	r3, #0
 8001872:	4334      	orrs	r4, r6
 8001874:	4698      	mov	r8, r3
 8001876:	2600      	movs	r6, #0
 8001878:	e71d      	b.n	80016b6 <__aeabi_dsub+0x2e2>
 800187a:	000c      	movs	r4, r1
 800187c:	3a20      	subs	r2, #32
 800187e:	40d4      	lsrs	r4, r2
 8001880:	0022      	movs	r2, r4
 8001882:	4664      	mov	r4, ip
 8001884:	2c20      	cmp	r4, #32
 8001886:	d004      	beq.n	8001892 <__aeabi_dsub+0x4be>
 8001888:	2740      	movs	r7, #64	; 0x40
 800188a:	1b3f      	subs	r7, r7, r4
 800188c:	40b9      	lsls	r1, r7
 800188e:	4308      	orrs	r0, r1
 8001890:	4680      	mov	r8, r0
 8001892:	4644      	mov	r4, r8
 8001894:	1e61      	subs	r1, r4, #1
 8001896:	418c      	sbcs	r4, r1
 8001898:	4322      	orrs	r2, r4
 800189a:	e5e9      	b.n	8001470 <__aeabi_dsub+0x9c>
 800189c:	464c      	mov	r4, r9
 800189e:	4323      	orrs	r3, r4
 80018a0:	001c      	movs	r4, r3
 80018a2:	1e63      	subs	r3, r4, #1
 80018a4:	419c      	sbcs	r4, r3
 80018a6:	1b04      	subs	r4, r0, r4
 80018a8:	42a0      	cmp	r0, r4
 80018aa:	419b      	sbcs	r3, r3
 80018ac:	425b      	negs	r3, r3
 80018ae:	1acb      	subs	r3, r1, r3
 80018b0:	4698      	mov	r8, r3
 80018b2:	465d      	mov	r5, fp
 80018b4:	0016      	movs	r6, r2
 80018b6:	e5e2      	b.n	800147e <__aeabi_dsub+0xaa>
 80018b8:	464e      	mov	r6, r9
 80018ba:	431e      	orrs	r6, r3
 80018bc:	d100      	bne.n	80018c0 <__aeabi_dsub+0x4ec>
 80018be:	e0ae      	b.n	8001a1e <__aeabi_dsub+0x64a>
 80018c0:	1e66      	subs	r6, r4, #1
 80018c2:	2c01      	cmp	r4, #1
 80018c4:	d100      	bne.n	80018c8 <__aeabi_dsub+0x4f4>
 80018c6:	e0fd      	b.n	8001ac4 <__aeabi_dsub+0x6f0>
 80018c8:	4f7b      	ldr	r7, [pc, #492]	; (8001ab8 <__aeabi_dsub+0x6e4>)
 80018ca:	42bc      	cmp	r4, r7
 80018cc:	d100      	bne.n	80018d0 <__aeabi_dsub+0x4fc>
 80018ce:	e107      	b.n	8001ae0 <__aeabi_dsub+0x70c>
 80018d0:	46b4      	mov	ip, r6
 80018d2:	e69b      	b.n	800160c <__aeabi_dsub+0x238>
 80018d4:	4664      	mov	r4, ip
 80018d6:	2220      	movs	r2, #32
 80018d8:	1b12      	subs	r2, r2, r4
 80018da:	000c      	movs	r4, r1
 80018dc:	4094      	lsls	r4, r2
 80018de:	0007      	movs	r7, r0
 80018e0:	4090      	lsls	r0, r2
 80018e2:	46a0      	mov	r8, r4
 80018e4:	4664      	mov	r4, ip
 80018e6:	1e42      	subs	r2, r0, #1
 80018e8:	4190      	sbcs	r0, r2
 80018ea:	4662      	mov	r2, ip
 80018ec:	40e7      	lsrs	r7, r4
 80018ee:	4644      	mov	r4, r8
 80018f0:	40d1      	lsrs	r1, r2
 80018f2:	433c      	orrs	r4, r7
 80018f4:	4304      	orrs	r4, r0
 80018f6:	185b      	adds	r3, r3, r1
 80018f8:	e6f3      	b.n	80016e2 <__aeabi_dsub+0x30e>
 80018fa:	4c6f      	ldr	r4, [pc, #444]	; (8001ab8 <__aeabi_dsub+0x6e4>)
 80018fc:	42a2      	cmp	r2, r4
 80018fe:	d100      	bne.n	8001902 <__aeabi_dsub+0x52e>
 8001900:	e0d5      	b.n	8001aae <__aeabi_dsub+0x6da>
 8001902:	4448      	add	r0, r9
 8001904:	185b      	adds	r3, r3, r1
 8001906:	4548      	cmp	r0, r9
 8001908:	4189      	sbcs	r1, r1
 800190a:	4249      	negs	r1, r1
 800190c:	185b      	adds	r3, r3, r1
 800190e:	07dc      	lsls	r4, r3, #31
 8001910:	0840      	lsrs	r0, r0, #1
 8001912:	085b      	lsrs	r3, r3, #1
 8001914:	4698      	mov	r8, r3
 8001916:	0016      	movs	r6, r2
 8001918:	4304      	orrs	r4, r0
 800191a:	e6cc      	b.n	80016b6 <__aeabi_dsub+0x2e2>
 800191c:	2a00      	cmp	r2, #0
 800191e:	d000      	beq.n	8001922 <__aeabi_dsub+0x54e>
 8001920:	e082      	b.n	8001a28 <__aeabi_dsub+0x654>
 8001922:	000a      	movs	r2, r1
 8001924:	4302      	orrs	r2, r0
 8001926:	d140      	bne.n	80019aa <__aeabi_dsub+0x5d6>
 8001928:	2380      	movs	r3, #128	; 0x80
 800192a:	2500      	movs	r5, #0
 800192c:	031b      	lsls	r3, r3, #12
 800192e:	e713      	b.n	8001758 <__aeabi_dsub+0x384>
 8001930:	074b      	lsls	r3, r1, #29
 8001932:	08c2      	lsrs	r2, r0, #3
 8001934:	431a      	orrs	r2, r3
 8001936:	465d      	mov	r5, fp
 8001938:	08cb      	lsrs	r3, r1, #3
 800193a:	e6c5      	b.n	80016c8 <__aeabi_dsub+0x2f4>
 800193c:	464a      	mov	r2, r9
 800193e:	1a84      	subs	r4, r0, r2
 8001940:	42a0      	cmp	r0, r4
 8001942:	4192      	sbcs	r2, r2
 8001944:	1acb      	subs	r3, r1, r3
 8001946:	4252      	negs	r2, r2
 8001948:	1a9b      	subs	r3, r3, r2
 800194a:	4698      	mov	r8, r3
 800194c:	465d      	mov	r5, fp
 800194e:	e59e      	b.n	800148e <__aeabi_dsub+0xba>
 8001950:	464a      	mov	r2, r9
 8001952:	0759      	lsls	r1, r3, #29
 8001954:	08d2      	lsrs	r2, r2, #3
 8001956:	430a      	orrs	r2, r1
 8001958:	08db      	lsrs	r3, r3, #3
 800195a:	e6f9      	b.n	8001750 <__aeabi_dsub+0x37c>
 800195c:	464a      	mov	r2, r9
 800195e:	1a14      	subs	r4, r2, r0
 8001960:	45a1      	cmp	r9, r4
 8001962:	4192      	sbcs	r2, r2
 8001964:	1a5b      	subs	r3, r3, r1
 8001966:	4252      	negs	r2, r2
 8001968:	1a9b      	subs	r3, r3, r2
 800196a:	4698      	mov	r8, r3
 800196c:	2601      	movs	r6, #1
 800196e:	e586      	b.n	800147e <__aeabi_dsub+0xaa>
 8001970:	464a      	mov	r2, r9
 8001972:	0759      	lsls	r1, r3, #29
 8001974:	08d2      	lsrs	r2, r2, #3
 8001976:	430a      	orrs	r2, r1
 8001978:	08db      	lsrs	r3, r3, #3
 800197a:	e6a5      	b.n	80016c8 <__aeabi_dsub+0x2f4>
 800197c:	464c      	mov	r4, r9
 800197e:	4323      	orrs	r3, r4
 8001980:	001c      	movs	r4, r3
 8001982:	1e63      	subs	r3, r4, #1
 8001984:	419c      	sbcs	r4, r3
 8001986:	e65b      	b.n	8001640 <__aeabi_dsub+0x26c>
 8001988:	4665      	mov	r5, ip
 800198a:	001e      	movs	r6, r3
 800198c:	3d20      	subs	r5, #32
 800198e:	40ee      	lsrs	r6, r5
 8001990:	2c20      	cmp	r4, #32
 8001992:	d005      	beq.n	80019a0 <__aeabi_dsub+0x5cc>
 8001994:	2540      	movs	r5, #64	; 0x40
 8001996:	1b2d      	subs	r5, r5, r4
 8001998:	40ab      	lsls	r3, r5
 800199a:	464c      	mov	r4, r9
 800199c:	431c      	orrs	r4, r3
 800199e:	46a2      	mov	sl, r4
 80019a0:	4654      	mov	r4, sl
 80019a2:	1e63      	subs	r3, r4, #1
 80019a4:	419c      	sbcs	r4, r3
 80019a6:	4334      	orrs	r4, r6
 80019a8:	e77d      	b.n	80018a6 <__aeabi_dsub+0x4d2>
 80019aa:	074b      	lsls	r3, r1, #29
 80019ac:	08c2      	lsrs	r2, r0, #3
 80019ae:	431a      	orrs	r2, r3
 80019b0:	465d      	mov	r5, fp
 80019b2:	08cb      	lsrs	r3, r1, #3
 80019b4:	e6cc      	b.n	8001750 <__aeabi_dsub+0x37c>
 80019b6:	000a      	movs	r2, r1
 80019b8:	4302      	orrs	r2, r0
 80019ba:	d100      	bne.n	80019be <__aeabi_dsub+0x5ea>
 80019bc:	e736      	b.n	800182c <__aeabi_dsub+0x458>
 80019be:	074b      	lsls	r3, r1, #29
 80019c0:	08c2      	lsrs	r2, r0, #3
 80019c2:	431a      	orrs	r2, r3
 80019c4:	465d      	mov	r5, fp
 80019c6:	08cb      	lsrs	r3, r1, #3
 80019c8:	e681      	b.n	80016ce <__aeabi_dsub+0x2fa>
 80019ca:	464a      	mov	r2, r9
 80019cc:	1a84      	subs	r4, r0, r2
 80019ce:	42a0      	cmp	r0, r4
 80019d0:	4192      	sbcs	r2, r2
 80019d2:	1acb      	subs	r3, r1, r3
 80019d4:	4252      	negs	r2, r2
 80019d6:	1a9b      	subs	r3, r3, r2
 80019d8:	4698      	mov	r8, r3
 80019da:	465d      	mov	r5, fp
 80019dc:	2601      	movs	r6, #1
 80019de:	e54e      	b.n	800147e <__aeabi_dsub+0xaa>
 80019e0:	074b      	lsls	r3, r1, #29
 80019e2:	08c2      	lsrs	r2, r0, #3
 80019e4:	431a      	orrs	r2, r3
 80019e6:	08cb      	lsrs	r3, r1, #3
 80019e8:	e6b2      	b.n	8001750 <__aeabi_dsub+0x37c>
 80019ea:	464a      	mov	r2, r9
 80019ec:	1a14      	subs	r4, r2, r0
 80019ee:	45a1      	cmp	r9, r4
 80019f0:	4192      	sbcs	r2, r2
 80019f2:	1a5f      	subs	r7, r3, r1
 80019f4:	4252      	negs	r2, r2
 80019f6:	1aba      	subs	r2, r7, r2
 80019f8:	4690      	mov	r8, r2
 80019fa:	0212      	lsls	r2, r2, #8
 80019fc:	d56b      	bpl.n	8001ad6 <__aeabi_dsub+0x702>
 80019fe:	464a      	mov	r2, r9
 8001a00:	1a84      	subs	r4, r0, r2
 8001a02:	42a0      	cmp	r0, r4
 8001a04:	4192      	sbcs	r2, r2
 8001a06:	1acb      	subs	r3, r1, r3
 8001a08:	4252      	negs	r2, r2
 8001a0a:	1a9b      	subs	r3, r3, r2
 8001a0c:	4698      	mov	r8, r3
 8001a0e:	465d      	mov	r5, fp
 8001a10:	e564      	b.n	80014dc <__aeabi_dsub+0x108>
 8001a12:	074b      	lsls	r3, r1, #29
 8001a14:	08c2      	lsrs	r2, r0, #3
 8001a16:	431a      	orrs	r2, r3
 8001a18:	465d      	mov	r5, fp
 8001a1a:	08cb      	lsrs	r3, r1, #3
 8001a1c:	e698      	b.n	8001750 <__aeabi_dsub+0x37c>
 8001a1e:	074b      	lsls	r3, r1, #29
 8001a20:	08c2      	lsrs	r2, r0, #3
 8001a22:	431a      	orrs	r2, r3
 8001a24:	08cb      	lsrs	r3, r1, #3
 8001a26:	e64f      	b.n	80016c8 <__aeabi_dsub+0x2f4>
 8001a28:	000a      	movs	r2, r1
 8001a2a:	4302      	orrs	r2, r0
 8001a2c:	d090      	beq.n	8001950 <__aeabi_dsub+0x57c>
 8001a2e:	464a      	mov	r2, r9
 8001a30:	075c      	lsls	r4, r3, #29
 8001a32:	08d2      	lsrs	r2, r2, #3
 8001a34:	4314      	orrs	r4, r2
 8001a36:	2280      	movs	r2, #128	; 0x80
 8001a38:	08db      	lsrs	r3, r3, #3
 8001a3a:	0312      	lsls	r2, r2, #12
 8001a3c:	4213      	tst	r3, r2
 8001a3e:	d008      	beq.n	8001a52 <__aeabi_dsub+0x67e>
 8001a40:	08ce      	lsrs	r6, r1, #3
 8001a42:	4216      	tst	r6, r2
 8001a44:	d105      	bne.n	8001a52 <__aeabi_dsub+0x67e>
 8001a46:	08c0      	lsrs	r0, r0, #3
 8001a48:	0749      	lsls	r1, r1, #29
 8001a4a:	4308      	orrs	r0, r1
 8001a4c:	0004      	movs	r4, r0
 8001a4e:	465d      	mov	r5, fp
 8001a50:	0033      	movs	r3, r6
 8001a52:	0f61      	lsrs	r1, r4, #29
 8001a54:	00e2      	lsls	r2, r4, #3
 8001a56:	0749      	lsls	r1, r1, #29
 8001a58:	08d2      	lsrs	r2, r2, #3
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	e678      	b.n	8001750 <__aeabi_dsub+0x37c>
 8001a5e:	074b      	lsls	r3, r1, #29
 8001a60:	08c2      	lsrs	r2, r0, #3
 8001a62:	431a      	orrs	r2, r3
 8001a64:	08cb      	lsrs	r3, r1, #3
 8001a66:	e632      	b.n	80016ce <__aeabi_dsub+0x2fa>
 8001a68:	4448      	add	r0, r9
 8001a6a:	185b      	adds	r3, r3, r1
 8001a6c:	4548      	cmp	r0, r9
 8001a6e:	4192      	sbcs	r2, r2
 8001a70:	4698      	mov	r8, r3
 8001a72:	4252      	negs	r2, r2
 8001a74:	4490      	add	r8, r2
 8001a76:	4643      	mov	r3, r8
 8001a78:	0004      	movs	r4, r0
 8001a7a:	021b      	lsls	r3, r3, #8
 8001a7c:	d400      	bmi.n	8001a80 <__aeabi_dsub+0x6ac>
 8001a7e:	e61a      	b.n	80016b6 <__aeabi_dsub+0x2e2>
 8001a80:	4642      	mov	r2, r8
 8001a82:	4b0e      	ldr	r3, [pc, #56]	; (8001abc <__aeabi_dsub+0x6e8>)
 8001a84:	2601      	movs	r6, #1
 8001a86:	401a      	ands	r2, r3
 8001a88:	4690      	mov	r8, r2
 8001a8a:	e614      	b.n	80016b6 <__aeabi_dsub+0x2e2>
 8001a8c:	4666      	mov	r6, ip
 8001a8e:	001f      	movs	r7, r3
 8001a90:	3e20      	subs	r6, #32
 8001a92:	40f7      	lsrs	r7, r6
 8001a94:	2c20      	cmp	r4, #32
 8001a96:	d005      	beq.n	8001aa4 <__aeabi_dsub+0x6d0>
 8001a98:	2640      	movs	r6, #64	; 0x40
 8001a9a:	1b36      	subs	r6, r6, r4
 8001a9c:	40b3      	lsls	r3, r6
 8001a9e:	464c      	mov	r4, r9
 8001aa0:	431c      	orrs	r4, r3
 8001aa2:	46a2      	mov	sl, r4
 8001aa4:	4654      	mov	r4, sl
 8001aa6:	1e63      	subs	r3, r4, #1
 8001aa8:	419c      	sbcs	r4, r3
 8001aaa:	433c      	orrs	r4, r7
 8001aac:	e5c8      	b.n	8001640 <__aeabi_dsub+0x26c>
 8001aae:	0011      	movs	r1, r2
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	e532      	b.n	800151c <__aeabi_dsub+0x148>
 8001ab6:	46c0      	nop			; (mov r8, r8)
 8001ab8:	000007ff 	.word	0x000007ff
 8001abc:	ff7fffff 	.word	0xff7fffff
 8001ac0:	000007fe 	.word	0x000007fe
 8001ac4:	464a      	mov	r2, r9
 8001ac6:	1814      	adds	r4, r2, r0
 8001ac8:	4284      	cmp	r4, r0
 8001aca:	4192      	sbcs	r2, r2
 8001acc:	185b      	adds	r3, r3, r1
 8001ace:	4698      	mov	r8, r3
 8001ad0:	4252      	negs	r2, r2
 8001ad2:	4490      	add	r8, r2
 8001ad4:	e5e9      	b.n	80016aa <__aeabi_dsub+0x2d6>
 8001ad6:	4642      	mov	r2, r8
 8001ad8:	4322      	orrs	r2, r4
 8001ada:	d100      	bne.n	8001ade <__aeabi_dsub+0x70a>
 8001adc:	e6a6      	b.n	800182c <__aeabi_dsub+0x458>
 8001ade:	e5ea      	b.n	80016b6 <__aeabi_dsub+0x2e2>
 8001ae0:	074b      	lsls	r3, r1, #29
 8001ae2:	08c2      	lsrs	r2, r0, #3
 8001ae4:	431a      	orrs	r2, r3
 8001ae6:	08cb      	lsrs	r3, r1, #3
 8001ae8:	e632      	b.n	8001750 <__aeabi_dsub+0x37c>
 8001aea:	2200      	movs	r2, #0
 8001aec:	4901      	ldr	r1, [pc, #4]	; (8001af4 <__aeabi_dsub+0x720>)
 8001aee:	0013      	movs	r3, r2
 8001af0:	e514      	b.n	800151c <__aeabi_dsub+0x148>
 8001af2:	46c0      	nop			; (mov r8, r8)
 8001af4:	000007ff 	.word	0x000007ff

08001af8 <__aeabi_d2iz>:
 8001af8:	000a      	movs	r2, r1
 8001afa:	b530      	push	{r4, r5, lr}
 8001afc:	4c13      	ldr	r4, [pc, #76]	; (8001b4c <__aeabi_d2iz+0x54>)
 8001afe:	0053      	lsls	r3, r2, #1
 8001b00:	0309      	lsls	r1, r1, #12
 8001b02:	0005      	movs	r5, r0
 8001b04:	0b09      	lsrs	r1, r1, #12
 8001b06:	2000      	movs	r0, #0
 8001b08:	0d5b      	lsrs	r3, r3, #21
 8001b0a:	0fd2      	lsrs	r2, r2, #31
 8001b0c:	42a3      	cmp	r3, r4
 8001b0e:	dd04      	ble.n	8001b1a <__aeabi_d2iz+0x22>
 8001b10:	480f      	ldr	r0, [pc, #60]	; (8001b50 <__aeabi_d2iz+0x58>)
 8001b12:	4283      	cmp	r3, r0
 8001b14:	dd02      	ble.n	8001b1c <__aeabi_d2iz+0x24>
 8001b16:	4b0f      	ldr	r3, [pc, #60]	; (8001b54 <__aeabi_d2iz+0x5c>)
 8001b18:	18d0      	adds	r0, r2, r3
 8001b1a:	bd30      	pop	{r4, r5, pc}
 8001b1c:	2080      	movs	r0, #128	; 0x80
 8001b1e:	0340      	lsls	r0, r0, #13
 8001b20:	4301      	orrs	r1, r0
 8001b22:	480d      	ldr	r0, [pc, #52]	; (8001b58 <__aeabi_d2iz+0x60>)
 8001b24:	1ac0      	subs	r0, r0, r3
 8001b26:	281f      	cmp	r0, #31
 8001b28:	dd08      	ble.n	8001b3c <__aeabi_d2iz+0x44>
 8001b2a:	480c      	ldr	r0, [pc, #48]	; (8001b5c <__aeabi_d2iz+0x64>)
 8001b2c:	1ac3      	subs	r3, r0, r3
 8001b2e:	40d9      	lsrs	r1, r3
 8001b30:	000b      	movs	r3, r1
 8001b32:	4258      	negs	r0, r3
 8001b34:	2a00      	cmp	r2, #0
 8001b36:	d1f0      	bne.n	8001b1a <__aeabi_d2iz+0x22>
 8001b38:	0018      	movs	r0, r3
 8001b3a:	e7ee      	b.n	8001b1a <__aeabi_d2iz+0x22>
 8001b3c:	4c08      	ldr	r4, [pc, #32]	; (8001b60 <__aeabi_d2iz+0x68>)
 8001b3e:	40c5      	lsrs	r5, r0
 8001b40:	46a4      	mov	ip, r4
 8001b42:	4463      	add	r3, ip
 8001b44:	4099      	lsls	r1, r3
 8001b46:	000b      	movs	r3, r1
 8001b48:	432b      	orrs	r3, r5
 8001b4a:	e7f2      	b.n	8001b32 <__aeabi_d2iz+0x3a>
 8001b4c:	000003fe 	.word	0x000003fe
 8001b50:	0000041d 	.word	0x0000041d
 8001b54:	7fffffff 	.word	0x7fffffff
 8001b58:	00000433 	.word	0x00000433
 8001b5c:	00000413 	.word	0x00000413
 8001b60:	fffffbed 	.word	0xfffffbed

08001b64 <__aeabi_i2d>:
 8001b64:	b570      	push	{r4, r5, r6, lr}
 8001b66:	2800      	cmp	r0, #0
 8001b68:	d016      	beq.n	8001b98 <__aeabi_i2d+0x34>
 8001b6a:	17c3      	asrs	r3, r0, #31
 8001b6c:	18c5      	adds	r5, r0, r3
 8001b6e:	405d      	eors	r5, r3
 8001b70:	0fc4      	lsrs	r4, r0, #31
 8001b72:	0028      	movs	r0, r5
 8001b74:	f000 f88a 	bl	8001c8c <__clzsi2>
 8001b78:	4a11      	ldr	r2, [pc, #68]	; (8001bc0 <__aeabi_i2d+0x5c>)
 8001b7a:	1a12      	subs	r2, r2, r0
 8001b7c:	280a      	cmp	r0, #10
 8001b7e:	dc16      	bgt.n	8001bae <__aeabi_i2d+0x4a>
 8001b80:	0003      	movs	r3, r0
 8001b82:	002e      	movs	r6, r5
 8001b84:	3315      	adds	r3, #21
 8001b86:	409e      	lsls	r6, r3
 8001b88:	230b      	movs	r3, #11
 8001b8a:	1a18      	subs	r0, r3, r0
 8001b8c:	40c5      	lsrs	r5, r0
 8001b8e:	0553      	lsls	r3, r2, #21
 8001b90:	032d      	lsls	r5, r5, #12
 8001b92:	0b2d      	lsrs	r5, r5, #12
 8001b94:	0d5b      	lsrs	r3, r3, #21
 8001b96:	e003      	b.n	8001ba0 <__aeabi_i2d+0x3c>
 8001b98:	2400      	movs	r4, #0
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	2500      	movs	r5, #0
 8001b9e:	2600      	movs	r6, #0
 8001ba0:	051b      	lsls	r3, r3, #20
 8001ba2:	432b      	orrs	r3, r5
 8001ba4:	07e4      	lsls	r4, r4, #31
 8001ba6:	4323      	orrs	r3, r4
 8001ba8:	0030      	movs	r0, r6
 8001baa:	0019      	movs	r1, r3
 8001bac:	bd70      	pop	{r4, r5, r6, pc}
 8001bae:	380b      	subs	r0, #11
 8001bb0:	4085      	lsls	r5, r0
 8001bb2:	0553      	lsls	r3, r2, #21
 8001bb4:	032d      	lsls	r5, r5, #12
 8001bb6:	2600      	movs	r6, #0
 8001bb8:	0b2d      	lsrs	r5, r5, #12
 8001bba:	0d5b      	lsrs	r3, r3, #21
 8001bbc:	e7f0      	b.n	8001ba0 <__aeabi_i2d+0x3c>
 8001bbe:	46c0      	nop			; (mov r8, r8)
 8001bc0:	0000041e 	.word	0x0000041e

08001bc4 <__aeabi_ui2d>:
 8001bc4:	b510      	push	{r4, lr}
 8001bc6:	1e04      	subs	r4, r0, #0
 8001bc8:	d010      	beq.n	8001bec <__aeabi_ui2d+0x28>
 8001bca:	f000 f85f 	bl	8001c8c <__clzsi2>
 8001bce:	4b0f      	ldr	r3, [pc, #60]	; (8001c0c <__aeabi_ui2d+0x48>)
 8001bd0:	1a1b      	subs	r3, r3, r0
 8001bd2:	280a      	cmp	r0, #10
 8001bd4:	dc11      	bgt.n	8001bfa <__aeabi_ui2d+0x36>
 8001bd6:	220b      	movs	r2, #11
 8001bd8:	0021      	movs	r1, r4
 8001bda:	1a12      	subs	r2, r2, r0
 8001bdc:	40d1      	lsrs	r1, r2
 8001bde:	3015      	adds	r0, #21
 8001be0:	030a      	lsls	r2, r1, #12
 8001be2:	055b      	lsls	r3, r3, #21
 8001be4:	4084      	lsls	r4, r0
 8001be6:	0b12      	lsrs	r2, r2, #12
 8001be8:	0d5b      	lsrs	r3, r3, #21
 8001bea:	e001      	b.n	8001bf0 <__aeabi_ui2d+0x2c>
 8001bec:	2300      	movs	r3, #0
 8001bee:	2200      	movs	r2, #0
 8001bf0:	051b      	lsls	r3, r3, #20
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	0020      	movs	r0, r4
 8001bf6:	0019      	movs	r1, r3
 8001bf8:	bd10      	pop	{r4, pc}
 8001bfa:	0022      	movs	r2, r4
 8001bfc:	380b      	subs	r0, #11
 8001bfe:	4082      	lsls	r2, r0
 8001c00:	055b      	lsls	r3, r3, #21
 8001c02:	0312      	lsls	r2, r2, #12
 8001c04:	2400      	movs	r4, #0
 8001c06:	0b12      	lsrs	r2, r2, #12
 8001c08:	0d5b      	lsrs	r3, r3, #21
 8001c0a:	e7f1      	b.n	8001bf0 <__aeabi_ui2d+0x2c>
 8001c0c:	0000041e 	.word	0x0000041e

08001c10 <__aeabi_cdrcmple>:
 8001c10:	4684      	mov	ip, r0
 8001c12:	1c10      	adds	r0, r2, #0
 8001c14:	4662      	mov	r2, ip
 8001c16:	468c      	mov	ip, r1
 8001c18:	1c19      	adds	r1, r3, #0
 8001c1a:	4663      	mov	r3, ip
 8001c1c:	e000      	b.n	8001c20 <__aeabi_cdcmpeq>
 8001c1e:	46c0      	nop			; (mov r8, r8)

08001c20 <__aeabi_cdcmpeq>:
 8001c20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001c22:	f000 f8ff 	bl	8001e24 <__ledf2>
 8001c26:	2800      	cmp	r0, #0
 8001c28:	d401      	bmi.n	8001c2e <__aeabi_cdcmpeq+0xe>
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	42c8      	cmn	r0, r1
 8001c2e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001c30 <__aeabi_dcmpeq>:
 8001c30:	b510      	push	{r4, lr}
 8001c32:	f000 f849 	bl	8001cc8 <__eqdf2>
 8001c36:	4240      	negs	r0, r0
 8001c38:	3001      	adds	r0, #1
 8001c3a:	bd10      	pop	{r4, pc}

08001c3c <__aeabi_dcmplt>:
 8001c3c:	b510      	push	{r4, lr}
 8001c3e:	f000 f8f1 	bl	8001e24 <__ledf2>
 8001c42:	2800      	cmp	r0, #0
 8001c44:	db01      	blt.n	8001c4a <__aeabi_dcmplt+0xe>
 8001c46:	2000      	movs	r0, #0
 8001c48:	bd10      	pop	{r4, pc}
 8001c4a:	2001      	movs	r0, #1
 8001c4c:	bd10      	pop	{r4, pc}
 8001c4e:	46c0      	nop			; (mov r8, r8)

08001c50 <__aeabi_dcmple>:
 8001c50:	b510      	push	{r4, lr}
 8001c52:	f000 f8e7 	bl	8001e24 <__ledf2>
 8001c56:	2800      	cmp	r0, #0
 8001c58:	dd01      	ble.n	8001c5e <__aeabi_dcmple+0xe>
 8001c5a:	2000      	movs	r0, #0
 8001c5c:	bd10      	pop	{r4, pc}
 8001c5e:	2001      	movs	r0, #1
 8001c60:	bd10      	pop	{r4, pc}
 8001c62:	46c0      	nop			; (mov r8, r8)

08001c64 <__aeabi_dcmpgt>:
 8001c64:	b510      	push	{r4, lr}
 8001c66:	f000 f86b 	bl	8001d40 <__gedf2>
 8001c6a:	2800      	cmp	r0, #0
 8001c6c:	dc01      	bgt.n	8001c72 <__aeabi_dcmpgt+0xe>
 8001c6e:	2000      	movs	r0, #0
 8001c70:	bd10      	pop	{r4, pc}
 8001c72:	2001      	movs	r0, #1
 8001c74:	bd10      	pop	{r4, pc}
 8001c76:	46c0      	nop			; (mov r8, r8)

08001c78 <__aeabi_dcmpge>:
 8001c78:	b510      	push	{r4, lr}
 8001c7a:	f000 f861 	bl	8001d40 <__gedf2>
 8001c7e:	2800      	cmp	r0, #0
 8001c80:	da01      	bge.n	8001c86 <__aeabi_dcmpge+0xe>
 8001c82:	2000      	movs	r0, #0
 8001c84:	bd10      	pop	{r4, pc}
 8001c86:	2001      	movs	r0, #1
 8001c88:	bd10      	pop	{r4, pc}
 8001c8a:	46c0      	nop			; (mov r8, r8)

08001c8c <__clzsi2>:
 8001c8c:	211c      	movs	r1, #28
 8001c8e:	2301      	movs	r3, #1
 8001c90:	041b      	lsls	r3, r3, #16
 8001c92:	4298      	cmp	r0, r3
 8001c94:	d301      	bcc.n	8001c9a <__clzsi2+0xe>
 8001c96:	0c00      	lsrs	r0, r0, #16
 8001c98:	3910      	subs	r1, #16
 8001c9a:	0a1b      	lsrs	r3, r3, #8
 8001c9c:	4298      	cmp	r0, r3
 8001c9e:	d301      	bcc.n	8001ca4 <__clzsi2+0x18>
 8001ca0:	0a00      	lsrs	r0, r0, #8
 8001ca2:	3908      	subs	r1, #8
 8001ca4:	091b      	lsrs	r3, r3, #4
 8001ca6:	4298      	cmp	r0, r3
 8001ca8:	d301      	bcc.n	8001cae <__clzsi2+0x22>
 8001caa:	0900      	lsrs	r0, r0, #4
 8001cac:	3904      	subs	r1, #4
 8001cae:	a202      	add	r2, pc, #8	; (adr r2, 8001cb8 <__clzsi2+0x2c>)
 8001cb0:	5c10      	ldrb	r0, [r2, r0]
 8001cb2:	1840      	adds	r0, r0, r1
 8001cb4:	4770      	bx	lr
 8001cb6:	46c0      	nop			; (mov r8, r8)
 8001cb8:	02020304 	.word	0x02020304
 8001cbc:	01010101 	.word	0x01010101
	...

08001cc8 <__eqdf2>:
 8001cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cca:	464f      	mov	r7, r9
 8001ccc:	4646      	mov	r6, r8
 8001cce:	46d6      	mov	lr, sl
 8001cd0:	4694      	mov	ip, r2
 8001cd2:	4691      	mov	r9, r2
 8001cd4:	031a      	lsls	r2, r3, #12
 8001cd6:	0b12      	lsrs	r2, r2, #12
 8001cd8:	4d18      	ldr	r5, [pc, #96]	; (8001d3c <__eqdf2+0x74>)
 8001cda:	b5c0      	push	{r6, r7, lr}
 8001cdc:	004c      	lsls	r4, r1, #1
 8001cde:	030f      	lsls	r7, r1, #12
 8001ce0:	4692      	mov	sl, r2
 8001ce2:	005a      	lsls	r2, r3, #1
 8001ce4:	0006      	movs	r6, r0
 8001ce6:	4680      	mov	r8, r0
 8001ce8:	0b3f      	lsrs	r7, r7, #12
 8001cea:	2001      	movs	r0, #1
 8001cec:	0d64      	lsrs	r4, r4, #21
 8001cee:	0fc9      	lsrs	r1, r1, #31
 8001cf0:	0d52      	lsrs	r2, r2, #21
 8001cf2:	0fdb      	lsrs	r3, r3, #31
 8001cf4:	42ac      	cmp	r4, r5
 8001cf6:	d00a      	beq.n	8001d0e <__eqdf2+0x46>
 8001cf8:	42aa      	cmp	r2, r5
 8001cfa:	d003      	beq.n	8001d04 <__eqdf2+0x3c>
 8001cfc:	4294      	cmp	r4, r2
 8001cfe:	d101      	bne.n	8001d04 <__eqdf2+0x3c>
 8001d00:	4557      	cmp	r7, sl
 8001d02:	d00d      	beq.n	8001d20 <__eqdf2+0x58>
 8001d04:	bce0      	pop	{r5, r6, r7}
 8001d06:	46ba      	mov	sl, r7
 8001d08:	46b1      	mov	r9, r6
 8001d0a:	46a8      	mov	r8, r5
 8001d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d0e:	003d      	movs	r5, r7
 8001d10:	4335      	orrs	r5, r6
 8001d12:	d1f7      	bne.n	8001d04 <__eqdf2+0x3c>
 8001d14:	42a2      	cmp	r2, r4
 8001d16:	d1f5      	bne.n	8001d04 <__eqdf2+0x3c>
 8001d18:	4652      	mov	r2, sl
 8001d1a:	4665      	mov	r5, ip
 8001d1c:	432a      	orrs	r2, r5
 8001d1e:	d1f1      	bne.n	8001d04 <__eqdf2+0x3c>
 8001d20:	2001      	movs	r0, #1
 8001d22:	45c8      	cmp	r8, r9
 8001d24:	d1ee      	bne.n	8001d04 <__eqdf2+0x3c>
 8001d26:	4299      	cmp	r1, r3
 8001d28:	d006      	beq.n	8001d38 <__eqdf2+0x70>
 8001d2a:	2c00      	cmp	r4, #0
 8001d2c:	d1ea      	bne.n	8001d04 <__eqdf2+0x3c>
 8001d2e:	433e      	orrs	r6, r7
 8001d30:	0030      	movs	r0, r6
 8001d32:	1e46      	subs	r6, r0, #1
 8001d34:	41b0      	sbcs	r0, r6
 8001d36:	e7e5      	b.n	8001d04 <__eqdf2+0x3c>
 8001d38:	2000      	movs	r0, #0
 8001d3a:	e7e3      	b.n	8001d04 <__eqdf2+0x3c>
 8001d3c:	000007ff 	.word	0x000007ff

08001d40 <__gedf2>:
 8001d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d42:	464e      	mov	r6, r9
 8001d44:	4645      	mov	r5, r8
 8001d46:	4657      	mov	r7, sl
 8001d48:	46de      	mov	lr, fp
 8001d4a:	0004      	movs	r4, r0
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	b5e0      	push	{r5, r6, r7, lr}
 8001d50:	0016      	movs	r6, r2
 8001d52:	031b      	lsls	r3, r3, #12
 8001d54:	0b1b      	lsrs	r3, r3, #12
 8001d56:	4d32      	ldr	r5, [pc, #200]	; (8001e20 <__gedf2+0xe0>)
 8001d58:	030f      	lsls	r7, r1, #12
 8001d5a:	004a      	lsls	r2, r1, #1
 8001d5c:	4699      	mov	r9, r3
 8001d5e:	0043      	lsls	r3, r0, #1
 8001d60:	46a4      	mov	ip, r4
 8001d62:	46b0      	mov	r8, r6
 8001d64:	0b3f      	lsrs	r7, r7, #12
 8001d66:	0d52      	lsrs	r2, r2, #21
 8001d68:	0fc9      	lsrs	r1, r1, #31
 8001d6a:	0d5b      	lsrs	r3, r3, #21
 8001d6c:	0fc0      	lsrs	r0, r0, #31
 8001d6e:	42aa      	cmp	r2, r5
 8001d70:	d029      	beq.n	8001dc6 <__gedf2+0x86>
 8001d72:	42ab      	cmp	r3, r5
 8001d74:	d018      	beq.n	8001da8 <__gedf2+0x68>
 8001d76:	2a00      	cmp	r2, #0
 8001d78:	d12a      	bne.n	8001dd0 <__gedf2+0x90>
 8001d7a:	433c      	orrs	r4, r7
 8001d7c:	46a3      	mov	fp, r4
 8001d7e:	4265      	negs	r5, r4
 8001d80:	4165      	adcs	r5, r4
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d102      	bne.n	8001d8c <__gedf2+0x4c>
 8001d86:	464c      	mov	r4, r9
 8001d88:	4326      	orrs	r6, r4
 8001d8a:	d027      	beq.n	8001ddc <__gedf2+0x9c>
 8001d8c:	2d00      	cmp	r5, #0
 8001d8e:	d115      	bne.n	8001dbc <__gedf2+0x7c>
 8001d90:	4281      	cmp	r1, r0
 8001d92:	d028      	beq.n	8001de6 <__gedf2+0xa6>
 8001d94:	2002      	movs	r0, #2
 8001d96:	3901      	subs	r1, #1
 8001d98:	4008      	ands	r0, r1
 8001d9a:	3801      	subs	r0, #1
 8001d9c:	bcf0      	pop	{r4, r5, r6, r7}
 8001d9e:	46bb      	mov	fp, r7
 8001da0:	46b2      	mov	sl, r6
 8001da2:	46a9      	mov	r9, r5
 8001da4:	46a0      	mov	r8, r4
 8001da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001da8:	464d      	mov	r5, r9
 8001daa:	432e      	orrs	r6, r5
 8001dac:	d12f      	bne.n	8001e0e <__gedf2+0xce>
 8001dae:	2a00      	cmp	r2, #0
 8001db0:	d1ee      	bne.n	8001d90 <__gedf2+0x50>
 8001db2:	433c      	orrs	r4, r7
 8001db4:	4265      	negs	r5, r4
 8001db6:	4165      	adcs	r5, r4
 8001db8:	2d00      	cmp	r5, #0
 8001dba:	d0e9      	beq.n	8001d90 <__gedf2+0x50>
 8001dbc:	2800      	cmp	r0, #0
 8001dbe:	d1ed      	bne.n	8001d9c <__gedf2+0x5c>
 8001dc0:	2001      	movs	r0, #1
 8001dc2:	4240      	negs	r0, r0
 8001dc4:	e7ea      	b.n	8001d9c <__gedf2+0x5c>
 8001dc6:	003d      	movs	r5, r7
 8001dc8:	4325      	orrs	r5, r4
 8001dca:	d120      	bne.n	8001e0e <__gedf2+0xce>
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d0eb      	beq.n	8001da8 <__gedf2+0x68>
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d1dd      	bne.n	8001d90 <__gedf2+0x50>
 8001dd4:	464c      	mov	r4, r9
 8001dd6:	4326      	orrs	r6, r4
 8001dd8:	d1da      	bne.n	8001d90 <__gedf2+0x50>
 8001dda:	e7db      	b.n	8001d94 <__gedf2+0x54>
 8001ddc:	465b      	mov	r3, fp
 8001dde:	2000      	movs	r0, #0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d0db      	beq.n	8001d9c <__gedf2+0x5c>
 8001de4:	e7d6      	b.n	8001d94 <__gedf2+0x54>
 8001de6:	429a      	cmp	r2, r3
 8001de8:	dc0a      	bgt.n	8001e00 <__gedf2+0xc0>
 8001dea:	dbe7      	blt.n	8001dbc <__gedf2+0x7c>
 8001dec:	454f      	cmp	r7, r9
 8001dee:	d8d1      	bhi.n	8001d94 <__gedf2+0x54>
 8001df0:	d010      	beq.n	8001e14 <__gedf2+0xd4>
 8001df2:	2000      	movs	r0, #0
 8001df4:	454f      	cmp	r7, r9
 8001df6:	d2d1      	bcs.n	8001d9c <__gedf2+0x5c>
 8001df8:	2900      	cmp	r1, #0
 8001dfa:	d0e1      	beq.n	8001dc0 <__gedf2+0x80>
 8001dfc:	0008      	movs	r0, r1
 8001dfe:	e7cd      	b.n	8001d9c <__gedf2+0x5c>
 8001e00:	4243      	negs	r3, r0
 8001e02:	4158      	adcs	r0, r3
 8001e04:	2302      	movs	r3, #2
 8001e06:	4240      	negs	r0, r0
 8001e08:	4018      	ands	r0, r3
 8001e0a:	3801      	subs	r0, #1
 8001e0c:	e7c6      	b.n	8001d9c <__gedf2+0x5c>
 8001e0e:	2002      	movs	r0, #2
 8001e10:	4240      	negs	r0, r0
 8001e12:	e7c3      	b.n	8001d9c <__gedf2+0x5c>
 8001e14:	45c4      	cmp	ip, r8
 8001e16:	d8bd      	bhi.n	8001d94 <__gedf2+0x54>
 8001e18:	2000      	movs	r0, #0
 8001e1a:	45c4      	cmp	ip, r8
 8001e1c:	d2be      	bcs.n	8001d9c <__gedf2+0x5c>
 8001e1e:	e7eb      	b.n	8001df8 <__gedf2+0xb8>
 8001e20:	000007ff 	.word	0x000007ff

08001e24 <__ledf2>:
 8001e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e26:	464e      	mov	r6, r9
 8001e28:	4645      	mov	r5, r8
 8001e2a:	4657      	mov	r7, sl
 8001e2c:	46de      	mov	lr, fp
 8001e2e:	0004      	movs	r4, r0
 8001e30:	0018      	movs	r0, r3
 8001e32:	b5e0      	push	{r5, r6, r7, lr}
 8001e34:	0016      	movs	r6, r2
 8001e36:	031b      	lsls	r3, r3, #12
 8001e38:	0b1b      	lsrs	r3, r3, #12
 8001e3a:	4d31      	ldr	r5, [pc, #196]	; (8001f00 <__ledf2+0xdc>)
 8001e3c:	030f      	lsls	r7, r1, #12
 8001e3e:	004a      	lsls	r2, r1, #1
 8001e40:	4699      	mov	r9, r3
 8001e42:	0043      	lsls	r3, r0, #1
 8001e44:	46a4      	mov	ip, r4
 8001e46:	46b0      	mov	r8, r6
 8001e48:	0b3f      	lsrs	r7, r7, #12
 8001e4a:	0d52      	lsrs	r2, r2, #21
 8001e4c:	0fc9      	lsrs	r1, r1, #31
 8001e4e:	0d5b      	lsrs	r3, r3, #21
 8001e50:	0fc0      	lsrs	r0, r0, #31
 8001e52:	42aa      	cmp	r2, r5
 8001e54:	d011      	beq.n	8001e7a <__ledf2+0x56>
 8001e56:	42ab      	cmp	r3, r5
 8001e58:	d014      	beq.n	8001e84 <__ledf2+0x60>
 8001e5a:	2a00      	cmp	r2, #0
 8001e5c:	d12f      	bne.n	8001ebe <__ledf2+0x9a>
 8001e5e:	433c      	orrs	r4, r7
 8001e60:	46a3      	mov	fp, r4
 8001e62:	4265      	negs	r5, r4
 8001e64:	4165      	adcs	r5, r4
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d114      	bne.n	8001e94 <__ledf2+0x70>
 8001e6a:	464c      	mov	r4, r9
 8001e6c:	4326      	orrs	r6, r4
 8001e6e:	d111      	bne.n	8001e94 <__ledf2+0x70>
 8001e70:	465b      	mov	r3, fp
 8001e72:	2000      	movs	r0, #0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d017      	beq.n	8001ea8 <__ledf2+0x84>
 8001e78:	e010      	b.n	8001e9c <__ledf2+0x78>
 8001e7a:	003d      	movs	r5, r7
 8001e7c:	4325      	orrs	r5, r4
 8001e7e:	d112      	bne.n	8001ea6 <__ledf2+0x82>
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d11c      	bne.n	8001ebe <__ledf2+0x9a>
 8001e84:	464d      	mov	r5, r9
 8001e86:	432e      	orrs	r6, r5
 8001e88:	d10d      	bne.n	8001ea6 <__ledf2+0x82>
 8001e8a:	2a00      	cmp	r2, #0
 8001e8c:	d104      	bne.n	8001e98 <__ledf2+0x74>
 8001e8e:	433c      	orrs	r4, r7
 8001e90:	4265      	negs	r5, r4
 8001e92:	4165      	adcs	r5, r4
 8001e94:	2d00      	cmp	r5, #0
 8001e96:	d10d      	bne.n	8001eb4 <__ledf2+0x90>
 8001e98:	4281      	cmp	r1, r0
 8001e9a:	d016      	beq.n	8001eca <__ledf2+0xa6>
 8001e9c:	2002      	movs	r0, #2
 8001e9e:	3901      	subs	r1, #1
 8001ea0:	4008      	ands	r0, r1
 8001ea2:	3801      	subs	r0, #1
 8001ea4:	e000      	b.n	8001ea8 <__ledf2+0x84>
 8001ea6:	2002      	movs	r0, #2
 8001ea8:	bcf0      	pop	{r4, r5, r6, r7}
 8001eaa:	46bb      	mov	fp, r7
 8001eac:	46b2      	mov	sl, r6
 8001eae:	46a9      	mov	r9, r5
 8001eb0:	46a0      	mov	r8, r4
 8001eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001eb4:	2800      	cmp	r0, #0
 8001eb6:	d1f7      	bne.n	8001ea8 <__ledf2+0x84>
 8001eb8:	2001      	movs	r0, #1
 8001eba:	4240      	negs	r0, r0
 8001ebc:	e7f4      	b.n	8001ea8 <__ledf2+0x84>
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d1ea      	bne.n	8001e98 <__ledf2+0x74>
 8001ec2:	464c      	mov	r4, r9
 8001ec4:	4326      	orrs	r6, r4
 8001ec6:	d1e7      	bne.n	8001e98 <__ledf2+0x74>
 8001ec8:	e7e8      	b.n	8001e9c <__ledf2+0x78>
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	dd06      	ble.n	8001edc <__ledf2+0xb8>
 8001ece:	4243      	negs	r3, r0
 8001ed0:	4158      	adcs	r0, r3
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	4240      	negs	r0, r0
 8001ed6:	4018      	ands	r0, r3
 8001ed8:	3801      	subs	r0, #1
 8001eda:	e7e5      	b.n	8001ea8 <__ledf2+0x84>
 8001edc:	429a      	cmp	r2, r3
 8001ede:	dbe9      	blt.n	8001eb4 <__ledf2+0x90>
 8001ee0:	454f      	cmp	r7, r9
 8001ee2:	d8db      	bhi.n	8001e9c <__ledf2+0x78>
 8001ee4:	d006      	beq.n	8001ef4 <__ledf2+0xd0>
 8001ee6:	2000      	movs	r0, #0
 8001ee8:	454f      	cmp	r7, r9
 8001eea:	d2dd      	bcs.n	8001ea8 <__ledf2+0x84>
 8001eec:	2900      	cmp	r1, #0
 8001eee:	d0e3      	beq.n	8001eb8 <__ledf2+0x94>
 8001ef0:	0008      	movs	r0, r1
 8001ef2:	e7d9      	b.n	8001ea8 <__ledf2+0x84>
 8001ef4:	45c4      	cmp	ip, r8
 8001ef6:	d8d1      	bhi.n	8001e9c <__ledf2+0x78>
 8001ef8:	2000      	movs	r0, #0
 8001efa:	45c4      	cmp	ip, r8
 8001efc:	d2d4      	bcs.n	8001ea8 <__ledf2+0x84>
 8001efe:	e7f5      	b.n	8001eec <__ledf2+0xc8>
 8001f00:	000007ff 	.word	0x000007ff

08001f04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f04:	b590      	push	{r4, r7, lr}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f0a:	f000 fdb3 	bl	8002a74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f0e:	f000 f8cd 	bl	80020ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f12:	f000 fa3d 	bl	8002390 <MX_GPIO_Init>
  MX_ADC_Init();
 8001f16:	f000 f935 	bl	8002184 <MX_ADC_Init>
  MX_USART1_UART_Init();
 8001f1a:	f000 fa01 	bl	8002320 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001f1e:	f000 f98d 	bl	800223c <MX_I2C1_Init>
  MX_RTC_Init();
 8001f22:	f000 f9cb 	bl	80022bc <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  // initialize sensors
  HAL_ADCEx_Calibration_Start(&hadc);
 8001f26:	4b56      	ldr	r3, [pc, #344]	; (8002080 <main+0x17c>)
 8001f28:	0018      	movs	r0, r3
 8001f2a:	f001 f9f5 	bl	8003318 <HAL_ADCEx_Calibration_Start>
  CCS811_begin();
 8001f2e:	f000 faa1 	bl	8002474 <CCS811_begin>
  SHT30_begin();
 8001f32:	f000 faf1 	bl	8002518 <SHT30_begin>

  // initialize uart rx
  HAL_UART_Receive_IT(&huart1, uart_recv, 1);
 8001f36:	4953      	ldr	r1, [pc, #332]	; (8002084 <main+0x180>)
 8001f38:	4b53      	ldr	r3, [pc, #332]	; (8002088 <main+0x184>)
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	0018      	movs	r0, r3
 8001f3e:	f003 fe71 	bl	8005c24 <HAL_UART_Receive_IT>
  //
  //
  //

  // hard code
  strcpy(setpoints.name, "demo");
 8001f42:	4b52      	ldr	r3, [pc, #328]	; (800208c <main+0x188>)
 8001f44:	4a52      	ldr	r2, [pc, #328]	; (8002090 <main+0x18c>)
 8001f46:	6811      	ldr	r1, [r2, #0]
 8001f48:	6019      	str	r1, [r3, #0]
 8001f4a:	7912      	ldrb	r2, [r2, #4]
 8001f4c:	711a      	strb	r2, [r3, #4]
  setpoints.air = 550;
 8001f4e:	4b4f      	ldr	r3, [pc, #316]	; (800208c <main+0x188>)
 8001f50:	2280      	movs	r2, #128	; 0x80
 8001f52:	4950      	ldr	r1, [pc, #320]	; (8002094 <main+0x190>)
 8001f54:	5299      	strh	r1, [r3, r2]
  setpoints.light = 24;
 8001f56:	4b4d      	ldr	r3, [pc, #308]	; (800208c <main+0x188>)
 8001f58:	2284      	movs	r2, #132	; 0x84
 8001f5a:	2118      	movs	r1, #24
 8001f5c:	5299      	strh	r1, [r3, r2]
  setpoints.heat = 81;
 8001f5e:	4b4b      	ldr	r3, [pc, #300]	; (800208c <main+0x188>)
 8001f60:	2282      	movs	r2, #130	; 0x82
 8001f62:	2151      	movs	r1, #81	; 0x51
 8001f64:	5299      	strh	r1, [r3, r2]
  setpoints.water = 60;
 8001f66:	4b49      	ldr	r3, [pc, #292]	; (800208c <main+0x188>)
 8001f68:	2286      	movs	r2, #134	; 0x86
 8001f6a:	213c      	movs	r1, #60	; 0x3c
 8001f6c:	5299      	strh	r1, [r3, r2]
  enable_auto = 1;
 8001f6e:	4b4a      	ldr	r3, [pc, #296]	; (8002098 <main+0x194>)
 8001f70:	2201      	movs	r2, #1
 8001f72:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//    HAL_IWDG_Refresh(&hiwdg); // must refresh every 1/(40kHz/32/4096) seconds
    HAL_Delay(1000);
 8001f74:	23fa      	movs	r3, #250	; 0xfa
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	0018      	movs	r0, r3
 8001f7a:	f000 fddf 	bl	8002b3c <HAL_Delay>
    HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8001f7e:	4947      	ldr	r1, [pc, #284]	; (800209c <main+0x198>)
 8001f80:	4b47      	ldr	r3, [pc, #284]	; (80020a0 <main+0x19c>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	0018      	movs	r0, r3
 8001f86:	f003 faf9 	bl	800557c <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &data, RTC_FORMAT_BIN);
 8001f8a:	4946      	ldr	r1, [pc, #280]	; (80020a4 <main+0x1a0>)
 8001f8c:	4b44      	ldr	r3, [pc, #272]	; (80020a0 <main+0x19c>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	0018      	movs	r0, r3
 8001f92:	f003 fb51 	bl	8005638 <HAL_RTC_GetDate>
    // read sensors
    uint16_t hours = time.Hours;
 8001f96:	4b41      	ldr	r3, [pc, #260]	; (800209c <main+0x198>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	b2da      	uxtb	r2, r3
 8001f9c:	1dbb      	adds	r3, r7, #6
 8001f9e:	801a      	strh	r2, [r3, #0]
    uint16_t moisture = EK1940_get_moisture();
 8001fa0:	1d3c      	adds	r4, r7, #4
 8001fa2:	f000 fb1d 	bl	80025e0 <EK1940_get_moisture>
 8001fa6:	0003      	movs	r3, r0
 8001fa8:	8023      	strh	r3, [r4, #0]
    uint16_t co2 = CCS811_get_eCO2();
 8001faa:	1cbc      	adds	r4, r7, #2
 8001fac:	f000 fa90 	bl	80024d0 <CCS811_get_eCO2>
 8001fb0:	0003      	movs	r3, r0
 8001fb2:	8023      	strh	r3, [r4, #0]
    uint16_t temp = SHT30_get_temp();
 8001fb4:	003c      	movs	r4, r7
 8001fb6:	f000 fab5 	bl	8002524 <SHT30_get_temp>
 8001fba:	0003      	movs	r3, r0
 8001fbc:	8023      	strh	r3, [r4, #0]

    conditions.air = co2;
 8001fbe:	4b3a      	ldr	r3, [pc, #232]	; (80020a8 <main+0x1a4>)
 8001fc0:	1cba      	adds	r2, r7, #2
 8001fc2:	2180      	movs	r1, #128	; 0x80
 8001fc4:	8812      	ldrh	r2, [r2, #0]
 8001fc6:	525a      	strh	r2, [r3, r1]
    conditions.heat = temp;
 8001fc8:	4b37      	ldr	r3, [pc, #220]	; (80020a8 <main+0x1a4>)
 8001fca:	003a      	movs	r2, r7
 8001fcc:	2182      	movs	r1, #130	; 0x82
 8001fce:	8812      	ldrh	r2, [r2, #0]
 8001fd0:	525a      	strh	r2, [r3, r1]
    conditions.water = moisture;
 8001fd2:	4b35      	ldr	r3, [pc, #212]	; (80020a8 <main+0x1a4>)
 8001fd4:	1d3a      	adds	r2, r7, #4
 8001fd6:	2184      	movs	r1, #132	; 0x84
 8001fd8:	8812      	ldrh	r2, [r2, #0]
 8001fda:	525a      	strh	r2, [r3, r1]

    if (enable_auto)
 8001fdc:	4b2e      	ldr	r3, [pc, #184]	; (8002098 <main+0x194>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d0c6      	beq.n	8001f74 <main+0x70>
    {
      memcpy(conditions.name, setpoints.name, 128);
 8001fe6:	4a30      	ldr	r2, [pc, #192]	; (80020a8 <main+0x1a4>)
 8001fe8:	4b28      	ldr	r3, [pc, #160]	; (800208c <main+0x188>)
 8001fea:	0010      	movs	r0, r2
 8001fec:	0019      	movs	r1, r3
 8001fee:	2380      	movs	r3, #128	; 0x80
 8001ff0:	001a      	movs	r2, r3
 8001ff2:	f004 fffd 	bl	8006ff0 <memcpy>
      HAL_GPIO_WritePin(light_GPIO_Port,  light_Pin,  (hours < setpoints.light));
 8001ff6:	4b25      	ldr	r3, [pc, #148]	; (800208c <main+0x188>)
 8001ff8:	2284      	movs	r2, #132	; 0x84
 8001ffa:	5a9b      	ldrh	r3, [r3, r2]
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	1dba      	adds	r2, r7, #6
 8002000:	8812      	ldrh	r2, [r2, #0]
 8002002:	429a      	cmp	r2, r3
 8002004:	419b      	sbcs	r3, r3
 8002006:	425b      	negs	r3, r3
 8002008:	b2db      	uxtb	r3, r3
 800200a:	001a      	movs	r2, r3
 800200c:	2390      	movs	r3, #144	; 0x90
 800200e:	05db      	lsls	r3, r3, #23
 8002010:	2140      	movs	r1, #64	; 0x40
 8002012:	0018      	movs	r0, r3
 8002014:	f001 fcfc 	bl	8003a10 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(air_GPIO_Port,    air_Pin,    (co2 < setpoints.air));
 8002018:	4b1c      	ldr	r3, [pc, #112]	; (800208c <main+0x188>)
 800201a:	2280      	movs	r2, #128	; 0x80
 800201c:	5a9b      	ldrh	r3, [r3, r2]
 800201e:	b29b      	uxth	r3, r3
 8002020:	1cba      	adds	r2, r7, #2
 8002022:	8812      	ldrh	r2, [r2, #0]
 8002024:	429a      	cmp	r2, r3
 8002026:	419b      	sbcs	r3, r3
 8002028:	425b      	negs	r3, r3
 800202a:	b2db      	uxtb	r3, r3
 800202c:	001a      	movs	r2, r3
 800202e:	2390      	movs	r3, #144	; 0x90
 8002030:	05db      	lsls	r3, r3, #23
 8002032:	2180      	movs	r1, #128	; 0x80
 8002034:	0018      	movs	r0, r3
 8002036:	f001 fceb 	bl	8003a10 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(heat_GPIO_Port,   heat_Pin,   (temp < setpoints.heat));
 800203a:	4b14      	ldr	r3, [pc, #80]	; (800208c <main+0x188>)
 800203c:	2282      	movs	r2, #130	; 0x82
 800203e:	5a9b      	ldrh	r3, [r3, r2]
 8002040:	b29b      	uxth	r3, r3
 8002042:	003a      	movs	r2, r7
 8002044:	8812      	ldrh	r2, [r2, #0]
 8002046:	429a      	cmp	r2, r3
 8002048:	419b      	sbcs	r3, r3
 800204a:	425b      	negs	r3, r3
 800204c:	b2db      	uxtb	r3, r3
 800204e:	001a      	movs	r2, r3
 8002050:	2390      	movs	r3, #144	; 0x90
 8002052:	05db      	lsls	r3, r3, #23
 8002054:	2110      	movs	r1, #16
 8002056:	0018      	movs	r0, r3
 8002058:	f001 fcda 	bl	8003a10 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(water_GPIO_Port,  water_Pin,  (moisture < setpoints.water));
 800205c:	4b0b      	ldr	r3, [pc, #44]	; (800208c <main+0x188>)
 800205e:	2286      	movs	r2, #134	; 0x86
 8002060:	5a9b      	ldrh	r3, [r3, r2]
 8002062:	b29b      	uxth	r3, r3
 8002064:	1d3a      	adds	r2, r7, #4
 8002066:	8812      	ldrh	r2, [r2, #0]
 8002068:	429a      	cmp	r2, r3
 800206a:	419b      	sbcs	r3, r3
 800206c:	425b      	negs	r3, r3
 800206e:	b2db      	uxtb	r3, r3
 8002070:	001a      	movs	r2, r3
 8002072:	2390      	movs	r3, #144	; 0x90
 8002074:	05db      	lsls	r3, r3, #23
 8002076:	2120      	movs	r1, #32
 8002078:	0018      	movs	r0, r3
 800207a:	f001 fcc9 	bl	8003a10 <HAL_GPIO_WritePin>
  {
 800207e:	e779      	b.n	8001f74 <main+0x70>
 8002080:	200002c4 	.word	0x200002c4
 8002084:	20000028 	.word	0x20000028
 8002088:	20000220 	.word	0x20000220
 800208c:	20000130 	.word	0x20000130
 8002090:	0800702c 	.word	0x0800702c
 8002094:	00000226 	.word	0x00000226
 8002098:	200001b8 	.word	0x200001b8
 800209c:	200001bc 	.word	0x200001bc
 80020a0:	200002a4 	.word	0x200002a4
 80020a4:	200001d0 	.word	0x200001d0
 80020a8:	200000a8 	.word	0x200000a8

080020ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020ac:	b590      	push	{r4, r7, lr}
 80020ae:	b099      	sub	sp, #100	; 0x64
 80020b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020b2:	242c      	movs	r4, #44	; 0x2c
 80020b4:	193b      	adds	r3, r7, r4
 80020b6:	0018      	movs	r0, r3
 80020b8:	2334      	movs	r3, #52	; 0x34
 80020ba:	001a      	movs	r2, r3
 80020bc:	2100      	movs	r1, #0
 80020be:	f004 ffa0 	bl	8007002 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020c2:	231c      	movs	r3, #28
 80020c4:	18fb      	adds	r3, r7, r3
 80020c6:	0018      	movs	r0, r3
 80020c8:	2310      	movs	r3, #16
 80020ca:	001a      	movs	r2, r3
 80020cc:	2100      	movs	r1, #0
 80020ce:	f004 ff98 	bl	8007002 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020d2:	003b      	movs	r3, r7
 80020d4:	0018      	movs	r0, r3
 80020d6:	231c      	movs	r3, #28
 80020d8:	001a      	movs	r2, r3
 80020da:	2100      	movs	r1, #0
 80020dc:	f004 ff91 	bl	8007002 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 80020e0:	0021      	movs	r1, r4
 80020e2:	187b      	adds	r3, r7, r1
 80020e4:	223a      	movs	r2, #58	; 0x3a
 80020e6:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020e8:	187b      	adds	r3, r7, r1
 80020ea:	2201      	movs	r2, #1
 80020ec:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80020ee:	187b      	adds	r3, r7, r1
 80020f0:	2201      	movs	r2, #1
 80020f2:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80020f4:	187b      	adds	r3, r7, r1
 80020f6:	2201      	movs	r2, #1
 80020f8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80020fa:	187b      	adds	r3, r7, r1
 80020fc:	2210      	movs	r2, #16
 80020fe:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8002100:	187b      	adds	r3, r7, r1
 8002102:	2210      	movs	r2, #16
 8002104:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002106:	187b      	adds	r3, r7, r1
 8002108:	2201      	movs	r2, #1
 800210a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800210c:	187b      	adds	r3, r7, r1
 800210e:	2200      	movs	r2, #0
 8002110:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002112:	187b      	adds	r3, r7, r1
 8002114:	0018      	movs	r0, r3
 8002116:	f002 fb9d 	bl	8004854 <HAL_RCC_OscConfig>
 800211a:	1e03      	subs	r3, r0, #0
 800211c:	d001      	beq.n	8002122 <SystemClock_Config+0x76>
  {
    Error_Handler();
 800211e:	f000 fb0b 	bl	8002738 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002122:	211c      	movs	r1, #28
 8002124:	187b      	adds	r3, r7, r1
 8002126:	2207      	movs	r2, #7
 8002128:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 800212a:	187b      	adds	r3, r7, r1
 800212c:	2203      	movs	r2, #3
 800212e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002130:	187b      	adds	r3, r7, r1
 8002132:	2200      	movs	r2, #0
 8002134:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002136:	187b      	adds	r3, r7, r1
 8002138:	2200      	movs	r2, #0
 800213a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800213c:	187b      	adds	r3, r7, r1
 800213e:	2101      	movs	r1, #1
 8002140:	0018      	movs	r0, r3
 8002142:	f002 ff0d 	bl	8004f60 <HAL_RCC_ClockConfig>
 8002146:	1e03      	subs	r3, r0, #0
 8002148:	d001      	beq.n	800214e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800214a:	f000 faf5 	bl	8002738 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 800214e:	003b      	movs	r3, r7
 8002150:	4a0b      	ldr	r2, [pc, #44]	; (8002180 <SystemClock_Config+0xd4>)
 8002152:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002154:	003b      	movs	r3, r7
 8002156:	2200      	movs	r2, #0
 8002158:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800215a:	003b      	movs	r3, r7
 800215c:	2200      	movs	r2, #0
 800215e:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002160:	003b      	movs	r3, r7
 8002162:	2280      	movs	r2, #128	; 0x80
 8002164:	0092      	lsls	r2, r2, #2
 8002166:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002168:	003b      	movs	r3, r7
 800216a:	0018      	movs	r0, r3
 800216c:	f003 f872 	bl	8005254 <HAL_RCCEx_PeriphCLKConfig>
 8002170:	1e03      	subs	r3, r0, #0
 8002172:	d001      	beq.n	8002178 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8002174:	f000 fae0 	bl	8002738 <Error_Handler>
  }
}
 8002178:	46c0      	nop			; (mov r8, r8)
 800217a:	46bd      	mov	sp, r7
 800217c:	b019      	add	sp, #100	; 0x64
 800217e:	bd90      	pop	{r4, r7, pc}
 8002180:	00010021 	.word	0x00010021

08002184 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800218a:	1d3b      	adds	r3, r7, #4
 800218c:	0018      	movs	r0, r3
 800218e:	230c      	movs	r3, #12
 8002190:	001a      	movs	r2, r3
 8002192:	2100      	movs	r1, #0
 8002194:	f004 ff35 	bl	8007002 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002198:	4b26      	ldr	r3, [pc, #152]	; (8002234 <MX_ADC_Init+0xb0>)
 800219a:	4a27      	ldr	r2, [pc, #156]	; (8002238 <MX_ADC_Init+0xb4>)
 800219c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800219e:	4b25      	ldr	r3, [pc, #148]	; (8002234 <MX_ADC_Init+0xb0>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_8B;
 80021a4:	4b23      	ldr	r3, [pc, #140]	; (8002234 <MX_ADC_Init+0xb0>)
 80021a6:	2210      	movs	r2, #16
 80021a8:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80021aa:	4b22      	ldr	r3, [pc, #136]	; (8002234 <MX_ADC_Init+0xb0>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80021b0:	4b20      	ldr	r3, [pc, #128]	; (8002234 <MX_ADC_Init+0xb0>)
 80021b2:	2201      	movs	r2, #1
 80021b4:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80021b6:	4b1f      	ldr	r3, [pc, #124]	; (8002234 <MX_ADC_Init+0xb0>)
 80021b8:	2204      	movs	r2, #4
 80021ba:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80021bc:	4b1d      	ldr	r3, [pc, #116]	; (8002234 <MX_ADC_Init+0xb0>)
 80021be:	2200      	movs	r2, #0
 80021c0:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80021c2:	4b1c      	ldr	r3, [pc, #112]	; (8002234 <MX_ADC_Init+0xb0>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80021c8:	4b1a      	ldr	r3, [pc, #104]	; (8002234 <MX_ADC_Init+0xb0>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80021ce:	4b19      	ldr	r3, [pc, #100]	; (8002234 <MX_ADC_Init+0xb0>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80021d4:	4b17      	ldr	r3, [pc, #92]	; (8002234 <MX_ADC_Init+0xb0>)
 80021d6:	22c2      	movs	r2, #194	; 0xc2
 80021d8:	32ff      	adds	r2, #255	; 0xff
 80021da:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80021dc:	4b15      	ldr	r3, [pc, #84]	; (8002234 <MX_ADC_Init+0xb0>)
 80021de:	2200      	movs	r2, #0
 80021e0:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80021e2:	4b14      	ldr	r3, [pc, #80]	; (8002234 <MX_ADC_Init+0xb0>)
 80021e4:	2224      	movs	r2, #36	; 0x24
 80021e6:	2100      	movs	r1, #0
 80021e8:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80021ea:	4b12      	ldr	r3, [pc, #72]	; (8002234 <MX_ADC_Init+0xb0>)
 80021ec:	2201      	movs	r2, #1
 80021ee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80021f0:	4b10      	ldr	r3, [pc, #64]	; (8002234 <MX_ADC_Init+0xb0>)
 80021f2:	0018      	movs	r0, r3
 80021f4:	f000 fcc6 	bl	8002b84 <HAL_ADC_Init>
 80021f8:	1e03      	subs	r3, r0, #0
 80021fa:	d001      	beq.n	8002200 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80021fc:	f000 fa9c 	bl	8002738 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002200:	1d3b      	adds	r3, r7, #4
 8002202:	2200      	movs	r2, #0
 8002204:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002206:	1d3b      	adds	r3, r7, #4
 8002208:	2280      	movs	r2, #128	; 0x80
 800220a:	0152      	lsls	r2, r2, #5
 800220c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800220e:	1d3b      	adds	r3, r7, #4
 8002210:	2280      	movs	r2, #128	; 0x80
 8002212:	0552      	lsls	r2, r2, #21
 8002214:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002216:	1d3a      	adds	r2, r7, #4
 8002218:	4b06      	ldr	r3, [pc, #24]	; (8002234 <MX_ADC_Init+0xb0>)
 800221a:	0011      	movs	r1, r2
 800221c:	0018      	movs	r0, r3
 800221e:	f000 fee9 	bl	8002ff4 <HAL_ADC_ConfigChannel>
 8002222:	1e03      	subs	r3, r0, #0
 8002224:	d001      	beq.n	800222a <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8002226:	f000 fa87 	bl	8002738 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800222a:	46c0      	nop			; (mov r8, r8)
 800222c:	46bd      	mov	sp, r7
 800222e:	b004      	add	sp, #16
 8002230:	bd80      	pop	{r7, pc}
 8002232:	46c0      	nop			; (mov r8, r8)
 8002234:	200002c4 	.word	0x200002c4
 8002238:	40012400 	.word	0x40012400

0800223c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002240:	4b1b      	ldr	r3, [pc, #108]	; (80022b0 <MX_I2C1_Init+0x74>)
 8002242:	4a1c      	ldr	r2, [pc, #112]	; (80022b4 <MX_I2C1_Init+0x78>)
 8002244:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8002246:	4b1a      	ldr	r3, [pc, #104]	; (80022b0 <MX_I2C1_Init+0x74>)
 8002248:	4a1b      	ldr	r2, [pc, #108]	; (80022b8 <MX_I2C1_Init+0x7c>)
 800224a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800224c:	4b18      	ldr	r3, [pc, #96]	; (80022b0 <MX_I2C1_Init+0x74>)
 800224e:	2200      	movs	r2, #0
 8002250:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002252:	4b17      	ldr	r3, [pc, #92]	; (80022b0 <MX_I2C1_Init+0x74>)
 8002254:	2201      	movs	r2, #1
 8002256:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002258:	4b15      	ldr	r3, [pc, #84]	; (80022b0 <MX_I2C1_Init+0x74>)
 800225a:	2200      	movs	r2, #0
 800225c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800225e:	4b14      	ldr	r3, [pc, #80]	; (80022b0 <MX_I2C1_Init+0x74>)
 8002260:	2200      	movs	r2, #0
 8002262:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002264:	4b12      	ldr	r3, [pc, #72]	; (80022b0 <MX_I2C1_Init+0x74>)
 8002266:	2200      	movs	r2, #0
 8002268:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800226a:	4b11      	ldr	r3, [pc, #68]	; (80022b0 <MX_I2C1_Init+0x74>)
 800226c:	2200      	movs	r2, #0
 800226e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002270:	4b0f      	ldr	r3, [pc, #60]	; (80022b0 <MX_I2C1_Init+0x74>)
 8002272:	2200      	movs	r2, #0
 8002274:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002276:	4b0e      	ldr	r3, [pc, #56]	; (80022b0 <MX_I2C1_Init+0x74>)
 8002278:	0018      	movs	r0, r3
 800227a:	f001 fc01 	bl	8003a80 <HAL_I2C_Init>
 800227e:	1e03      	subs	r3, r0, #0
 8002280:	d001      	beq.n	8002286 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002282:	f000 fa59 	bl	8002738 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002286:	4b0a      	ldr	r3, [pc, #40]	; (80022b0 <MX_I2C1_Init+0x74>)
 8002288:	2100      	movs	r1, #0
 800228a:	0018      	movs	r0, r3
 800228c:	f002 fa4a 	bl	8004724 <HAL_I2CEx_ConfigAnalogFilter>
 8002290:	1e03      	subs	r3, r0, #0
 8002292:	d001      	beq.n	8002298 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002294:	f000 fa50 	bl	8002738 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002298:	4b05      	ldr	r3, [pc, #20]	; (80022b0 <MX_I2C1_Init+0x74>)
 800229a:	2100      	movs	r1, #0
 800229c:	0018      	movs	r0, r3
 800229e:	f002 fa8d 	bl	80047bc <HAL_I2CEx_ConfigDigitalFilter>
 80022a2:	1e03      	subs	r3, r0, #0
 80022a4:	d001      	beq.n	80022aa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80022a6:	f000 fa47 	bl	8002738 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80022aa:	46c0      	nop			; (mov r8, r8)
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	200001d4 	.word	0x200001d4
 80022b4:	40005400 	.word	0x40005400
 80022b8:	2000090e 	.word	0x2000090e

080022bc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80022c0:	4b15      	ldr	r3, [pc, #84]	; (8002318 <MX_RTC_Init+0x5c>)
 80022c2:	4a16      	ldr	r2, [pc, #88]	; (800231c <MX_RTC_Init+0x60>)
 80022c4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80022c6:	4b14      	ldr	r3, [pc, #80]	; (8002318 <MX_RTC_Init+0x5c>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80022cc:	4b12      	ldr	r3, [pc, #72]	; (8002318 <MX_RTC_Init+0x5c>)
 80022ce:	227f      	movs	r2, #127	; 0x7f
 80022d0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80022d2:	4b11      	ldr	r3, [pc, #68]	; (8002318 <MX_RTC_Init+0x5c>)
 80022d4:	22ff      	movs	r2, #255	; 0xff
 80022d6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80022d8:	4b0f      	ldr	r3, [pc, #60]	; (8002318 <MX_RTC_Init+0x5c>)
 80022da:	2200      	movs	r2, #0
 80022dc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80022de:	4b0e      	ldr	r3, [pc, #56]	; (8002318 <MX_RTC_Init+0x5c>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80022e4:	4b0c      	ldr	r3, [pc, #48]	; (8002318 <MX_RTC_Init+0x5c>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80022ea:	4b0b      	ldr	r3, [pc, #44]	; (8002318 <MX_RTC_Init+0x5c>)
 80022ec:	0018      	movs	r0, r3
 80022ee:	f003 f8b1 	bl	8005454 <HAL_RTC_Init>
 80022f2:	1e03      	subs	r3, r0, #0
 80022f4:	d001      	beq.n	80022fa <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80022f6:	f000 fa1f 	bl	8002738 <Error_Handler>
  }
  /** Enable Calibration
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_1HZ) != HAL_OK)
 80022fa:	2380      	movs	r3, #128	; 0x80
 80022fc:	031a      	lsls	r2, r3, #12
 80022fe:	4b06      	ldr	r3, [pc, #24]	; (8002318 <MX_RTC_Init+0x5c>)
 8002300:	0011      	movs	r1, r2
 8002302:	0018      	movs	r0, r3
 8002304:	f003 fa5c 	bl	80057c0 <HAL_RTCEx_SetCalibrationOutPut>
 8002308:	1e03      	subs	r3, r0, #0
 800230a:	d001      	beq.n	8002310 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 800230c:	f000 fa14 	bl	8002738 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002310:	46c0      	nop			; (mov r8, r8)
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	46c0      	nop			; (mov r8, r8)
 8002318:	200002a4 	.word	0x200002a4
 800231c:	40002800 	.word	0x40002800

08002320 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002324:	4b18      	ldr	r3, [pc, #96]	; (8002388 <MX_USART1_UART_Init+0x68>)
 8002326:	4a19      	ldr	r2, [pc, #100]	; (800238c <MX_USART1_UART_Init+0x6c>)
 8002328:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800232a:	4b17      	ldr	r3, [pc, #92]	; (8002388 <MX_USART1_UART_Init+0x68>)
 800232c:	2296      	movs	r2, #150	; 0x96
 800232e:	0192      	lsls	r2, r2, #6
 8002330:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002332:	4b15      	ldr	r3, [pc, #84]	; (8002388 <MX_USART1_UART_Init+0x68>)
 8002334:	2200      	movs	r2, #0
 8002336:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002338:	4b13      	ldr	r3, [pc, #76]	; (8002388 <MX_USART1_UART_Init+0x68>)
 800233a:	2200      	movs	r2, #0
 800233c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800233e:	4b12      	ldr	r3, [pc, #72]	; (8002388 <MX_USART1_UART_Init+0x68>)
 8002340:	2200      	movs	r2, #0
 8002342:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002344:	4b10      	ldr	r3, [pc, #64]	; (8002388 <MX_USART1_UART_Init+0x68>)
 8002346:	220c      	movs	r2, #12
 8002348:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800234a:	4b0f      	ldr	r3, [pc, #60]	; (8002388 <MX_USART1_UART_Init+0x68>)
 800234c:	2200      	movs	r2, #0
 800234e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002350:	4b0d      	ldr	r3, [pc, #52]	; (8002388 <MX_USART1_UART_Init+0x68>)
 8002352:	2200      	movs	r2, #0
 8002354:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002356:	4b0c      	ldr	r3, [pc, #48]	; (8002388 <MX_USART1_UART_Init+0x68>)
 8002358:	2200      	movs	r2, #0
 800235a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 800235c:	4b0a      	ldr	r3, [pc, #40]	; (8002388 <MX_USART1_UART_Init+0x68>)
 800235e:	2230      	movs	r2, #48	; 0x30
 8002360:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8002362:	4b09      	ldr	r3, [pc, #36]	; (8002388 <MX_USART1_UART_Init+0x68>)
 8002364:	2280      	movs	r2, #128	; 0x80
 8002366:	0152      	lsls	r2, r2, #5
 8002368:	639a      	str	r2, [r3, #56]	; 0x38
  huart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 800236a:	4b07      	ldr	r3, [pc, #28]	; (8002388 <MX_USART1_UART_Init+0x68>)
 800236c:	2280      	movs	r2, #128	; 0x80
 800236e:	0192      	lsls	r2, r2, #6
 8002370:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002372:	4b05      	ldr	r3, [pc, #20]	; (8002388 <MX_USART1_UART_Init+0x68>)
 8002374:	0018      	movs	r0, r3
 8002376:	f003 fa67 	bl	8005848 <HAL_UART_Init>
 800237a:	1e03      	subs	r3, r0, #0
 800237c:	d001      	beq.n	8002382 <MX_USART1_UART_Init+0x62>
  {
    Error_Handler();
 800237e:	f000 f9db 	bl	8002738 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002382:	46c0      	nop			; (mov r8, r8)
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	20000220 	.word	0x20000220
 800238c:	40013800 	.word	0x40013800

08002390 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002390:	b590      	push	{r4, r7, lr}
 8002392:	b089      	sub	sp, #36	; 0x24
 8002394:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002396:	240c      	movs	r4, #12
 8002398:	193b      	adds	r3, r7, r4
 800239a:	0018      	movs	r0, r3
 800239c:	2314      	movs	r3, #20
 800239e:	001a      	movs	r2, r3
 80023a0:	2100      	movs	r1, #0
 80023a2:	f004 fe2e 	bl	8007002 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023a6:	4b31      	ldr	r3, [pc, #196]	; (800246c <MX_GPIO_Init+0xdc>)
 80023a8:	695a      	ldr	r2, [r3, #20]
 80023aa:	4b30      	ldr	r3, [pc, #192]	; (800246c <MX_GPIO_Init+0xdc>)
 80023ac:	2180      	movs	r1, #128	; 0x80
 80023ae:	0309      	lsls	r1, r1, #12
 80023b0:	430a      	orrs	r2, r1
 80023b2:	615a      	str	r2, [r3, #20]
 80023b4:	4b2d      	ldr	r3, [pc, #180]	; (800246c <MX_GPIO_Init+0xdc>)
 80023b6:	695a      	ldr	r2, [r3, #20]
 80023b8:	2380      	movs	r3, #128	; 0x80
 80023ba:	031b      	lsls	r3, r3, #12
 80023bc:	4013      	ands	r3, r2
 80023be:	60bb      	str	r3, [r7, #8]
 80023c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023c2:	4b2a      	ldr	r3, [pc, #168]	; (800246c <MX_GPIO_Init+0xdc>)
 80023c4:	695a      	ldr	r2, [r3, #20]
 80023c6:	4b29      	ldr	r3, [pc, #164]	; (800246c <MX_GPIO_Init+0xdc>)
 80023c8:	2180      	movs	r1, #128	; 0x80
 80023ca:	0289      	lsls	r1, r1, #10
 80023cc:	430a      	orrs	r2, r1
 80023ce:	615a      	str	r2, [r3, #20]
 80023d0:	4b26      	ldr	r3, [pc, #152]	; (800246c <MX_GPIO_Init+0xdc>)
 80023d2:	695a      	ldr	r2, [r3, #20]
 80023d4:	2380      	movs	r3, #128	; 0x80
 80023d6:	029b      	lsls	r3, r3, #10
 80023d8:	4013      	ands	r3, r2
 80023da:	607b      	str	r3, [r7, #4]
 80023dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023de:	4b23      	ldr	r3, [pc, #140]	; (800246c <MX_GPIO_Init+0xdc>)
 80023e0:	695a      	ldr	r2, [r3, #20]
 80023e2:	4b22      	ldr	r3, [pc, #136]	; (800246c <MX_GPIO_Init+0xdc>)
 80023e4:	2180      	movs	r1, #128	; 0x80
 80023e6:	02c9      	lsls	r1, r1, #11
 80023e8:	430a      	orrs	r2, r1
 80023ea:	615a      	str	r2, [r3, #20]
 80023ec:	4b1f      	ldr	r3, [pc, #124]	; (800246c <MX_GPIO_Init+0xdc>)
 80023ee:	695a      	ldr	r2, [r3, #20]
 80023f0:	2380      	movs	r3, #128	; 0x80
 80023f2:	02db      	lsls	r3, r3, #11
 80023f4:	4013      	ands	r3, r2
 80023f6:	603b      	str	r3, [r7, #0]
 80023f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, heat_Pin|water_Pin|light_Pin|air_Pin, GPIO_PIN_RESET);
 80023fa:	2390      	movs	r3, #144	; 0x90
 80023fc:	05db      	lsls	r3, r3, #23
 80023fe:	2200      	movs	r2, #0
 8002400:	21f0      	movs	r1, #240	; 0xf0
 8002402:	0018      	movs	r0, r3
 8002404:	f001 fb04 	bl	8003a10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8002408:	23f0      	movs	r3, #240	; 0xf0
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	4818      	ldr	r0, [pc, #96]	; (8002470 <MX_GPIO_Init+0xe0>)
 800240e:	2200      	movs	r2, #0
 8002410:	0019      	movs	r1, r3
 8002412:	f001 fafd 	bl	8003a10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : heat_Pin water_Pin light_Pin air_Pin */
  GPIO_InitStruct.Pin = heat_Pin|water_Pin|light_Pin|air_Pin;
 8002416:	193b      	adds	r3, r7, r4
 8002418:	22f0      	movs	r2, #240	; 0xf0
 800241a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800241c:	193b      	adds	r3, r7, r4
 800241e:	2201      	movs	r2, #1
 8002420:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002422:	193b      	adds	r3, r7, r4
 8002424:	2200      	movs	r2, #0
 8002426:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002428:	193b      	adds	r3, r7, r4
 800242a:	2200      	movs	r2, #0
 800242c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800242e:	193a      	adds	r2, r7, r4
 8002430:	2390      	movs	r3, #144	; 0x90
 8002432:	05db      	lsls	r3, r3, #23
 8002434:	0011      	movs	r1, r2
 8002436:	0018      	movs	r0, r3
 8002438:	f001 f972 	bl	8003720 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800243c:	0021      	movs	r1, r4
 800243e:	187b      	adds	r3, r7, r1
 8002440:	22f0      	movs	r2, #240	; 0xf0
 8002442:	0092      	lsls	r2, r2, #2
 8002444:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002446:	187b      	adds	r3, r7, r1
 8002448:	2201      	movs	r2, #1
 800244a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244c:	187b      	adds	r3, r7, r1
 800244e:	2200      	movs	r2, #0
 8002450:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002452:	187b      	adds	r3, r7, r1
 8002454:	2200      	movs	r2, #0
 8002456:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002458:	187b      	adds	r3, r7, r1
 800245a:	4a05      	ldr	r2, [pc, #20]	; (8002470 <MX_GPIO_Init+0xe0>)
 800245c:	0019      	movs	r1, r3
 800245e:	0010      	movs	r0, r2
 8002460:	f001 f95e 	bl	8003720 <HAL_GPIO_Init>

}
 8002464:	46c0      	nop			; (mov r8, r8)
 8002466:	46bd      	mov	sp, r7
 8002468:	b009      	add	sp, #36	; 0x24
 800246a:	bd90      	pop	{r4, r7, pc}
 800246c:	40021000 	.word	0x40021000
 8002470:	48000800 	.word	0x48000800

08002474 <CCS811_begin>:

/* USER CODE BEGIN 4 */

static uint8_t CCS811_begin(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af04      	add	r7, sp, #16
  uint8_t byte_buffer = CCS811_BOOTLOADER_APP_START;
 800247a:	1dfb      	adds	r3, r7, #7
 800247c:	22f4      	movs	r2, #244	; 0xf4
 800247e:	701a      	strb	r2, [r3, #0]
  if (HAL_OK != HAL_I2C_Master_Transmit(&hi2c1, CCS811_I2C_ADDR << 1, (uint8_t *) &byte_buffer, 1, 1000))
 8002480:	1dfa      	adds	r2, r7, #7
 8002482:	4812      	ldr	r0, [pc, #72]	; (80024cc <CCS811_begin+0x58>)
 8002484:	23fa      	movs	r3, #250	; 0xfa
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	9300      	str	r3, [sp, #0]
 800248a:	2301      	movs	r3, #1
 800248c:	21b4      	movs	r1, #180	; 0xb4
 800248e:	f001 fb8d 	bl	8003bac <HAL_I2C_Master_Transmit>
 8002492:	1e03      	subs	r3, r0, #0
 8002494:	d001      	beq.n	800249a <CCS811_begin+0x26>
  {
    return 1;
 8002496:	2301      	movs	r3, #1
 8002498:	e014      	b.n	80024c4 <CCS811_begin+0x50>
  }

  byte_buffer = 0b10000;
 800249a:	1dfb      	adds	r3, r7, #7
 800249c:	2210      	movs	r2, #16
 800249e:	701a      	strb	r2, [r3, #0]
  if (HAL_OK != HAL_I2C_Mem_Write(&hi2c1, CCS811_I2C_ADDR << 1, CCS811_REG_MEAS_MODE, 1, &byte_buffer, 1, 1000))
 80024a0:	480a      	ldr	r0, [pc, #40]	; (80024cc <CCS811_begin+0x58>)
 80024a2:	23fa      	movs	r3, #250	; 0xfa
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	9302      	str	r3, [sp, #8]
 80024a8:	2301      	movs	r3, #1
 80024aa:	9301      	str	r3, [sp, #4]
 80024ac:	1dfb      	adds	r3, r7, #7
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	2301      	movs	r3, #1
 80024b2:	2201      	movs	r2, #1
 80024b4:	21b4      	movs	r1, #180	; 0xb4
 80024b6:	f001 fc81 	bl	8003dbc <HAL_I2C_Mem_Write>
 80024ba:	1e03      	subs	r3, r0, #0
 80024bc:	d001      	beq.n	80024c2 <CCS811_begin+0x4e>
  {
    return 1;
 80024be:	2301      	movs	r3, #1
 80024c0:	e000      	b.n	80024c4 <CCS811_begin+0x50>
  }

  return 0;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	0018      	movs	r0, r3
 80024c6:	46bd      	mov	sp, r7
 80024c8:	b002      	add	sp, #8
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	200001d4 	.word	0x200001d4

080024d0 <CCS811_get_eCO2>:

static uint16_t CCS811_get_eCO2(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af04      	add	r7, sp, #16
  uint8_t result[2] = {0};
 80024d6:	1d3b      	adds	r3, r7, #4
 80024d8:	2200      	movs	r2, #0
 80024da:	801a      	strh	r2, [r3, #0]
  if (HAL_OK != HAL_I2C_Mem_Read(&hi2c1, CCS811_I2C_ADDR << 1, CCS811_REG_ALG_RESULT_DATA, 1, (uint8_t *) &result, 2, 1000))
 80024dc:	480d      	ldr	r0, [pc, #52]	; (8002514 <CCS811_get_eCO2+0x44>)
 80024de:	23fa      	movs	r3, #250	; 0xfa
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	9302      	str	r3, [sp, #8]
 80024e4:	2302      	movs	r3, #2
 80024e6:	9301      	str	r3, [sp, #4]
 80024e8:	1d3b      	adds	r3, r7, #4
 80024ea:	9300      	str	r3, [sp, #0]
 80024ec:	2301      	movs	r3, #1
 80024ee:	2202      	movs	r2, #2
 80024f0:	21b4      	movs	r1, #180	; 0xb4
 80024f2:	f001 fd91 	bl	8004018 <HAL_I2C_Mem_Read>
    {
//      while (1);
    }
  return (((uint16_t) result[0] << 8) | (uint16_t) result[1]);
 80024f6:	1d3b      	adds	r3, r7, #4
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	021b      	lsls	r3, r3, #8
 80024fc:	b21a      	sxth	r2, r3
 80024fe:	1d3b      	adds	r3, r7, #4
 8002500:	785b      	ldrb	r3, [r3, #1]
 8002502:	b21b      	sxth	r3, r3
 8002504:	4313      	orrs	r3, r2
 8002506:	b21b      	sxth	r3, r3
 8002508:	b29b      	uxth	r3, r3
}
 800250a:	0018      	movs	r0, r3
 800250c:	46bd      	mov	sp, r7
 800250e:	b002      	add	sp, #8
 8002510:	bd80      	pop	{r7, pc}
 8002512:	46c0      	nop			; (mov r8, r8)
 8002514:	200001d4 	.word	0x200001d4

08002518 <SHT30_begin>:
  }
  __asm volatile ("nop");
}

static void SHT30_begin(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0

}
 800251c:	46c0      	nop			; (mov r8, r8)
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
	...

08002524 <SHT30_get_temp>:

static uint16_t SHT30_get_temp(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af04      	add	r7, sp, #16
  uint8_t recv[6] = {0};
 800252a:	003b      	movs	r3, r7
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	2200      	movs	r2, #0
 8002532:	809a      	strh	r2, [r3, #4]
  uint16_t temp = 0;
 8002534:	1dbb      	adds	r3, r7, #6
 8002536:	2200      	movs	r2, #0
 8002538:	801a      	strh	r2, [r3, #0]
  if (HAL_OK != HAL_I2C_Mem_Read(&hi2c1, SHT30_I2C_ADDR << 1, SHT30_COMMAND_READ_ONESHOT, 2, recv, 6, 1000))
 800253a:	4a23      	ldr	r2, [pc, #140]	; (80025c8 <SHT30_get_temp+0xa4>)
 800253c:	4823      	ldr	r0, [pc, #140]	; (80025cc <SHT30_get_temp+0xa8>)
 800253e:	23fa      	movs	r3, #250	; 0xfa
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	9302      	str	r3, [sp, #8]
 8002544:	2306      	movs	r3, #6
 8002546:	9301      	str	r3, [sp, #4]
 8002548:	003b      	movs	r3, r7
 800254a:	9300      	str	r3, [sp, #0]
 800254c:	2302      	movs	r3, #2
 800254e:	2188      	movs	r1, #136	; 0x88
 8002550:	f001 fd62 	bl	8004018 <HAL_I2C_Mem_Read>
  {
//    while (1);
  }
  temp = (uint16_t) recv[0] << 8 | recv[1];
 8002554:	003b      	movs	r3, r7
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	021b      	lsls	r3, r3, #8
 800255a:	b21a      	sxth	r2, r3
 800255c:	003b      	movs	r3, r7
 800255e:	785b      	ldrb	r3, [r3, #1]
 8002560:	b21b      	sxth	r3, r3
 8002562:	4313      	orrs	r3, r2
 8002564:	b21a      	sxth	r2, r3
 8002566:	1dbb      	adds	r3, r7, #6
 8002568:	801a      	strh	r2, [r3, #0]
  return (uint16_t) ((temp / 256 + 0.5) * 315 / 256 - 49); // sensor output to degrees F equation, page 30 of SHT30 datasheet
 800256a:	1dbb      	adds	r3, r7, #6
 800256c:	881b      	ldrh	r3, [r3, #0]
 800256e:	0a1b      	lsrs	r3, r3, #8
 8002570:	b29b      	uxth	r3, r3
 8002572:	0018      	movs	r0, r3
 8002574:	f7ff faf6 	bl	8001b64 <__aeabi_i2d>
 8002578:	2200      	movs	r2, #0
 800257a:	4b15      	ldr	r3, [pc, #84]	; (80025d0 <SHT30_get_temp+0xac>)
 800257c:	f7fd fe6c 	bl	8000258 <__aeabi_dadd>
 8002580:	0002      	movs	r2, r0
 8002582:	000b      	movs	r3, r1
 8002584:	0010      	movs	r0, r2
 8002586:	0019      	movs	r1, r3
 8002588:	2200      	movs	r2, #0
 800258a:	4b12      	ldr	r3, [pc, #72]	; (80025d4 <SHT30_get_temp+0xb0>)
 800258c:	f7fe fcb6 	bl	8000efc <__aeabi_dmul>
 8002590:	0002      	movs	r2, r0
 8002592:	000b      	movs	r3, r1
 8002594:	0010      	movs	r0, r2
 8002596:	0019      	movs	r1, r3
 8002598:	2200      	movs	r2, #0
 800259a:	4b0f      	ldr	r3, [pc, #60]	; (80025d8 <SHT30_get_temp+0xb4>)
 800259c:	f7fe f9c6 	bl	800092c <__aeabi_ddiv>
 80025a0:	0002      	movs	r2, r0
 80025a2:	000b      	movs	r3, r1
 80025a4:	0010      	movs	r0, r2
 80025a6:	0019      	movs	r1, r3
 80025a8:	2200      	movs	r2, #0
 80025aa:	4b0c      	ldr	r3, [pc, #48]	; (80025dc <SHT30_get_temp+0xb8>)
 80025ac:	f7fe ff12 	bl	80013d4 <__aeabi_dsub>
 80025b0:	0002      	movs	r2, r0
 80025b2:	000b      	movs	r3, r1
 80025b4:	0010      	movs	r0, r2
 80025b6:	0019      	movs	r1, r3
 80025b8:	f7fd fe30 	bl	800021c <__aeabi_d2uiz>
 80025bc:	0003      	movs	r3, r0
 80025be:	b29b      	uxth	r3, r3
}
 80025c0:	0018      	movs	r0, r3
 80025c2:	46bd      	mov	sp, r7
 80025c4:	b002      	add	sp, #8
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	00002c10 	.word	0x00002c10
 80025cc:	200001d4 	.word	0x200001d4
 80025d0:	3fe00000 	.word	0x3fe00000
 80025d4:	4073b000 	.word	0x4073b000
 80025d8:	40700000 	.word	0x40700000
 80025dc:	40488000 	.word	0x40488000

080025e0 <EK1940_get_moisture>:
//    while (1);
  }
}

static uint16_t EK1940_get_moisture(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
  HAL_ADC_Start(&hadc);
 80025e6:	4b1d      	ldr	r3, [pc, #116]	; (800265c <EK1940_get_moisture+0x7c>)
 80025e8:	0018      	movs	r0, r3
 80025ea:	f000 fc0b 	bl	8002e04 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1000);
 80025ee:	23fa      	movs	r3, #250	; 0xfa
 80025f0:	009a      	lsls	r2, r3, #2
 80025f2:	4b1a      	ldr	r3, [pc, #104]	; (800265c <EK1940_get_moisture+0x7c>)
 80025f4:	0011      	movs	r1, r2
 80025f6:	0018      	movs	r0, r3
 80025f8:	f000 fc58 	bl	8002eac <HAL_ADC_PollForConversion>
  uint32_t raw = HAL_ADC_GetValue(&hadc);
 80025fc:	4b17      	ldr	r3, [pc, #92]	; (800265c <EK1940_get_moisture+0x7c>)
 80025fe:	0018      	movs	r0, r3
 8002600:	f000 fcec 	bl	8002fdc <HAL_ADC_GetValue>
 8002604:	0003      	movs	r3, r0
 8002606:	607b      	str	r3, [r7, #4]
  return 100 - ((100 * (raw - 75.0)) / (205 - 75));
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f7ff fadb 	bl	8001bc4 <__aeabi_ui2d>
 800260e:	2200      	movs	r2, #0
 8002610:	4b13      	ldr	r3, [pc, #76]	; (8002660 <EK1940_get_moisture+0x80>)
 8002612:	f7fe fedf 	bl	80013d4 <__aeabi_dsub>
 8002616:	0002      	movs	r2, r0
 8002618:	000b      	movs	r3, r1
 800261a:	0010      	movs	r0, r2
 800261c:	0019      	movs	r1, r3
 800261e:	2200      	movs	r2, #0
 8002620:	4b10      	ldr	r3, [pc, #64]	; (8002664 <EK1940_get_moisture+0x84>)
 8002622:	f7fe fc6b 	bl	8000efc <__aeabi_dmul>
 8002626:	0002      	movs	r2, r0
 8002628:	000b      	movs	r3, r1
 800262a:	0010      	movs	r0, r2
 800262c:	0019      	movs	r1, r3
 800262e:	2200      	movs	r2, #0
 8002630:	4b0d      	ldr	r3, [pc, #52]	; (8002668 <EK1940_get_moisture+0x88>)
 8002632:	f7fe f97b 	bl	800092c <__aeabi_ddiv>
 8002636:	0002      	movs	r2, r0
 8002638:	000b      	movs	r3, r1
 800263a:	2000      	movs	r0, #0
 800263c:	4909      	ldr	r1, [pc, #36]	; (8002664 <EK1940_get_moisture+0x84>)
 800263e:	f7fe fec9 	bl	80013d4 <__aeabi_dsub>
 8002642:	0002      	movs	r2, r0
 8002644:	000b      	movs	r3, r1
 8002646:	0010      	movs	r0, r2
 8002648:	0019      	movs	r1, r3
 800264a:	f7fd fde7 	bl	800021c <__aeabi_d2uiz>
 800264e:	0003      	movs	r3, r0
 8002650:	b29b      	uxth	r3, r3
}
 8002652:	0018      	movs	r0, r3
 8002654:	46bd      	mov	sp, r7
 8002656:	b002      	add	sp, #8
 8002658:	bd80      	pop	{r7, pc}
 800265a:	46c0      	nop			; (mov r8, r8)
 800265c:	200002c4 	.word	0x200002c4
 8002660:	4052c000 	.word	0x4052c000
 8002664:	40590000 	.word	0x40590000
 8002668:	40604000 	.word	0x40604000

0800266c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  if (uart_recv[0] == 0xAA)
 8002674:	4b2b      	ldr	r3, [pc, #172]	; (8002724 <HAL_UART_RxCpltCallback+0xb8>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2baa      	cmp	r3, #170	; 0xaa
 800267c:	d107      	bne.n	800268e <HAL_UART_RxCpltCallback+0x22>
  {
    // get name and conditions
    HAL_UART_Transmit(huart, &conditions, sizeof(conditions), 500);
 800267e:	23fa      	movs	r3, #250	; 0xfa
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	4929      	ldr	r1, [pc, #164]	; (8002728 <HAL_UART_RxCpltCallback+0xbc>)
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	2286      	movs	r2, #134	; 0x86
 8002688:	f003 f932 	bl	80058f0 <HAL_UART_Transmit>
 800268c:	e040      	b.n	8002710 <HAL_UART_RxCpltCallback+0xa4>
  }
  else if (uart_recv[0] == 0xBB)
 800268e:	4b25      	ldr	r3, [pc, #148]	; (8002724 <HAL_UART_RxCpltCallback+0xb8>)
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	b2db      	uxtb	r3, r3
 8002694:	2bbb      	cmp	r3, #187	; 0xbb
 8002696:	d10c      	bne.n	80026b2 <HAL_UART_RxCpltCallback+0x46>
  {
    if (HAL_OK == HAL_UART_Receive(huart, &setpoints, 136, 500))
 8002698:	23fa      	movs	r3, #250	; 0xfa
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	4923      	ldr	r1, [pc, #140]	; (800272c <HAL_UART_RxCpltCallback+0xc0>)
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	2288      	movs	r2, #136	; 0x88
 80026a2:	f003 f9cf 	bl	8005a44 <HAL_UART_Receive>
 80026a6:	1e03      	subs	r3, r0, #0
 80026a8:	d132      	bne.n	8002710 <HAL_UART_RxCpltCallback+0xa4>
    {
      enable_auto = 1;
 80026aa:	4b21      	ldr	r3, [pc, #132]	; (8002730 <HAL_UART_RxCpltCallback+0xc4>)
 80026ac:	2201      	movs	r2, #1
 80026ae:	701a      	strb	r2, [r3, #0]
 80026b0:	e02e      	b.n	8002710 <HAL_UART_RxCpltCallback+0xa4>
    }
//    memcpy(&setpoints, uart_recv, 4);
  }
  else if (uart_recv[0] == 0xCC)
 80026b2:	4b1c      	ldr	r3, [pc, #112]	; (8002724 <HAL_UART_RxCpltCallback+0xb8>)
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	2bcc      	cmp	r3, #204	; 0xcc
 80026ba:	d106      	bne.n	80026ca <HAL_UART_RxCpltCallback+0x5e>
  {
    HAL_GPIO_TogglePin(air_GPIO_Port, air_Pin);
 80026bc:	2390      	movs	r3, #144	; 0x90
 80026be:	05db      	lsls	r3, r3, #23
 80026c0:	2180      	movs	r1, #128	; 0x80
 80026c2:	0018      	movs	r0, r3
 80026c4:	f001 f9c1 	bl	8003a4a <HAL_GPIO_TogglePin>
 80026c8:	e022      	b.n	8002710 <HAL_UART_RxCpltCallback+0xa4>
  }
  else if (uart_recv[0] == 0xDD)
 80026ca:	4b16      	ldr	r3, [pc, #88]	; (8002724 <HAL_UART_RxCpltCallback+0xb8>)
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	2bdd      	cmp	r3, #221	; 0xdd
 80026d2:	d106      	bne.n	80026e2 <HAL_UART_RxCpltCallback+0x76>
  {
    HAL_GPIO_TogglePin(heat_GPIO_Port, heat_Pin);
 80026d4:	2390      	movs	r3, #144	; 0x90
 80026d6:	05db      	lsls	r3, r3, #23
 80026d8:	2110      	movs	r1, #16
 80026da:	0018      	movs	r0, r3
 80026dc:	f001 f9b5 	bl	8003a4a <HAL_GPIO_TogglePin>
 80026e0:	e016      	b.n	8002710 <HAL_UART_RxCpltCallback+0xa4>
  }
  else if (uart_recv[0] == 0xEE)
 80026e2:	4b10      	ldr	r3, [pc, #64]	; (8002724 <HAL_UART_RxCpltCallback+0xb8>)
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	2bee      	cmp	r3, #238	; 0xee
 80026ea:	d106      	bne.n	80026fa <HAL_UART_RxCpltCallback+0x8e>
  {
    HAL_GPIO_TogglePin(light_GPIO_Port, light_Pin);
 80026ec:	2390      	movs	r3, #144	; 0x90
 80026ee:	05db      	lsls	r3, r3, #23
 80026f0:	2140      	movs	r1, #64	; 0x40
 80026f2:	0018      	movs	r0, r3
 80026f4:	f001 f9a9 	bl	8003a4a <HAL_GPIO_TogglePin>
 80026f8:	e00a      	b.n	8002710 <HAL_UART_RxCpltCallback+0xa4>
  }
  else if (uart_recv[0] == 0xFF)
 80026fa:	4b0a      	ldr	r3, [pc, #40]	; (8002724 <HAL_UART_RxCpltCallback+0xb8>)
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	2bff      	cmp	r3, #255	; 0xff
 8002702:	d105      	bne.n	8002710 <HAL_UART_RxCpltCallback+0xa4>
  {
    HAL_GPIO_TogglePin(water_GPIO_Port, water_Pin);
 8002704:	2390      	movs	r3, #144	; 0x90
 8002706:	05db      	lsls	r3, r3, #23
 8002708:	2120      	movs	r1, #32
 800270a:	0018      	movs	r0, r3
 800270c:	f001 f99d 	bl	8003a4a <HAL_GPIO_TogglePin>
  }
  HAL_UART_Receive_IT(&huart1, uart_recv, 1);
 8002710:	4904      	ldr	r1, [pc, #16]	; (8002724 <HAL_UART_RxCpltCallback+0xb8>)
 8002712:	4b08      	ldr	r3, [pc, #32]	; (8002734 <HAL_UART_RxCpltCallback+0xc8>)
 8002714:	2201      	movs	r2, #1
 8002716:	0018      	movs	r0, r3
 8002718:	f003 fa84 	bl	8005c24 <HAL_UART_Receive_IT>
}
 800271c:	46c0      	nop			; (mov r8, r8)
 800271e:	46bd      	mov	sp, r7
 8002720:	b002      	add	sp, #8
 8002722:	bd80      	pop	{r7, pc}
 8002724:	20000028 	.word	0x20000028
 8002728:	200000a8 	.word	0x200000a8
 800272c:	20000130 	.word	0x20000130
 8002730:	200001b8 	.word	0x200001b8
 8002734:	20000220 	.word	0x20000220

08002738 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800273c:	b672      	cpsid	i
}
 800273e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002740:	e7fe      	b.n	8002740 <Error_Handler+0x8>
	...

08002744 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800274a:	4b0f      	ldr	r3, [pc, #60]	; (8002788 <HAL_MspInit+0x44>)
 800274c:	699a      	ldr	r2, [r3, #24]
 800274e:	4b0e      	ldr	r3, [pc, #56]	; (8002788 <HAL_MspInit+0x44>)
 8002750:	2101      	movs	r1, #1
 8002752:	430a      	orrs	r2, r1
 8002754:	619a      	str	r2, [r3, #24]
 8002756:	4b0c      	ldr	r3, [pc, #48]	; (8002788 <HAL_MspInit+0x44>)
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	2201      	movs	r2, #1
 800275c:	4013      	ands	r3, r2
 800275e:	607b      	str	r3, [r7, #4]
 8002760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002762:	4b09      	ldr	r3, [pc, #36]	; (8002788 <HAL_MspInit+0x44>)
 8002764:	69da      	ldr	r2, [r3, #28]
 8002766:	4b08      	ldr	r3, [pc, #32]	; (8002788 <HAL_MspInit+0x44>)
 8002768:	2180      	movs	r1, #128	; 0x80
 800276a:	0549      	lsls	r1, r1, #21
 800276c:	430a      	orrs	r2, r1
 800276e:	61da      	str	r2, [r3, #28]
 8002770:	4b05      	ldr	r3, [pc, #20]	; (8002788 <HAL_MspInit+0x44>)
 8002772:	69da      	ldr	r2, [r3, #28]
 8002774:	2380      	movs	r3, #128	; 0x80
 8002776:	055b      	lsls	r3, r3, #21
 8002778:	4013      	ands	r3, r2
 800277a:	603b      	str	r3, [r7, #0]
 800277c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800277e:	46c0      	nop			; (mov r8, r8)
 8002780:	46bd      	mov	sp, r7
 8002782:	b002      	add	sp, #8
 8002784:	bd80      	pop	{r7, pc}
 8002786:	46c0      	nop			; (mov r8, r8)
 8002788:	40021000 	.word	0x40021000

0800278c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800278c:	b590      	push	{r4, r7, lr}
 800278e:	b08b      	sub	sp, #44	; 0x2c
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002794:	2414      	movs	r4, #20
 8002796:	193b      	adds	r3, r7, r4
 8002798:	0018      	movs	r0, r3
 800279a:	2314      	movs	r3, #20
 800279c:	001a      	movs	r2, r3
 800279e:	2100      	movs	r1, #0
 80027a0:	f004 fc2f 	bl	8007002 <memset>
  if(hadc->Instance==ADC1)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a19      	ldr	r2, [pc, #100]	; (8002810 <HAL_ADC_MspInit+0x84>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d12b      	bne.n	8002806 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80027ae:	4b19      	ldr	r3, [pc, #100]	; (8002814 <HAL_ADC_MspInit+0x88>)
 80027b0:	699a      	ldr	r2, [r3, #24]
 80027b2:	4b18      	ldr	r3, [pc, #96]	; (8002814 <HAL_ADC_MspInit+0x88>)
 80027b4:	2180      	movs	r1, #128	; 0x80
 80027b6:	0089      	lsls	r1, r1, #2
 80027b8:	430a      	orrs	r2, r1
 80027ba:	619a      	str	r2, [r3, #24]
 80027bc:	4b15      	ldr	r3, [pc, #84]	; (8002814 <HAL_ADC_MspInit+0x88>)
 80027be:	699a      	ldr	r2, [r3, #24]
 80027c0:	2380      	movs	r3, #128	; 0x80
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	4013      	ands	r3, r2
 80027c6:	613b      	str	r3, [r7, #16]
 80027c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ca:	4b12      	ldr	r3, [pc, #72]	; (8002814 <HAL_ADC_MspInit+0x88>)
 80027cc:	695a      	ldr	r2, [r3, #20]
 80027ce:	4b11      	ldr	r3, [pc, #68]	; (8002814 <HAL_ADC_MspInit+0x88>)
 80027d0:	2180      	movs	r1, #128	; 0x80
 80027d2:	0289      	lsls	r1, r1, #10
 80027d4:	430a      	orrs	r2, r1
 80027d6:	615a      	str	r2, [r3, #20]
 80027d8:	4b0e      	ldr	r3, [pc, #56]	; (8002814 <HAL_ADC_MspInit+0x88>)
 80027da:	695a      	ldr	r2, [r3, #20]
 80027dc:	2380      	movs	r3, #128	; 0x80
 80027de:	029b      	lsls	r3, r3, #10
 80027e0:	4013      	ands	r3, r2
 80027e2:	60fb      	str	r3, [r7, #12]
 80027e4:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80027e6:	193b      	adds	r3, r7, r4
 80027e8:	2201      	movs	r2, #1
 80027ea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027ec:	193b      	adds	r3, r7, r4
 80027ee:	2203      	movs	r2, #3
 80027f0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f2:	193b      	adds	r3, r7, r4
 80027f4:	2200      	movs	r2, #0
 80027f6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027f8:	193a      	adds	r2, r7, r4
 80027fa:	2390      	movs	r3, #144	; 0x90
 80027fc:	05db      	lsls	r3, r3, #23
 80027fe:	0011      	movs	r1, r2
 8002800:	0018      	movs	r0, r3
 8002802:	f000 ff8d 	bl	8003720 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002806:	46c0      	nop			; (mov r8, r8)
 8002808:	46bd      	mov	sp, r7
 800280a:	b00b      	add	sp, #44	; 0x2c
 800280c:	bd90      	pop	{r4, r7, pc}
 800280e:	46c0      	nop			; (mov r8, r8)
 8002810:	40012400 	.word	0x40012400
 8002814:	40021000 	.word	0x40021000

08002818 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002818:	b590      	push	{r4, r7, lr}
 800281a:	b08b      	sub	sp, #44	; 0x2c
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002820:	2414      	movs	r4, #20
 8002822:	193b      	adds	r3, r7, r4
 8002824:	0018      	movs	r0, r3
 8002826:	2314      	movs	r3, #20
 8002828:	001a      	movs	r2, r3
 800282a:	2100      	movs	r1, #0
 800282c:	f004 fbe9 	bl	8007002 <memset>
  if(hi2c->Instance==I2C1)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a1c      	ldr	r2, [pc, #112]	; (80028a8 <HAL_I2C_MspInit+0x90>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d131      	bne.n	800289e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800283a:	4b1c      	ldr	r3, [pc, #112]	; (80028ac <HAL_I2C_MspInit+0x94>)
 800283c:	695a      	ldr	r2, [r3, #20]
 800283e:	4b1b      	ldr	r3, [pc, #108]	; (80028ac <HAL_I2C_MspInit+0x94>)
 8002840:	2180      	movs	r1, #128	; 0x80
 8002842:	02c9      	lsls	r1, r1, #11
 8002844:	430a      	orrs	r2, r1
 8002846:	615a      	str	r2, [r3, #20]
 8002848:	4b18      	ldr	r3, [pc, #96]	; (80028ac <HAL_I2C_MspInit+0x94>)
 800284a:	695a      	ldr	r2, [r3, #20]
 800284c:	2380      	movs	r3, #128	; 0x80
 800284e:	02db      	lsls	r3, r3, #11
 8002850:	4013      	ands	r3, r2
 8002852:	613b      	str	r3, [r7, #16]
 8002854:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002856:	0021      	movs	r1, r4
 8002858:	187b      	adds	r3, r7, r1
 800285a:	22c0      	movs	r2, #192	; 0xc0
 800285c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800285e:	187b      	adds	r3, r7, r1
 8002860:	2212      	movs	r2, #18
 8002862:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002864:	187b      	adds	r3, r7, r1
 8002866:	2201      	movs	r2, #1
 8002868:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800286a:	187b      	adds	r3, r7, r1
 800286c:	2203      	movs	r2, #3
 800286e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8002870:	187b      	adds	r3, r7, r1
 8002872:	2201      	movs	r2, #1
 8002874:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002876:	187b      	adds	r3, r7, r1
 8002878:	4a0d      	ldr	r2, [pc, #52]	; (80028b0 <HAL_I2C_MspInit+0x98>)
 800287a:	0019      	movs	r1, r3
 800287c:	0010      	movs	r0, r2
 800287e:	f000 ff4f 	bl	8003720 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002882:	4b0a      	ldr	r3, [pc, #40]	; (80028ac <HAL_I2C_MspInit+0x94>)
 8002884:	69da      	ldr	r2, [r3, #28]
 8002886:	4b09      	ldr	r3, [pc, #36]	; (80028ac <HAL_I2C_MspInit+0x94>)
 8002888:	2180      	movs	r1, #128	; 0x80
 800288a:	0389      	lsls	r1, r1, #14
 800288c:	430a      	orrs	r2, r1
 800288e:	61da      	str	r2, [r3, #28]
 8002890:	4b06      	ldr	r3, [pc, #24]	; (80028ac <HAL_I2C_MspInit+0x94>)
 8002892:	69da      	ldr	r2, [r3, #28]
 8002894:	2380      	movs	r3, #128	; 0x80
 8002896:	039b      	lsls	r3, r3, #14
 8002898:	4013      	ands	r3, r2
 800289a:	60fb      	str	r3, [r7, #12]
 800289c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800289e:	46c0      	nop			; (mov r8, r8)
 80028a0:	46bd      	mov	sp, r7
 80028a2:	b00b      	add	sp, #44	; 0x2c
 80028a4:	bd90      	pop	{r4, r7, pc}
 80028a6:	46c0      	nop			; (mov r8, r8)
 80028a8:	40005400 	.word	0x40005400
 80028ac:	40021000 	.word	0x40021000
 80028b0:	48000400 	.word	0x48000400

080028b4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80028b4:	b590      	push	{r4, r7, lr}
 80028b6:	b089      	sub	sp, #36	; 0x24
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028bc:	240c      	movs	r4, #12
 80028be:	193b      	adds	r3, r7, r4
 80028c0:	0018      	movs	r0, r3
 80028c2:	2314      	movs	r3, #20
 80028c4:	001a      	movs	r2, r3
 80028c6:	2100      	movs	r1, #0
 80028c8:	f004 fb9b 	bl	8007002 <memset>
  if(hrtc->Instance==RTC)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a10      	ldr	r2, [pc, #64]	; (8002914 <HAL_RTC_MspInit+0x60>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d11a      	bne.n	800290c <HAL_RTC_MspInit+0x58>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80028d6:	4b10      	ldr	r3, [pc, #64]	; (8002918 <HAL_RTC_MspInit+0x64>)
 80028d8:	6a1a      	ldr	r2, [r3, #32]
 80028da:	4b0f      	ldr	r3, [pc, #60]	; (8002918 <HAL_RTC_MspInit+0x64>)
 80028dc:	2180      	movs	r1, #128	; 0x80
 80028de:	0209      	lsls	r1, r1, #8
 80028e0:	430a      	orrs	r2, r1
 80028e2:	621a      	str	r2, [r3, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028e4:	4b0c      	ldr	r3, [pc, #48]	; (8002918 <HAL_RTC_MspInit+0x64>)
 80028e6:	695a      	ldr	r2, [r3, #20]
 80028e8:	4b0b      	ldr	r3, [pc, #44]	; (8002918 <HAL_RTC_MspInit+0x64>)
 80028ea:	2180      	movs	r1, #128	; 0x80
 80028ec:	0309      	lsls	r1, r1, #12
 80028ee:	430a      	orrs	r2, r1
 80028f0:	615a      	str	r2, [r3, #20]
 80028f2:	4b09      	ldr	r3, [pc, #36]	; (8002918 <HAL_RTC_MspInit+0x64>)
 80028f4:	695a      	ldr	r2, [r3, #20]
 80028f6:	2380      	movs	r3, #128	; 0x80
 80028f8:	031b      	lsls	r3, r3, #12
 80028fa:	4013      	ands	r3, r2
 80028fc:	60bb      	str	r3, [r7, #8]
 80028fe:	68bb      	ldr	r3, [r7, #8]
    /**RTC GPIO Configuration
    PC13     ------> RTC_OUT_CALIB
    */
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002900:	193b      	adds	r3, r7, r4
 8002902:	4a06      	ldr	r2, [pc, #24]	; (800291c <HAL_RTC_MspInit+0x68>)
 8002904:	0019      	movs	r1, r3
 8002906:	0010      	movs	r0, r2
 8002908:	f000 ff0a 	bl	8003720 <HAL_GPIO_Init>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800290c:	46c0      	nop			; (mov r8, r8)
 800290e:	46bd      	mov	sp, r7
 8002910:	b009      	add	sp, #36	; 0x24
 8002912:	bd90      	pop	{r4, r7, pc}
 8002914:	40002800 	.word	0x40002800
 8002918:	40021000 	.word	0x40021000
 800291c:	48000800 	.word	0x48000800

08002920 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002920:	b590      	push	{r4, r7, lr}
 8002922:	b08b      	sub	sp, #44	; 0x2c
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002928:	2414      	movs	r4, #20
 800292a:	193b      	adds	r3, r7, r4
 800292c:	0018      	movs	r0, r3
 800292e:	2314      	movs	r3, #20
 8002930:	001a      	movs	r2, r3
 8002932:	2100      	movs	r1, #0
 8002934:	f004 fb65 	bl	8007002 <memset>
  if(huart->Instance==USART1)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a21      	ldr	r2, [pc, #132]	; (80029c4 <HAL_UART_MspInit+0xa4>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d13b      	bne.n	80029ba <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002942:	4b21      	ldr	r3, [pc, #132]	; (80029c8 <HAL_UART_MspInit+0xa8>)
 8002944:	699a      	ldr	r2, [r3, #24]
 8002946:	4b20      	ldr	r3, [pc, #128]	; (80029c8 <HAL_UART_MspInit+0xa8>)
 8002948:	2180      	movs	r1, #128	; 0x80
 800294a:	01c9      	lsls	r1, r1, #7
 800294c:	430a      	orrs	r2, r1
 800294e:	619a      	str	r2, [r3, #24]
 8002950:	4b1d      	ldr	r3, [pc, #116]	; (80029c8 <HAL_UART_MspInit+0xa8>)
 8002952:	699a      	ldr	r2, [r3, #24]
 8002954:	2380      	movs	r3, #128	; 0x80
 8002956:	01db      	lsls	r3, r3, #7
 8002958:	4013      	ands	r3, r2
 800295a:	613b      	str	r3, [r7, #16]
 800295c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800295e:	4b1a      	ldr	r3, [pc, #104]	; (80029c8 <HAL_UART_MspInit+0xa8>)
 8002960:	695a      	ldr	r2, [r3, #20]
 8002962:	4b19      	ldr	r3, [pc, #100]	; (80029c8 <HAL_UART_MspInit+0xa8>)
 8002964:	2180      	movs	r1, #128	; 0x80
 8002966:	0289      	lsls	r1, r1, #10
 8002968:	430a      	orrs	r2, r1
 800296a:	615a      	str	r2, [r3, #20]
 800296c:	4b16      	ldr	r3, [pc, #88]	; (80029c8 <HAL_UART_MspInit+0xa8>)
 800296e:	695a      	ldr	r2, [r3, #20]
 8002970:	2380      	movs	r3, #128	; 0x80
 8002972:	029b      	lsls	r3, r3, #10
 8002974:	4013      	ands	r3, r2
 8002976:	60fb      	str	r3, [r7, #12]
 8002978:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800297a:	193b      	adds	r3, r7, r4
 800297c:	22c0      	movs	r2, #192	; 0xc0
 800297e:	00d2      	lsls	r2, r2, #3
 8002980:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002982:	0021      	movs	r1, r4
 8002984:	187b      	adds	r3, r7, r1
 8002986:	2202      	movs	r2, #2
 8002988:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298a:	187b      	adds	r3, r7, r1
 800298c:	2200      	movs	r2, #0
 800298e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002990:	187b      	adds	r3, r7, r1
 8002992:	2203      	movs	r2, #3
 8002994:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002996:	187b      	adds	r3, r7, r1
 8002998:	2201      	movs	r2, #1
 800299a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800299c:	187a      	adds	r2, r7, r1
 800299e:	2390      	movs	r3, #144	; 0x90
 80029a0:	05db      	lsls	r3, r3, #23
 80029a2:	0011      	movs	r1, r2
 80029a4:	0018      	movs	r0, r3
 80029a6:	f000 febb 	bl	8003720 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80029aa:	2200      	movs	r2, #0
 80029ac:	2100      	movs	r1, #0
 80029ae:	201b      	movs	r0, #27
 80029b0:	f000 fe06 	bl	80035c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80029b4:	201b      	movs	r0, #27
 80029b6:	f000 fe18 	bl	80035ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80029ba:	46c0      	nop			; (mov r8, r8)
 80029bc:	46bd      	mov	sp, r7
 80029be:	b00b      	add	sp, #44	; 0x2c
 80029c0:	bd90      	pop	{r4, r7, pc}
 80029c2:	46c0      	nop			; (mov r8, r8)
 80029c4:	40013800 	.word	0x40013800
 80029c8:	40021000 	.word	0x40021000

080029cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029d0:	e7fe      	b.n	80029d0 <NMI_Handler+0x4>

080029d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029d6:	e7fe      	b.n	80029d6 <HardFault_Handler+0x4>

080029d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80029dc:	46c0      	nop			; (mov r8, r8)
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029e6:	46c0      	nop			; (mov r8, r8)
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029f0:	f000 f888 	bl	8002b04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029f4:	46c0      	nop			; (mov r8, r8)
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
	...

080029fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002a00:	4b03      	ldr	r3, [pc, #12]	; (8002a10 <USART1_IRQHandler+0x14>)
 8002a02:	0018      	movs	r0, r3
 8002a04:	f003 f970 	bl	8005ce8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002a08:	46c0      	nop			; (mov r8, r8)
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	46c0      	nop			; (mov r8, r8)
 8002a10:	20000220 	.word	0x20000220

08002a14 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002a18:	46c0      	nop			; (mov r8, r8)
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
	...

08002a20 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002a20:	480d      	ldr	r0, [pc, #52]	; (8002a58 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002a22:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a24:	480d      	ldr	r0, [pc, #52]	; (8002a5c <LoopForever+0x6>)
  ldr r1, =_edata
 8002a26:	490e      	ldr	r1, [pc, #56]	; (8002a60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a28:	4a0e      	ldr	r2, [pc, #56]	; (8002a64 <LoopForever+0xe>)
  movs r3, #0
 8002a2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a2c:	e002      	b.n	8002a34 <LoopCopyDataInit>

08002a2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a32:	3304      	adds	r3, #4

08002a34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a38:	d3f9      	bcc.n	8002a2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a3a:	4a0b      	ldr	r2, [pc, #44]	; (8002a68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a3c:	4c0b      	ldr	r4, [pc, #44]	; (8002a6c <LoopForever+0x16>)
  movs r3, #0
 8002a3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a40:	e001      	b.n	8002a46 <LoopFillZerobss>

08002a42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a44:	3204      	adds	r2, #4

08002a46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a48:	d3fb      	bcc.n	8002a42 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002a4a:	f7ff ffe3 	bl	8002a14 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002a4e:	f004 faab 	bl	8006fa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a52:	f7ff fa57 	bl	8001f04 <main>

08002a56 <LoopForever>:

LoopForever:
    b LoopForever
 8002a56:	e7fe      	b.n	8002a56 <LoopForever>
  ldr   r0, =_estack
 8002a58:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002a5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a60:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002a64:	080070f8 	.word	0x080070f8
  ldr r2, =_sbss
 8002a68:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002a6c:	20000308 	.word	0x20000308

08002a70 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a70:	e7fe      	b.n	8002a70 <ADC1_COMP_IRQHandler>
	...

08002a74 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a78:	4b07      	ldr	r3, [pc, #28]	; (8002a98 <HAL_Init+0x24>)
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	4b06      	ldr	r3, [pc, #24]	; (8002a98 <HAL_Init+0x24>)
 8002a7e:	2110      	movs	r1, #16
 8002a80:	430a      	orrs	r2, r1
 8002a82:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002a84:	2003      	movs	r0, #3
 8002a86:	f000 f809 	bl	8002a9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a8a:	f7ff fe5b 	bl	8002744 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a8e:	2300      	movs	r3, #0
}
 8002a90:	0018      	movs	r0, r3
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	46c0      	nop			; (mov r8, r8)
 8002a98:	40022000 	.word	0x40022000

08002a9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a9c:	b590      	push	{r4, r7, lr}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002aa4:	4b14      	ldr	r3, [pc, #80]	; (8002af8 <HAL_InitTick+0x5c>)
 8002aa6:	681c      	ldr	r4, [r3, #0]
 8002aa8:	4b14      	ldr	r3, [pc, #80]	; (8002afc <HAL_InitTick+0x60>)
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	0019      	movs	r1, r3
 8002aae:	23fa      	movs	r3, #250	; 0xfa
 8002ab0:	0098      	lsls	r0, r3, #2
 8002ab2:	f7fd fb27 	bl	8000104 <__udivsi3>
 8002ab6:	0003      	movs	r3, r0
 8002ab8:	0019      	movs	r1, r3
 8002aba:	0020      	movs	r0, r4
 8002abc:	f7fd fb22 	bl	8000104 <__udivsi3>
 8002ac0:	0003      	movs	r3, r0
 8002ac2:	0018      	movs	r0, r3
 8002ac4:	f000 fda1 	bl	800360a <HAL_SYSTICK_Config>
 8002ac8:	1e03      	subs	r3, r0, #0
 8002aca:	d001      	beq.n	8002ad0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e00f      	b.n	8002af0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2b03      	cmp	r3, #3
 8002ad4:	d80b      	bhi.n	8002aee <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ad6:	6879      	ldr	r1, [r7, #4]
 8002ad8:	2301      	movs	r3, #1
 8002ada:	425b      	negs	r3, r3
 8002adc:	2200      	movs	r2, #0
 8002ade:	0018      	movs	r0, r3
 8002ae0:	f000 fd6e 	bl	80035c0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ae4:	4b06      	ldr	r3, [pc, #24]	; (8002b00 <HAL_InitTick+0x64>)
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002aea:	2300      	movs	r3, #0
 8002aec:	e000      	b.n	8002af0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
}
 8002af0:	0018      	movs	r0, r3
 8002af2:	46bd      	mov	sp, r7
 8002af4:	b003      	add	sp, #12
 8002af6:	bd90      	pop	{r4, r7, pc}
 8002af8:	20000000 	.word	0x20000000
 8002afc:	20000008 	.word	0x20000008
 8002b00:	20000004 	.word	0x20000004

08002b04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b08:	4b05      	ldr	r3, [pc, #20]	; (8002b20 <HAL_IncTick+0x1c>)
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	001a      	movs	r2, r3
 8002b0e:	4b05      	ldr	r3, [pc, #20]	; (8002b24 <HAL_IncTick+0x20>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	18d2      	adds	r2, r2, r3
 8002b14:	4b03      	ldr	r3, [pc, #12]	; (8002b24 <HAL_IncTick+0x20>)
 8002b16:	601a      	str	r2, [r3, #0]
}
 8002b18:	46c0      	nop			; (mov r8, r8)
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	46c0      	nop			; (mov r8, r8)
 8002b20:	20000008 	.word	0x20000008
 8002b24:	20000304 	.word	0x20000304

08002b28 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b2c:	4b02      	ldr	r3, [pc, #8]	; (8002b38 <HAL_GetTick+0x10>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
}
 8002b30:	0018      	movs	r0, r3
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	46c0      	nop			; (mov r8, r8)
 8002b38:	20000304 	.word	0x20000304

08002b3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b44:	f7ff fff0 	bl	8002b28 <HAL_GetTick>
 8002b48:	0003      	movs	r3, r0
 8002b4a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	3301      	adds	r3, #1
 8002b54:	d005      	beq.n	8002b62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b56:	4b0a      	ldr	r3, [pc, #40]	; (8002b80 <HAL_Delay+0x44>)
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	001a      	movs	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	189b      	adds	r3, r3, r2
 8002b60:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002b62:	46c0      	nop			; (mov r8, r8)
 8002b64:	f7ff ffe0 	bl	8002b28 <HAL_GetTick>
 8002b68:	0002      	movs	r2, r0
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d8f7      	bhi.n	8002b64 <HAL_Delay+0x28>
  {
  }
}
 8002b74:	46c0      	nop			; (mov r8, r8)
 8002b76:	46c0      	nop			; (mov r8, r8)
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	b004      	add	sp, #16
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	46c0      	nop			; (mov r8, r8)
 8002b80:	20000008 	.word	0x20000008

08002b84 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b8c:	230f      	movs	r3, #15
 8002b8e:	18fb      	adds	r3, r7, r3
 8002b90:	2200      	movs	r2, #0
 8002b92:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8002b94:	2300      	movs	r3, #0
 8002b96:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e125      	b.n	8002dee <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10a      	bne.n	8002bc0 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2234      	movs	r2, #52	; 0x34
 8002bb4:	2100      	movs	r1, #0
 8002bb6:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	0018      	movs	r0, r3
 8002bbc:	f7ff fde6 	bl	800278c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc4:	2210      	movs	r2, #16
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	d000      	beq.n	8002bcc <HAL_ADC_Init+0x48>
 8002bca:	e103      	b.n	8002dd4 <HAL_ADC_Init+0x250>
 8002bcc:	230f      	movs	r3, #15
 8002bce:	18fb      	adds	r3, r7, r3
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d000      	beq.n	8002bd8 <HAL_ADC_Init+0x54>
 8002bd6:	e0fd      	b.n	8002dd4 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	2204      	movs	r2, #4
 8002be0:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8002be2:	d000      	beq.n	8002be6 <HAL_ADC_Init+0x62>
 8002be4:	e0f6      	b.n	8002dd4 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bea:	4a83      	ldr	r2, [pc, #524]	; (8002df8 <HAL_ADC_Init+0x274>)
 8002bec:	4013      	ands	r3, r2
 8002bee:	2202      	movs	r2, #2
 8002bf0:	431a      	orrs	r2, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	2203      	movs	r2, #3
 8002bfe:	4013      	ands	r3, r2
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d112      	bne.n	8002c2a <HAL_ADC_Init+0xa6>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d009      	beq.n	8002c26 <HAL_ADC_Init+0xa2>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68da      	ldr	r2, [r3, #12]
 8002c18:	2380      	movs	r3, #128	; 0x80
 8002c1a:	021b      	lsls	r3, r3, #8
 8002c1c:	401a      	ands	r2, r3
 8002c1e:	2380      	movs	r3, #128	; 0x80
 8002c20:	021b      	lsls	r3, r3, #8
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d101      	bne.n	8002c2a <HAL_ADC_Init+0xa6>
 8002c26:	2301      	movs	r3, #1
 8002c28:	e000      	b.n	8002c2c <HAL_ADC_Init+0xa8>
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d116      	bne.n	8002c5e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	2218      	movs	r2, #24
 8002c38:	4393      	bics	r3, r2
 8002c3a:	0019      	movs	r1, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689a      	ldr	r2, [r3, #8]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	430a      	orrs	r2, r1
 8002c46:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	0899      	lsrs	r1, r3, #2
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685a      	ldr	r2, [r3, #4]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	68da      	ldr	r2, [r3, #12]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4964      	ldr	r1, [pc, #400]	; (8002dfc <HAL_ADC_Init+0x278>)
 8002c6a:	400a      	ands	r2, r1
 8002c6c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	7e1b      	ldrb	r3, [r3, #24]
 8002c72:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	7e5b      	ldrb	r3, [r3, #25]
 8002c78:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c7a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	7e9b      	ldrb	r3, [r3, #26]
 8002c80:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002c82:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d002      	beq.n	8002c92 <HAL_ADC_Init+0x10e>
 8002c8c:	2380      	movs	r3, #128	; 0x80
 8002c8e:	015b      	lsls	r3, r3, #5
 8002c90:	e000      	b.n	8002c94 <HAL_ADC_Init+0x110>
 8002c92:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002c94:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002c9a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d101      	bne.n	8002ca8 <HAL_ADC_Init+0x124>
 8002ca4:	2304      	movs	r3, #4
 8002ca6:	e000      	b.n	8002caa <HAL_ADC_Init+0x126>
 8002ca8:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8002caa:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2124      	movs	r1, #36	; 0x24
 8002cb0:	5c5b      	ldrb	r3, [r3, r1]
 8002cb2:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002cb4:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002cb6:	68ba      	ldr	r2, [r7, #8]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	7edb      	ldrb	r3, [r3, #27]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d115      	bne.n	8002cf0 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	7e9b      	ldrb	r3, [r3, #26]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d105      	bne.n	8002cd8 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	2280      	movs	r2, #128	; 0x80
 8002cd0:	0252      	lsls	r2, r2, #9
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	60bb      	str	r3, [r7, #8]
 8002cd6:	e00b      	b.n	8002cf0 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cdc:	2220      	movs	r2, #32
 8002cde:	431a      	orrs	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce8:	2201      	movs	r2, #1
 8002cea:	431a      	orrs	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	69da      	ldr	r2, [r3, #28]
 8002cf4:	23c2      	movs	r3, #194	; 0xc2
 8002cf6:	33ff      	adds	r3, #255	; 0xff
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d007      	beq.n	8002d0c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002d04:	4313      	orrs	r3, r2
 8002d06:	68ba      	ldr	r2, [r7, #8]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68d9      	ldr	r1, [r3, #12]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68ba      	ldr	r2, [r7, #8]
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d20:	2380      	movs	r3, #128	; 0x80
 8002d22:	055b      	lsls	r3, r3, #21
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d01b      	beq.n	8002d60 <HAL_ADC_Init+0x1dc>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d017      	beq.n	8002d60 <HAL_ADC_Init+0x1dc>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d013      	beq.n	8002d60 <HAL_ADC_Init+0x1dc>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3c:	2b03      	cmp	r3, #3
 8002d3e:	d00f      	beq.n	8002d60 <HAL_ADC_Init+0x1dc>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d44:	2b04      	cmp	r3, #4
 8002d46:	d00b      	beq.n	8002d60 <HAL_ADC_Init+0x1dc>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d4c:	2b05      	cmp	r3, #5
 8002d4e:	d007      	beq.n	8002d60 <HAL_ADC_Init+0x1dc>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d54:	2b06      	cmp	r3, #6
 8002d56:	d003      	beq.n	8002d60 <HAL_ADC_Init+0x1dc>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5c:	2b07      	cmp	r3, #7
 8002d5e:	d112      	bne.n	8002d86 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	695a      	ldr	r2, [r3, #20]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2107      	movs	r1, #7
 8002d6c:	438a      	bics	r2, r1
 8002d6e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	6959      	ldr	r1, [r3, #20]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7a:	2207      	movs	r2, #7
 8002d7c:	401a      	ands	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	430a      	orrs	r2, r1
 8002d84:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	4a1c      	ldr	r2, [pc, #112]	; (8002e00 <HAL_ADC_Init+0x27c>)
 8002d8e:	4013      	ands	r3, r2
 8002d90:	68ba      	ldr	r2, [r7, #8]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d10b      	bne.n	8002dae <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da0:	2203      	movs	r2, #3
 8002da2:	4393      	bics	r3, r2
 8002da4:	2201      	movs	r2, #1
 8002da6:	431a      	orrs	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002dac:	e01c      	b.n	8002de8 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db2:	2212      	movs	r2, #18
 8002db4:	4393      	bics	r3, r2
 8002db6:	2210      	movs	r2, #16
 8002db8:	431a      	orrs	r2, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	431a      	orrs	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8002dca:	230f      	movs	r3, #15
 8002dcc:	18fb      	adds	r3, r7, r3
 8002dce:	2201      	movs	r2, #1
 8002dd0:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002dd2:	e009      	b.n	8002de8 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd8:	2210      	movs	r2, #16
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8002de0:	230f      	movs	r3, #15
 8002de2:	18fb      	adds	r3, r7, r3
 8002de4:	2201      	movs	r2, #1
 8002de6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002de8:	230f      	movs	r3, #15
 8002dea:	18fb      	adds	r3, r7, r3
 8002dec:	781b      	ldrb	r3, [r3, #0]
}
 8002dee:	0018      	movs	r0, r3
 8002df0:	46bd      	mov	sp, r7
 8002df2:	b004      	add	sp, #16
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	46c0      	nop			; (mov r8, r8)
 8002df8:	fffffefd 	.word	0xfffffefd
 8002dfc:	fffe0219 	.word	0xfffe0219
 8002e00:	833fffe7 	.word	0x833fffe7

08002e04 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002e04:	b590      	push	{r4, r7, lr}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e0c:	230f      	movs	r3, #15
 8002e0e:	18fb      	adds	r3, r7, r3
 8002e10:	2200      	movs	r2, #0
 8002e12:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	2204      	movs	r2, #4
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	d138      	bne.n	8002e92 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2234      	movs	r2, #52	; 0x34
 8002e24:	5c9b      	ldrb	r3, [r3, r2]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d101      	bne.n	8002e2e <HAL_ADC_Start+0x2a>
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	e038      	b.n	8002ea0 <HAL_ADC_Start+0x9c>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2234      	movs	r2, #52	; 0x34
 8002e32:	2101      	movs	r1, #1
 8002e34:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	7e5b      	ldrb	r3, [r3, #25]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d007      	beq.n	8002e4e <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8002e3e:	230f      	movs	r3, #15
 8002e40:	18fc      	adds	r4, r7, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	0018      	movs	r0, r3
 8002e46:	f000 f9e3 	bl	8003210 <ADC_Enable>
 8002e4a:	0003      	movs	r3, r0
 8002e4c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002e4e:	230f      	movs	r3, #15
 8002e50:	18fb      	adds	r3, r7, r3
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d120      	bne.n	8002e9a <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e5c:	4a12      	ldr	r2, [pc, #72]	; (8002ea8 <HAL_ADC_Start+0xa4>)
 8002e5e:	4013      	ands	r3, r2
 8002e60:	2280      	movs	r2, #128	; 0x80
 8002e62:	0052      	lsls	r2, r2, #1
 8002e64:	431a      	orrs	r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2234      	movs	r2, #52	; 0x34
 8002e74:	2100      	movs	r1, #0
 8002e76:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	221c      	movs	r2, #28
 8002e7e:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	689a      	ldr	r2, [r3, #8]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2104      	movs	r1, #4
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	609a      	str	r2, [r3, #8]
 8002e90:	e003      	b.n	8002e9a <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002e92:	230f      	movs	r3, #15
 8002e94:	18fb      	adds	r3, r7, r3
 8002e96:	2202      	movs	r2, #2
 8002e98:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002e9a:	230f      	movs	r3, #15
 8002e9c:	18fb      	adds	r3, r7, r3
 8002e9e:	781b      	ldrb	r3, [r3, #0]
}
 8002ea0:	0018      	movs	r0, r3
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	b005      	add	sp, #20
 8002ea6:	bd90      	pop	{r4, r7, pc}
 8002ea8:	fffff0fe 	.word	0xfffff0fe

08002eac <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	2b08      	cmp	r3, #8
 8002ebc:	d102      	bne.n	8002ec4 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8002ebe:	2308      	movs	r3, #8
 8002ec0:	60fb      	str	r3, [r7, #12]
 8002ec2:	e014      	b.n	8002eee <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	4013      	ands	r3, r2
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d10b      	bne.n	8002eea <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	431a      	orrs	r2, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2234      	movs	r2, #52	; 0x34
 8002ee2:	2100      	movs	r1, #0
 8002ee4:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e071      	b.n	8002fce <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8002eea:	230c      	movs	r3, #12
 8002eec:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002eee:	f7ff fe1b 	bl	8002b28 <HAL_GetTick>
 8002ef2:	0003      	movs	r3, r0
 8002ef4:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002ef6:	e01f      	b.n	8002f38 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	3301      	adds	r3, #1
 8002efc:	d01c      	beq.n	8002f38 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d007      	beq.n	8002f14 <HAL_ADC_PollForConversion+0x68>
 8002f04:	f7ff fe10 	bl	8002b28 <HAL_GetTick>
 8002f08:	0002      	movs	r2, r0
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	683a      	ldr	r2, [r7, #0]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d211      	bcs.n	8002f38 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	d10b      	bne.n	8002f38 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f24:	2204      	movs	r2, #4
 8002f26:	431a      	orrs	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2234      	movs	r2, #52	; 0x34
 8002f30:	2100      	movs	r1, #0
 8002f32:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e04a      	b.n	8002fce <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	4013      	ands	r3, r2
 8002f42:	d0d9      	beq.n	8002ef8 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f48:	2280      	movs	r2, #128	; 0x80
 8002f4a:	0092      	lsls	r2, r2, #2
 8002f4c:	431a      	orrs	r2, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68da      	ldr	r2, [r3, #12]
 8002f58:	23c0      	movs	r3, #192	; 0xc0
 8002f5a:	011b      	lsls	r3, r3, #4
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	d12d      	bne.n	8002fbc <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d129      	bne.n	8002fbc <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2208      	movs	r2, #8
 8002f70:	4013      	ands	r3, r2
 8002f72:	2b08      	cmp	r3, #8
 8002f74:	d122      	bne.n	8002fbc <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	2204      	movs	r2, #4
 8002f7e:	4013      	ands	r3, r2
 8002f80:	d110      	bne.n	8002fa4 <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	685a      	ldr	r2, [r3, #4]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	210c      	movs	r1, #12
 8002f8e:	438a      	bics	r2, r1
 8002f90:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f96:	4a10      	ldr	r2, [pc, #64]	; (8002fd8 <HAL_ADC_PollForConversion+0x12c>)
 8002f98:	4013      	ands	r3, r2
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	431a      	orrs	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	639a      	str	r2, [r3, #56]	; 0x38
 8002fa2:	e00b      	b.n	8002fbc <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa8:	2220      	movs	r2, #32
 8002faa:	431a      	orrs	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	7e1b      	ldrb	r3, [r3, #24]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d103      	bne.n	8002fcc <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	220c      	movs	r2, #12
 8002fca:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	0018      	movs	r0, r3
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	b004      	add	sp, #16
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	46c0      	nop			; (mov r8, r8)
 8002fd8:	fffffefe 	.word	0xfffffefe

08002fdc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002fea:	0018      	movs	r0, r3
 8002fec:	46bd      	mov	sp, r7
 8002fee:	b002      	add	sp, #8
 8002ff0:	bd80      	pop	{r7, pc}
	...

08002ff4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ffe:	230f      	movs	r3, #15
 8003000:	18fb      	adds	r3, r7, r3
 8003002:	2200      	movs	r2, #0
 8003004:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8003006:	2300      	movs	r3, #0
 8003008:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800300e:	2380      	movs	r3, #128	; 0x80
 8003010:	055b      	lsls	r3, r3, #21
 8003012:	429a      	cmp	r2, r3
 8003014:	d011      	beq.n	800303a <HAL_ADC_ConfigChannel+0x46>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301a:	2b01      	cmp	r3, #1
 800301c:	d00d      	beq.n	800303a <HAL_ADC_ConfigChannel+0x46>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003022:	2b02      	cmp	r3, #2
 8003024:	d009      	beq.n	800303a <HAL_ADC_ConfigChannel+0x46>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302a:	2b03      	cmp	r3, #3
 800302c:	d005      	beq.n	800303a <HAL_ADC_ConfigChannel+0x46>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003032:	2b04      	cmp	r3, #4
 8003034:	d001      	beq.n	800303a <HAL_ADC_ConfigChannel+0x46>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2234      	movs	r2, #52	; 0x34
 800303e:	5c9b      	ldrb	r3, [r3, r2]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d101      	bne.n	8003048 <HAL_ADC_ConfigChannel+0x54>
 8003044:	2302      	movs	r3, #2
 8003046:	e0d0      	b.n	80031ea <HAL_ADC_ConfigChannel+0x1f6>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2234      	movs	r2, #52	; 0x34
 800304c:	2101      	movs	r1, #1
 800304e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	2204      	movs	r2, #4
 8003058:	4013      	ands	r3, r2
 800305a:	d000      	beq.n	800305e <HAL_ADC_ConfigChannel+0x6a>
 800305c:	e0b4      	b.n	80031c8 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	4a64      	ldr	r2, [pc, #400]	; (80031f4 <HAL_ADC_ConfigChannel+0x200>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d100      	bne.n	800306a <HAL_ADC_ConfigChannel+0x76>
 8003068:	e082      	b.n	8003170 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2201      	movs	r2, #1
 8003076:	409a      	lsls	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	430a      	orrs	r2, r1
 800307e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003084:	2380      	movs	r3, #128	; 0x80
 8003086:	055b      	lsls	r3, r3, #21
 8003088:	429a      	cmp	r2, r3
 800308a:	d037      	beq.n	80030fc <HAL_ADC_ConfigChannel+0x108>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003090:	2b01      	cmp	r3, #1
 8003092:	d033      	beq.n	80030fc <HAL_ADC_ConfigChannel+0x108>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003098:	2b02      	cmp	r3, #2
 800309a:	d02f      	beq.n	80030fc <HAL_ADC_ConfigChannel+0x108>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a0:	2b03      	cmp	r3, #3
 80030a2:	d02b      	beq.n	80030fc <HAL_ADC_ConfigChannel+0x108>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a8:	2b04      	cmp	r3, #4
 80030aa:	d027      	beq.n	80030fc <HAL_ADC_ConfigChannel+0x108>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b0:	2b05      	cmp	r3, #5
 80030b2:	d023      	beq.n	80030fc <HAL_ADC_ConfigChannel+0x108>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b8:	2b06      	cmp	r3, #6
 80030ba:	d01f      	beq.n	80030fc <HAL_ADC_ConfigChannel+0x108>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c0:	2b07      	cmp	r3, #7
 80030c2:	d01b      	beq.n	80030fc <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	689a      	ldr	r2, [r3, #8]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	2107      	movs	r1, #7
 80030d0:	400b      	ands	r3, r1
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d012      	beq.n	80030fc <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	695a      	ldr	r2, [r3, #20]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2107      	movs	r1, #7
 80030e2:	438a      	bics	r2, r1
 80030e4:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	6959      	ldr	r1, [r3, #20]
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	2207      	movs	r2, #7
 80030f2:	401a      	ands	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	430a      	orrs	r2, r1
 80030fa:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2b10      	cmp	r3, #16
 8003102:	d007      	beq.n	8003114 <HAL_ADC_ConfigChannel+0x120>
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2b11      	cmp	r3, #17
 800310a:	d003      	beq.n	8003114 <HAL_ADC_ConfigChannel+0x120>
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2b12      	cmp	r3, #18
 8003112:	d163      	bne.n	80031dc <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003114:	4b38      	ldr	r3, [pc, #224]	; (80031f8 <HAL_ADC_ConfigChannel+0x204>)
 8003116:	6819      	ldr	r1, [r3, #0]
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2b10      	cmp	r3, #16
 800311e:	d009      	beq.n	8003134 <HAL_ADC_ConfigChannel+0x140>
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2b11      	cmp	r3, #17
 8003126:	d102      	bne.n	800312e <HAL_ADC_ConfigChannel+0x13a>
 8003128:	2380      	movs	r3, #128	; 0x80
 800312a:	03db      	lsls	r3, r3, #15
 800312c:	e004      	b.n	8003138 <HAL_ADC_ConfigChannel+0x144>
 800312e:	2380      	movs	r3, #128	; 0x80
 8003130:	045b      	lsls	r3, r3, #17
 8003132:	e001      	b.n	8003138 <HAL_ADC_ConfigChannel+0x144>
 8003134:	2380      	movs	r3, #128	; 0x80
 8003136:	041b      	lsls	r3, r3, #16
 8003138:	4a2f      	ldr	r2, [pc, #188]	; (80031f8 <HAL_ADC_ConfigChannel+0x204>)
 800313a:	430b      	orrs	r3, r1
 800313c:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2b10      	cmp	r3, #16
 8003144:	d14a      	bne.n	80031dc <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003146:	4b2d      	ldr	r3, [pc, #180]	; (80031fc <HAL_ADC_ConfigChannel+0x208>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	492d      	ldr	r1, [pc, #180]	; (8003200 <HAL_ADC_ConfigChannel+0x20c>)
 800314c:	0018      	movs	r0, r3
 800314e:	f7fc ffd9 	bl	8000104 <__udivsi3>
 8003152:	0003      	movs	r3, r0
 8003154:	001a      	movs	r2, r3
 8003156:	0013      	movs	r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	189b      	adds	r3, r3, r2
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003160:	e002      	b.n	8003168 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	3b01      	subs	r3, #1
 8003166:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1f9      	bne.n	8003162 <HAL_ADC_ConfigChannel+0x16e>
 800316e:	e035      	b.n	80031dc <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2101      	movs	r1, #1
 800317c:	4099      	lsls	r1, r3
 800317e:	000b      	movs	r3, r1
 8003180:	43d9      	mvns	r1, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	400a      	ands	r2, r1
 8003188:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2b10      	cmp	r3, #16
 8003190:	d007      	beq.n	80031a2 <HAL_ADC_ConfigChannel+0x1ae>
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2b11      	cmp	r3, #17
 8003198:	d003      	beq.n	80031a2 <HAL_ADC_ConfigChannel+0x1ae>
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2b12      	cmp	r3, #18
 80031a0:	d11c      	bne.n	80031dc <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80031a2:	4b15      	ldr	r3, [pc, #84]	; (80031f8 <HAL_ADC_ConfigChannel+0x204>)
 80031a4:	6819      	ldr	r1, [r3, #0]
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2b10      	cmp	r3, #16
 80031ac:	d007      	beq.n	80031be <HAL_ADC_ConfigChannel+0x1ca>
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2b11      	cmp	r3, #17
 80031b4:	d101      	bne.n	80031ba <HAL_ADC_ConfigChannel+0x1c6>
 80031b6:	4b13      	ldr	r3, [pc, #76]	; (8003204 <HAL_ADC_ConfigChannel+0x210>)
 80031b8:	e002      	b.n	80031c0 <HAL_ADC_ConfigChannel+0x1cc>
 80031ba:	4b13      	ldr	r3, [pc, #76]	; (8003208 <HAL_ADC_ConfigChannel+0x214>)
 80031bc:	e000      	b.n	80031c0 <HAL_ADC_ConfigChannel+0x1cc>
 80031be:	4b13      	ldr	r3, [pc, #76]	; (800320c <HAL_ADC_ConfigChannel+0x218>)
 80031c0:	4a0d      	ldr	r2, [pc, #52]	; (80031f8 <HAL_ADC_ConfigChannel+0x204>)
 80031c2:	400b      	ands	r3, r1
 80031c4:	6013      	str	r3, [r2, #0]
 80031c6:	e009      	b.n	80031dc <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031cc:	2220      	movs	r2, #32
 80031ce:	431a      	orrs	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80031d4:	230f      	movs	r3, #15
 80031d6:	18fb      	adds	r3, r7, r3
 80031d8:	2201      	movs	r2, #1
 80031da:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2234      	movs	r2, #52	; 0x34
 80031e0:	2100      	movs	r1, #0
 80031e2:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80031e4:	230f      	movs	r3, #15
 80031e6:	18fb      	adds	r3, r7, r3
 80031e8:	781b      	ldrb	r3, [r3, #0]
}
 80031ea:	0018      	movs	r0, r3
 80031ec:	46bd      	mov	sp, r7
 80031ee:	b004      	add	sp, #16
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	46c0      	nop			; (mov r8, r8)
 80031f4:	00001001 	.word	0x00001001
 80031f8:	40012708 	.word	0x40012708
 80031fc:	20000000 	.word	0x20000000
 8003200:	000f4240 	.word	0x000f4240
 8003204:	ffbfffff 	.word	0xffbfffff
 8003208:	feffffff 	.word	0xfeffffff
 800320c:	ff7fffff 	.word	0xff7fffff

08003210 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003218:	2300      	movs	r3, #0
 800321a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800321c:	2300      	movs	r3, #0
 800321e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	2203      	movs	r2, #3
 8003228:	4013      	ands	r3, r2
 800322a:	2b01      	cmp	r3, #1
 800322c:	d112      	bne.n	8003254 <ADC_Enable+0x44>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2201      	movs	r2, #1
 8003236:	4013      	ands	r3, r2
 8003238:	2b01      	cmp	r3, #1
 800323a:	d009      	beq.n	8003250 <ADC_Enable+0x40>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68da      	ldr	r2, [r3, #12]
 8003242:	2380      	movs	r3, #128	; 0x80
 8003244:	021b      	lsls	r3, r3, #8
 8003246:	401a      	ands	r2, r3
 8003248:	2380      	movs	r3, #128	; 0x80
 800324a:	021b      	lsls	r3, r3, #8
 800324c:	429a      	cmp	r2, r3
 800324e:	d101      	bne.n	8003254 <ADC_Enable+0x44>
 8003250:	2301      	movs	r3, #1
 8003252:	e000      	b.n	8003256 <ADC_Enable+0x46>
 8003254:	2300      	movs	r3, #0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d152      	bne.n	8003300 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	4a2a      	ldr	r2, [pc, #168]	; (800330c <ADC_Enable+0xfc>)
 8003262:	4013      	ands	r3, r2
 8003264:	d00d      	beq.n	8003282 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800326a:	2210      	movs	r2, #16
 800326c:	431a      	orrs	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003276:	2201      	movs	r2, #1
 8003278:	431a      	orrs	r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e03f      	b.n	8003302 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	689a      	ldr	r2, [r3, #8]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2101      	movs	r1, #1
 800328e:	430a      	orrs	r2, r1
 8003290:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003292:	4b1f      	ldr	r3, [pc, #124]	; (8003310 <ADC_Enable+0x100>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	491f      	ldr	r1, [pc, #124]	; (8003314 <ADC_Enable+0x104>)
 8003298:	0018      	movs	r0, r3
 800329a:	f7fc ff33 	bl	8000104 <__udivsi3>
 800329e:	0003      	movs	r3, r0
 80032a0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80032a2:	e002      	b.n	80032aa <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	3b01      	subs	r3, #1
 80032a8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d1f9      	bne.n	80032a4 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80032b0:	f7ff fc3a 	bl	8002b28 <HAL_GetTick>
 80032b4:	0003      	movs	r3, r0
 80032b6:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80032b8:	e01b      	b.n	80032f2 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80032ba:	f7ff fc35 	bl	8002b28 <HAL_GetTick>
 80032be:	0002      	movs	r2, r0
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d914      	bls.n	80032f2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2201      	movs	r2, #1
 80032d0:	4013      	ands	r3, r2
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d00d      	beq.n	80032f2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032da:	2210      	movs	r2, #16
 80032dc:	431a      	orrs	r2, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e6:	2201      	movs	r2, #1
 80032e8:	431a      	orrs	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e007      	b.n	8003302 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2201      	movs	r2, #1
 80032fa:	4013      	ands	r3, r2
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d1dc      	bne.n	80032ba <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	0018      	movs	r0, r3
 8003304:	46bd      	mov	sp, r7
 8003306:	b004      	add	sp, #16
 8003308:	bd80      	pop	{r7, pc}
 800330a:	46c0      	nop			; (mov r8, r8)
 800330c:	80000017 	.word	0x80000017
 8003310:	20000000 	.word	0x20000000
 8003314:	000f4240 	.word	0x000f4240

08003318 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003320:	2317      	movs	r3, #23
 8003322:	18fb      	adds	r3, r7, r3
 8003324:	2200      	movs	r2, #0
 8003326:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8003328:	2300      	movs	r3, #0
 800332a:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 800332c:	2300      	movs	r3, #0
 800332e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2234      	movs	r2, #52	; 0x34
 8003334:	5c9b      	ldrb	r3, [r3, r2]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d101      	bne.n	800333e <HAL_ADCEx_Calibration_Start+0x26>
 800333a:	2302      	movs	r3, #2
 800333c:	e08d      	b.n	800345a <HAL_ADCEx_Calibration_Start+0x142>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2234      	movs	r2, #52	; 0x34
 8003342:	2101      	movs	r1, #1
 8003344:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	2203      	movs	r2, #3
 800334e:	4013      	ands	r3, r2
 8003350:	2b01      	cmp	r3, #1
 8003352:	d112      	bne.n	800337a <HAL_ADCEx_Calibration_Start+0x62>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2201      	movs	r2, #1
 800335c:	4013      	ands	r3, r2
 800335e:	2b01      	cmp	r3, #1
 8003360:	d009      	beq.n	8003376 <HAL_ADCEx_Calibration_Start+0x5e>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68da      	ldr	r2, [r3, #12]
 8003368:	2380      	movs	r3, #128	; 0x80
 800336a:	021b      	lsls	r3, r3, #8
 800336c:	401a      	ands	r2, r3
 800336e:	2380      	movs	r3, #128	; 0x80
 8003370:	021b      	lsls	r3, r3, #8
 8003372:	429a      	cmp	r2, r3
 8003374:	d101      	bne.n	800337a <HAL_ADCEx_Calibration_Start+0x62>
 8003376:	2301      	movs	r3, #1
 8003378:	e000      	b.n	800337c <HAL_ADCEx_Calibration_Start+0x64>
 800337a:	2300      	movs	r3, #0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d15b      	bne.n	8003438 <HAL_ADCEx_Calibration_Start+0x120>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003384:	4a37      	ldr	r2, [pc, #220]	; (8003464 <HAL_ADCEx_Calibration_Start+0x14c>)
 8003386:	4013      	ands	r3, r2
 8003388:	2202      	movs	r2, #2
 800338a:	431a      	orrs	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	2203      	movs	r2, #3
 8003398:	4013      	ands	r3, r2
 800339a:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68da      	ldr	r2, [r3, #12]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2103      	movs	r1, #3
 80033a8:	438a      	bics	r2, r1
 80033aa:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	689a      	ldr	r2, [r3, #8]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2180      	movs	r1, #128	; 0x80
 80033b8:	0609      	lsls	r1, r1, #24
 80033ba:	430a      	orrs	r2, r1
 80033bc:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 80033be:	f7ff fbb3 	bl	8002b28 <HAL_GetTick>
 80033c2:	0003      	movs	r3, r0
 80033c4:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80033c6:	e01d      	b.n	8003404 <HAL_ADCEx_Calibration_Start+0xec>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80033c8:	f7ff fbae 	bl	8002b28 <HAL_GetTick>
 80033cc:	0002      	movs	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d916      	bls.n	8003404 <HAL_ADCEx_Calibration_Start+0xec>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	0fdb      	lsrs	r3, r3, #31
 80033de:	07da      	lsls	r2, r3, #31
 80033e0:	2380      	movs	r3, #128	; 0x80
 80033e2:	061b      	lsls	r3, r3, #24
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d10d      	bne.n	8003404 <HAL_ADCEx_Calibration_Start+0xec>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ec:	2212      	movs	r2, #18
 80033ee:	4393      	bics	r3, r2
 80033f0:	2210      	movs	r2, #16
 80033f2:	431a      	orrs	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	639a      	str	r2, [r3, #56]	; 0x38
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2234      	movs	r2, #52	; 0x34
 80033fc:	2100      	movs	r1, #0
 80033fe:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e02a      	b.n	800345a <HAL_ADCEx_Calibration_Start+0x142>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	0fdb      	lsrs	r3, r3, #31
 800340c:	07da      	lsls	r2, r3, #31
 800340e:	2380      	movs	r3, #128	; 0x80
 8003410:	061b      	lsls	r3, r3, #24
 8003412:	429a      	cmp	r2, r3
 8003414:	d0d8      	beq.n	80033c8 <HAL_ADCEx_Calibration_Start+0xb0>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68d9      	ldr	r1, [r3, #12]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68fa      	ldr	r2, [r7, #12]
 8003422:	430a      	orrs	r2, r1
 8003424:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800342a:	2203      	movs	r2, #3
 800342c:	4393      	bics	r3, r2
 800342e:	2201      	movs	r2, #1
 8003430:	431a      	orrs	r2, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	639a      	str	r2, [r3, #56]	; 0x38
 8003436:	e009      	b.n	800344c <HAL_ADCEx_Calibration_Start+0x134>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343c:	2220      	movs	r2, #32
 800343e:	431a      	orrs	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003444:	2317      	movs	r3, #23
 8003446:	18fb      	adds	r3, r7, r3
 8003448:	2201      	movs	r2, #1
 800344a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2234      	movs	r2, #52	; 0x34
 8003450:	2100      	movs	r1, #0
 8003452:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003454:	2317      	movs	r3, #23
 8003456:	18fb      	adds	r3, r7, r3
 8003458:	781b      	ldrb	r3, [r3, #0]
}
 800345a:	0018      	movs	r0, r3
 800345c:	46bd      	mov	sp, r7
 800345e:	b006      	add	sp, #24
 8003460:	bd80      	pop	{r7, pc}
 8003462:	46c0      	nop			; (mov r8, r8)
 8003464:	fffffefd 	.word	0xfffffefd

08003468 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	0002      	movs	r2, r0
 8003470:	1dfb      	adds	r3, r7, #7
 8003472:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003474:	1dfb      	adds	r3, r7, #7
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	2b7f      	cmp	r3, #127	; 0x7f
 800347a:	d809      	bhi.n	8003490 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800347c:	1dfb      	adds	r3, r7, #7
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	001a      	movs	r2, r3
 8003482:	231f      	movs	r3, #31
 8003484:	401a      	ands	r2, r3
 8003486:	4b04      	ldr	r3, [pc, #16]	; (8003498 <__NVIC_EnableIRQ+0x30>)
 8003488:	2101      	movs	r1, #1
 800348a:	4091      	lsls	r1, r2
 800348c:	000a      	movs	r2, r1
 800348e:	601a      	str	r2, [r3, #0]
  }
}
 8003490:	46c0      	nop			; (mov r8, r8)
 8003492:	46bd      	mov	sp, r7
 8003494:	b002      	add	sp, #8
 8003496:	bd80      	pop	{r7, pc}
 8003498:	e000e100 	.word	0xe000e100

0800349c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800349c:	b590      	push	{r4, r7, lr}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	0002      	movs	r2, r0
 80034a4:	6039      	str	r1, [r7, #0]
 80034a6:	1dfb      	adds	r3, r7, #7
 80034a8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80034aa:	1dfb      	adds	r3, r7, #7
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	2b7f      	cmp	r3, #127	; 0x7f
 80034b0:	d828      	bhi.n	8003504 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034b2:	4a2f      	ldr	r2, [pc, #188]	; (8003570 <__NVIC_SetPriority+0xd4>)
 80034b4:	1dfb      	adds	r3, r7, #7
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	b25b      	sxtb	r3, r3
 80034ba:	089b      	lsrs	r3, r3, #2
 80034bc:	33c0      	adds	r3, #192	; 0xc0
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	589b      	ldr	r3, [r3, r2]
 80034c2:	1dfa      	adds	r2, r7, #7
 80034c4:	7812      	ldrb	r2, [r2, #0]
 80034c6:	0011      	movs	r1, r2
 80034c8:	2203      	movs	r2, #3
 80034ca:	400a      	ands	r2, r1
 80034cc:	00d2      	lsls	r2, r2, #3
 80034ce:	21ff      	movs	r1, #255	; 0xff
 80034d0:	4091      	lsls	r1, r2
 80034d2:	000a      	movs	r2, r1
 80034d4:	43d2      	mvns	r2, r2
 80034d6:	401a      	ands	r2, r3
 80034d8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	019b      	lsls	r3, r3, #6
 80034de:	22ff      	movs	r2, #255	; 0xff
 80034e0:	401a      	ands	r2, r3
 80034e2:	1dfb      	adds	r3, r7, #7
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	0018      	movs	r0, r3
 80034e8:	2303      	movs	r3, #3
 80034ea:	4003      	ands	r3, r0
 80034ec:	00db      	lsls	r3, r3, #3
 80034ee:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034f0:	481f      	ldr	r0, [pc, #124]	; (8003570 <__NVIC_SetPriority+0xd4>)
 80034f2:	1dfb      	adds	r3, r7, #7
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	b25b      	sxtb	r3, r3
 80034f8:	089b      	lsrs	r3, r3, #2
 80034fa:	430a      	orrs	r2, r1
 80034fc:	33c0      	adds	r3, #192	; 0xc0
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003502:	e031      	b.n	8003568 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003504:	4a1b      	ldr	r2, [pc, #108]	; (8003574 <__NVIC_SetPriority+0xd8>)
 8003506:	1dfb      	adds	r3, r7, #7
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	0019      	movs	r1, r3
 800350c:	230f      	movs	r3, #15
 800350e:	400b      	ands	r3, r1
 8003510:	3b08      	subs	r3, #8
 8003512:	089b      	lsrs	r3, r3, #2
 8003514:	3306      	adds	r3, #6
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	18d3      	adds	r3, r2, r3
 800351a:	3304      	adds	r3, #4
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	1dfa      	adds	r2, r7, #7
 8003520:	7812      	ldrb	r2, [r2, #0]
 8003522:	0011      	movs	r1, r2
 8003524:	2203      	movs	r2, #3
 8003526:	400a      	ands	r2, r1
 8003528:	00d2      	lsls	r2, r2, #3
 800352a:	21ff      	movs	r1, #255	; 0xff
 800352c:	4091      	lsls	r1, r2
 800352e:	000a      	movs	r2, r1
 8003530:	43d2      	mvns	r2, r2
 8003532:	401a      	ands	r2, r3
 8003534:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	019b      	lsls	r3, r3, #6
 800353a:	22ff      	movs	r2, #255	; 0xff
 800353c:	401a      	ands	r2, r3
 800353e:	1dfb      	adds	r3, r7, #7
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	0018      	movs	r0, r3
 8003544:	2303      	movs	r3, #3
 8003546:	4003      	ands	r3, r0
 8003548:	00db      	lsls	r3, r3, #3
 800354a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800354c:	4809      	ldr	r0, [pc, #36]	; (8003574 <__NVIC_SetPriority+0xd8>)
 800354e:	1dfb      	adds	r3, r7, #7
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	001c      	movs	r4, r3
 8003554:	230f      	movs	r3, #15
 8003556:	4023      	ands	r3, r4
 8003558:	3b08      	subs	r3, #8
 800355a:	089b      	lsrs	r3, r3, #2
 800355c:	430a      	orrs	r2, r1
 800355e:	3306      	adds	r3, #6
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	18c3      	adds	r3, r0, r3
 8003564:	3304      	adds	r3, #4
 8003566:	601a      	str	r2, [r3, #0]
}
 8003568:	46c0      	nop			; (mov r8, r8)
 800356a:	46bd      	mov	sp, r7
 800356c:	b003      	add	sp, #12
 800356e:	bd90      	pop	{r4, r7, pc}
 8003570:	e000e100 	.word	0xe000e100
 8003574:	e000ed00 	.word	0xe000ed00

08003578 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	1e5a      	subs	r2, r3, #1
 8003584:	2380      	movs	r3, #128	; 0x80
 8003586:	045b      	lsls	r3, r3, #17
 8003588:	429a      	cmp	r2, r3
 800358a:	d301      	bcc.n	8003590 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800358c:	2301      	movs	r3, #1
 800358e:	e010      	b.n	80035b2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003590:	4b0a      	ldr	r3, [pc, #40]	; (80035bc <SysTick_Config+0x44>)
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	3a01      	subs	r2, #1
 8003596:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003598:	2301      	movs	r3, #1
 800359a:	425b      	negs	r3, r3
 800359c:	2103      	movs	r1, #3
 800359e:	0018      	movs	r0, r3
 80035a0:	f7ff ff7c 	bl	800349c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035a4:	4b05      	ldr	r3, [pc, #20]	; (80035bc <SysTick_Config+0x44>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035aa:	4b04      	ldr	r3, [pc, #16]	; (80035bc <SysTick_Config+0x44>)
 80035ac:	2207      	movs	r2, #7
 80035ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	0018      	movs	r0, r3
 80035b4:	46bd      	mov	sp, r7
 80035b6:	b002      	add	sp, #8
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	46c0      	nop			; (mov r8, r8)
 80035bc:	e000e010 	.word	0xe000e010

080035c0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60b9      	str	r1, [r7, #8]
 80035c8:	607a      	str	r2, [r7, #4]
 80035ca:	210f      	movs	r1, #15
 80035cc:	187b      	adds	r3, r7, r1
 80035ce:	1c02      	adds	r2, r0, #0
 80035d0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80035d2:	68ba      	ldr	r2, [r7, #8]
 80035d4:	187b      	adds	r3, r7, r1
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	b25b      	sxtb	r3, r3
 80035da:	0011      	movs	r1, r2
 80035dc:	0018      	movs	r0, r3
 80035de:	f7ff ff5d 	bl	800349c <__NVIC_SetPriority>
}
 80035e2:	46c0      	nop			; (mov r8, r8)
 80035e4:	46bd      	mov	sp, r7
 80035e6:	b004      	add	sp, #16
 80035e8:	bd80      	pop	{r7, pc}

080035ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b082      	sub	sp, #8
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	0002      	movs	r2, r0
 80035f2:	1dfb      	adds	r3, r7, #7
 80035f4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035f6:	1dfb      	adds	r3, r7, #7
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	b25b      	sxtb	r3, r3
 80035fc:	0018      	movs	r0, r3
 80035fe:	f7ff ff33 	bl	8003468 <__NVIC_EnableIRQ>
}
 8003602:	46c0      	nop			; (mov r8, r8)
 8003604:	46bd      	mov	sp, r7
 8003606:	b002      	add	sp, #8
 8003608:	bd80      	pop	{r7, pc}

0800360a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800360a:	b580      	push	{r7, lr}
 800360c:	b082      	sub	sp, #8
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	0018      	movs	r0, r3
 8003616:	f7ff ffaf 	bl	8003578 <SysTick_Config>
 800361a:	0003      	movs	r3, r0
}
 800361c:	0018      	movs	r0, r3
 800361e:	46bd      	mov	sp, r7
 8003620:	b002      	add	sp, #8
 8003622:	bd80      	pop	{r7, pc}

08003624 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2221      	movs	r2, #33	; 0x21
 8003630:	5c9b      	ldrb	r3, [r3, r2]
 8003632:	b2db      	uxtb	r3, r3
 8003634:	2b02      	cmp	r3, #2
 8003636:	d008      	beq.n	800364a <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2204      	movs	r2, #4
 800363c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2220      	movs	r2, #32
 8003642:	2100      	movs	r1, #0
 8003644:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e020      	b.n	800368c <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	210e      	movs	r1, #14
 8003656:	438a      	bics	r2, r1
 8003658:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2101      	movs	r1, #1
 8003666:	438a      	bics	r2, r1
 8003668:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003672:	2101      	movs	r1, #1
 8003674:	4091      	lsls	r1, r2
 8003676:	000a      	movs	r2, r1
 8003678:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2221      	movs	r2, #33	; 0x21
 800367e:	2101      	movs	r1, #1
 8003680:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2220      	movs	r2, #32
 8003686:	2100      	movs	r1, #0
 8003688:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800368a:	2300      	movs	r3, #0
}
 800368c:	0018      	movs	r0, r3
 800368e:	46bd      	mov	sp, r7
 8003690:	b002      	add	sp, #8
 8003692:	bd80      	pop	{r7, pc}

08003694 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800369c:	210f      	movs	r1, #15
 800369e:	187b      	adds	r3, r7, r1
 80036a0:	2200      	movs	r2, #0
 80036a2:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2221      	movs	r2, #33	; 0x21
 80036a8:	5c9b      	ldrb	r3, [r3, r2]
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d006      	beq.n	80036be <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2204      	movs	r2, #4
 80036b4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80036b6:	187b      	adds	r3, r7, r1
 80036b8:	2201      	movs	r2, #1
 80036ba:	701a      	strb	r2, [r3, #0]
 80036bc:	e028      	b.n	8003710 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	210e      	movs	r1, #14
 80036ca:	438a      	bics	r2, r1
 80036cc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2101      	movs	r1, #1
 80036da:	438a      	bics	r2, r1
 80036dc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036e6:	2101      	movs	r1, #1
 80036e8:	4091      	lsls	r1, r2
 80036ea:	000a      	movs	r2, r1
 80036ec:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2221      	movs	r2, #33	; 0x21
 80036f2:	2101      	movs	r1, #1
 80036f4:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2220      	movs	r2, #32
 80036fa:	2100      	movs	r1, #0
 80036fc:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003702:	2b00      	cmp	r3, #0
 8003704:	d004      	beq.n	8003710 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	0010      	movs	r0, r2
 800370e:	4798      	blx	r3
    } 
  }
  return status;
 8003710:	230f      	movs	r3, #15
 8003712:	18fb      	adds	r3, r7, r3
 8003714:	781b      	ldrb	r3, [r3, #0]
}
 8003716:	0018      	movs	r0, r3
 8003718:	46bd      	mov	sp, r7
 800371a:	b004      	add	sp, #16
 800371c:	bd80      	pop	{r7, pc}
	...

08003720 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800372a:	2300      	movs	r3, #0
 800372c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800372e:	e155      	b.n	80039dc <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2101      	movs	r1, #1
 8003736:	697a      	ldr	r2, [r7, #20]
 8003738:	4091      	lsls	r1, r2
 800373a:	000a      	movs	r2, r1
 800373c:	4013      	ands	r3, r2
 800373e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d100      	bne.n	8003748 <HAL_GPIO_Init+0x28>
 8003746:	e146      	b.n	80039d6 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	2203      	movs	r2, #3
 800374e:	4013      	ands	r3, r2
 8003750:	2b01      	cmp	r3, #1
 8003752:	d005      	beq.n	8003760 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	2203      	movs	r2, #3
 800375a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800375c:	2b02      	cmp	r3, #2
 800375e:	d130      	bne.n	80037c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	005b      	lsls	r3, r3, #1
 800376a:	2203      	movs	r2, #3
 800376c:	409a      	lsls	r2, r3
 800376e:	0013      	movs	r3, r2
 8003770:	43da      	mvns	r2, r3
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	4013      	ands	r3, r2
 8003776:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	68da      	ldr	r2, [r3, #12]
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	005b      	lsls	r3, r3, #1
 8003780:	409a      	lsls	r2, r3
 8003782:	0013      	movs	r3, r2
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	4313      	orrs	r3, r2
 8003788:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003796:	2201      	movs	r2, #1
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	409a      	lsls	r2, r3
 800379c:	0013      	movs	r3, r2
 800379e:	43da      	mvns	r2, r3
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	4013      	ands	r3, r2
 80037a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	091b      	lsrs	r3, r3, #4
 80037ac:	2201      	movs	r2, #1
 80037ae:	401a      	ands	r2, r3
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	409a      	lsls	r2, r3
 80037b4:	0013      	movs	r3, r2
 80037b6:	693a      	ldr	r2, [r7, #16]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	693a      	ldr	r2, [r7, #16]
 80037c0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	2203      	movs	r2, #3
 80037c8:	4013      	ands	r3, r2
 80037ca:	2b03      	cmp	r3, #3
 80037cc:	d017      	beq.n	80037fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	005b      	lsls	r3, r3, #1
 80037d8:	2203      	movs	r2, #3
 80037da:	409a      	lsls	r2, r3
 80037dc:	0013      	movs	r3, r2
 80037de:	43da      	mvns	r2, r3
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	4013      	ands	r3, r2
 80037e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	689a      	ldr	r2, [r3, #8]
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	005b      	lsls	r3, r3, #1
 80037ee:	409a      	lsls	r2, r3
 80037f0:	0013      	movs	r3, r2
 80037f2:	693a      	ldr	r2, [r7, #16]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	693a      	ldr	r2, [r7, #16]
 80037fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	2203      	movs	r2, #3
 8003804:	4013      	ands	r3, r2
 8003806:	2b02      	cmp	r3, #2
 8003808:	d123      	bne.n	8003852 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	08da      	lsrs	r2, r3, #3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	3208      	adds	r2, #8
 8003812:	0092      	lsls	r2, r2, #2
 8003814:	58d3      	ldr	r3, [r2, r3]
 8003816:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	2207      	movs	r2, #7
 800381c:	4013      	ands	r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	220f      	movs	r2, #15
 8003822:	409a      	lsls	r2, r3
 8003824:	0013      	movs	r3, r2
 8003826:	43da      	mvns	r2, r3
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	4013      	ands	r3, r2
 800382c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	691a      	ldr	r2, [r3, #16]
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	2107      	movs	r1, #7
 8003836:	400b      	ands	r3, r1
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	409a      	lsls	r2, r3
 800383c:	0013      	movs	r3, r2
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	4313      	orrs	r3, r2
 8003842:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	08da      	lsrs	r2, r3, #3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	3208      	adds	r2, #8
 800384c:	0092      	lsls	r2, r2, #2
 800384e:	6939      	ldr	r1, [r7, #16]
 8003850:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	005b      	lsls	r3, r3, #1
 800385c:	2203      	movs	r2, #3
 800385e:	409a      	lsls	r2, r3
 8003860:	0013      	movs	r3, r2
 8003862:	43da      	mvns	r2, r3
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	4013      	ands	r3, r2
 8003868:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	2203      	movs	r2, #3
 8003870:	401a      	ands	r2, r3
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	005b      	lsls	r3, r3, #1
 8003876:	409a      	lsls	r2, r3
 8003878:	0013      	movs	r3, r2
 800387a:	693a      	ldr	r2, [r7, #16]
 800387c:	4313      	orrs	r3, r2
 800387e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	693a      	ldr	r2, [r7, #16]
 8003884:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685a      	ldr	r2, [r3, #4]
 800388a:	23c0      	movs	r3, #192	; 0xc0
 800388c:	029b      	lsls	r3, r3, #10
 800388e:	4013      	ands	r3, r2
 8003890:	d100      	bne.n	8003894 <HAL_GPIO_Init+0x174>
 8003892:	e0a0      	b.n	80039d6 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003894:	4b57      	ldr	r3, [pc, #348]	; (80039f4 <HAL_GPIO_Init+0x2d4>)
 8003896:	699a      	ldr	r2, [r3, #24]
 8003898:	4b56      	ldr	r3, [pc, #344]	; (80039f4 <HAL_GPIO_Init+0x2d4>)
 800389a:	2101      	movs	r1, #1
 800389c:	430a      	orrs	r2, r1
 800389e:	619a      	str	r2, [r3, #24]
 80038a0:	4b54      	ldr	r3, [pc, #336]	; (80039f4 <HAL_GPIO_Init+0x2d4>)
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	2201      	movs	r2, #1
 80038a6:	4013      	ands	r3, r2
 80038a8:	60bb      	str	r3, [r7, #8]
 80038aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80038ac:	4a52      	ldr	r2, [pc, #328]	; (80039f8 <HAL_GPIO_Init+0x2d8>)
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	089b      	lsrs	r3, r3, #2
 80038b2:	3302      	adds	r3, #2
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	589b      	ldr	r3, [r3, r2]
 80038b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	2203      	movs	r2, #3
 80038be:	4013      	ands	r3, r2
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	220f      	movs	r2, #15
 80038c4:	409a      	lsls	r2, r3
 80038c6:	0013      	movs	r3, r2
 80038c8:	43da      	mvns	r2, r3
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	4013      	ands	r3, r2
 80038ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	2390      	movs	r3, #144	; 0x90
 80038d4:	05db      	lsls	r3, r3, #23
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d019      	beq.n	800390e <HAL_GPIO_Init+0x1ee>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a47      	ldr	r2, [pc, #284]	; (80039fc <HAL_GPIO_Init+0x2dc>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d013      	beq.n	800390a <HAL_GPIO_Init+0x1ea>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a46      	ldr	r2, [pc, #280]	; (8003a00 <HAL_GPIO_Init+0x2e0>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d00d      	beq.n	8003906 <HAL_GPIO_Init+0x1e6>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a45      	ldr	r2, [pc, #276]	; (8003a04 <HAL_GPIO_Init+0x2e4>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d007      	beq.n	8003902 <HAL_GPIO_Init+0x1e2>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a44      	ldr	r2, [pc, #272]	; (8003a08 <HAL_GPIO_Init+0x2e8>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d101      	bne.n	80038fe <HAL_GPIO_Init+0x1de>
 80038fa:	2304      	movs	r3, #4
 80038fc:	e008      	b.n	8003910 <HAL_GPIO_Init+0x1f0>
 80038fe:	2305      	movs	r3, #5
 8003900:	e006      	b.n	8003910 <HAL_GPIO_Init+0x1f0>
 8003902:	2303      	movs	r3, #3
 8003904:	e004      	b.n	8003910 <HAL_GPIO_Init+0x1f0>
 8003906:	2302      	movs	r3, #2
 8003908:	e002      	b.n	8003910 <HAL_GPIO_Init+0x1f0>
 800390a:	2301      	movs	r3, #1
 800390c:	e000      	b.n	8003910 <HAL_GPIO_Init+0x1f0>
 800390e:	2300      	movs	r3, #0
 8003910:	697a      	ldr	r2, [r7, #20]
 8003912:	2103      	movs	r1, #3
 8003914:	400a      	ands	r2, r1
 8003916:	0092      	lsls	r2, r2, #2
 8003918:	4093      	lsls	r3, r2
 800391a:	693a      	ldr	r2, [r7, #16]
 800391c:	4313      	orrs	r3, r2
 800391e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003920:	4935      	ldr	r1, [pc, #212]	; (80039f8 <HAL_GPIO_Init+0x2d8>)
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	089b      	lsrs	r3, r3, #2
 8003926:	3302      	adds	r3, #2
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800392e:	4b37      	ldr	r3, [pc, #220]	; (8003a0c <HAL_GPIO_Init+0x2ec>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	43da      	mvns	r2, r3
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	4013      	ands	r3, r2
 800393c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	685a      	ldr	r2, [r3, #4]
 8003942:	2380      	movs	r3, #128	; 0x80
 8003944:	025b      	lsls	r3, r3, #9
 8003946:	4013      	ands	r3, r2
 8003948:	d003      	beq.n	8003952 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800394a:	693a      	ldr	r2, [r7, #16]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	4313      	orrs	r3, r2
 8003950:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003952:	4b2e      	ldr	r3, [pc, #184]	; (8003a0c <HAL_GPIO_Init+0x2ec>)
 8003954:	693a      	ldr	r2, [r7, #16]
 8003956:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003958:	4b2c      	ldr	r3, [pc, #176]	; (8003a0c <HAL_GPIO_Init+0x2ec>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	43da      	mvns	r2, r3
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	4013      	ands	r3, r2
 8003966:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	685a      	ldr	r2, [r3, #4]
 800396c:	2380      	movs	r3, #128	; 0x80
 800396e:	029b      	lsls	r3, r3, #10
 8003970:	4013      	ands	r3, r2
 8003972:	d003      	beq.n	800397c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8003974:	693a      	ldr	r2, [r7, #16]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	4313      	orrs	r3, r2
 800397a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800397c:	4b23      	ldr	r3, [pc, #140]	; (8003a0c <HAL_GPIO_Init+0x2ec>)
 800397e:	693a      	ldr	r2, [r7, #16]
 8003980:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003982:	4b22      	ldr	r3, [pc, #136]	; (8003a0c <HAL_GPIO_Init+0x2ec>)
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	43da      	mvns	r2, r3
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	4013      	ands	r3, r2
 8003990:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	685a      	ldr	r2, [r3, #4]
 8003996:	2380      	movs	r3, #128	; 0x80
 8003998:	035b      	lsls	r3, r3, #13
 800399a:	4013      	ands	r3, r2
 800399c:	d003      	beq.n	80039a6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80039a6:	4b19      	ldr	r3, [pc, #100]	; (8003a0c <HAL_GPIO_Init+0x2ec>)
 80039a8:	693a      	ldr	r2, [r7, #16]
 80039aa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80039ac:	4b17      	ldr	r3, [pc, #92]	; (8003a0c <HAL_GPIO_Init+0x2ec>)
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	43da      	mvns	r2, r3
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	4013      	ands	r3, r2
 80039ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685a      	ldr	r2, [r3, #4]
 80039c0:	2380      	movs	r3, #128	; 0x80
 80039c2:	039b      	lsls	r3, r3, #14
 80039c4:	4013      	ands	r3, r2
 80039c6:	d003      	beq.n	80039d0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80039c8:	693a      	ldr	r2, [r7, #16]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80039d0:	4b0e      	ldr	r3, [pc, #56]	; (8003a0c <HAL_GPIO_Init+0x2ec>)
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	3301      	adds	r3, #1
 80039da:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	40da      	lsrs	r2, r3
 80039e4:	1e13      	subs	r3, r2, #0
 80039e6:	d000      	beq.n	80039ea <HAL_GPIO_Init+0x2ca>
 80039e8:	e6a2      	b.n	8003730 <HAL_GPIO_Init+0x10>
  } 
}
 80039ea:	46c0      	nop			; (mov r8, r8)
 80039ec:	46c0      	nop			; (mov r8, r8)
 80039ee:	46bd      	mov	sp, r7
 80039f0:	b006      	add	sp, #24
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	40021000 	.word	0x40021000
 80039f8:	40010000 	.word	0x40010000
 80039fc:	48000400 	.word	0x48000400
 8003a00:	48000800 	.word	0x48000800
 8003a04:	48000c00 	.word	0x48000c00
 8003a08:	48001000 	.word	0x48001000
 8003a0c:	40010400 	.word	0x40010400

08003a10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	0008      	movs	r0, r1
 8003a1a:	0011      	movs	r1, r2
 8003a1c:	1cbb      	adds	r3, r7, #2
 8003a1e:	1c02      	adds	r2, r0, #0
 8003a20:	801a      	strh	r2, [r3, #0]
 8003a22:	1c7b      	adds	r3, r7, #1
 8003a24:	1c0a      	adds	r2, r1, #0
 8003a26:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a28:	1c7b      	adds	r3, r7, #1
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d004      	beq.n	8003a3a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a30:	1cbb      	adds	r3, r7, #2
 8003a32:	881a      	ldrh	r2, [r3, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a38:	e003      	b.n	8003a42 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a3a:	1cbb      	adds	r3, r7, #2
 8003a3c:	881a      	ldrh	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003a42:	46c0      	nop			; (mov r8, r8)
 8003a44:	46bd      	mov	sp, r7
 8003a46:	b002      	add	sp, #8
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b084      	sub	sp, #16
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
 8003a52:	000a      	movs	r2, r1
 8003a54:	1cbb      	adds	r3, r7, #2
 8003a56:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	695b      	ldr	r3, [r3, #20]
 8003a5c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003a5e:	1cbb      	adds	r3, r7, #2
 8003a60:	881b      	ldrh	r3, [r3, #0]
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	4013      	ands	r3, r2
 8003a66:	041a      	lsls	r2, r3, #16
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	43db      	mvns	r3, r3
 8003a6c:	1cb9      	adds	r1, r7, #2
 8003a6e:	8809      	ldrh	r1, [r1, #0]
 8003a70:	400b      	ands	r3, r1
 8003a72:	431a      	orrs	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	619a      	str	r2, [r3, #24]
}
 8003a78:	46c0      	nop			; (mov r8, r8)
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	b004      	add	sp, #16
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d101      	bne.n	8003a92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e082      	b.n	8003b98 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2241      	movs	r2, #65	; 0x41
 8003a96:	5c9b      	ldrb	r3, [r3, r2]
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d107      	bne.n	8003aae <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2240      	movs	r2, #64	; 0x40
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	0018      	movs	r0, r3
 8003aaa:	f7fe feb5 	bl	8002818 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2241      	movs	r2, #65	; 0x41
 8003ab2:	2124      	movs	r1, #36	; 0x24
 8003ab4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2101      	movs	r1, #1
 8003ac2:	438a      	bics	r2, r1
 8003ac4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685a      	ldr	r2, [r3, #4]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4934      	ldr	r1, [pc, #208]	; (8003ba0 <HAL_I2C_Init+0x120>)
 8003ad0:	400a      	ands	r2, r1
 8003ad2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	689a      	ldr	r2, [r3, #8]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4931      	ldr	r1, [pc, #196]	; (8003ba4 <HAL_I2C_Init+0x124>)
 8003ae0:	400a      	ands	r2, r1
 8003ae2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d108      	bne.n	8003afe <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	689a      	ldr	r2, [r3, #8]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2180      	movs	r1, #128	; 0x80
 8003af6:	0209      	lsls	r1, r1, #8
 8003af8:	430a      	orrs	r2, r1
 8003afa:	609a      	str	r2, [r3, #8]
 8003afc:	e007      	b.n	8003b0e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	689a      	ldr	r2, [r3, #8]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2184      	movs	r1, #132	; 0x84
 8003b08:	0209      	lsls	r1, r1, #8
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d104      	bne.n	8003b20 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2280      	movs	r2, #128	; 0x80
 8003b1c:	0112      	lsls	r2, r2, #4
 8003b1e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	685a      	ldr	r2, [r3, #4]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	491f      	ldr	r1, [pc, #124]	; (8003ba8 <HAL_I2C_Init+0x128>)
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68da      	ldr	r2, [r3, #12]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	491a      	ldr	r1, [pc, #104]	; (8003ba4 <HAL_I2C_Init+0x124>)
 8003b3c:	400a      	ands	r2, r1
 8003b3e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	691a      	ldr	r2, [r3, #16]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	695b      	ldr	r3, [r3, #20]
 8003b48:	431a      	orrs	r2, r3
 8003b4a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	430a      	orrs	r2, r1
 8003b58:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	69d9      	ldr	r1, [r3, #28]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a1a      	ldr	r2, [r3, #32]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	430a      	orrs	r2, r1
 8003b68:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2101      	movs	r1, #1
 8003b76:	430a      	orrs	r2, r1
 8003b78:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2241      	movs	r2, #65	; 0x41
 8003b84:	2120      	movs	r1, #32
 8003b86:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2242      	movs	r2, #66	; 0x42
 8003b92:	2100      	movs	r1, #0
 8003b94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	0018      	movs	r0, r3
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	b002      	add	sp, #8
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	f0ffffff 	.word	0xf0ffffff
 8003ba4:	ffff7fff 	.word	0xffff7fff
 8003ba8:	02008000 	.word	0x02008000

08003bac <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003bac:	b590      	push	{r4, r7, lr}
 8003bae:	b089      	sub	sp, #36	; 0x24
 8003bb0:	af02      	add	r7, sp, #8
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	0008      	movs	r0, r1
 8003bb6:	607a      	str	r2, [r7, #4]
 8003bb8:	0019      	movs	r1, r3
 8003bba:	230a      	movs	r3, #10
 8003bbc:	18fb      	adds	r3, r7, r3
 8003bbe:	1c02      	adds	r2, r0, #0
 8003bc0:	801a      	strh	r2, [r3, #0]
 8003bc2:	2308      	movs	r3, #8
 8003bc4:	18fb      	adds	r3, r7, r3
 8003bc6:	1c0a      	adds	r2, r1, #0
 8003bc8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2241      	movs	r2, #65	; 0x41
 8003bce:	5c9b      	ldrb	r3, [r3, r2]
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b20      	cmp	r3, #32
 8003bd4:	d000      	beq.n	8003bd8 <HAL_I2C_Master_Transmit+0x2c>
 8003bd6:	e0e7      	b.n	8003da8 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2240      	movs	r2, #64	; 0x40
 8003bdc:	5c9b      	ldrb	r3, [r3, r2]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d101      	bne.n	8003be6 <HAL_I2C_Master_Transmit+0x3a>
 8003be2:	2302      	movs	r3, #2
 8003be4:	e0e1      	b.n	8003daa <HAL_I2C_Master_Transmit+0x1fe>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2240      	movs	r2, #64	; 0x40
 8003bea:	2101      	movs	r1, #1
 8003bec:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003bee:	f7fe ff9b 	bl	8002b28 <HAL_GetTick>
 8003bf2:	0003      	movs	r3, r0
 8003bf4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003bf6:	2380      	movs	r3, #128	; 0x80
 8003bf8:	0219      	lsls	r1, r3, #8
 8003bfa:	68f8      	ldr	r0, [r7, #12]
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	9300      	str	r3, [sp, #0]
 8003c00:	2319      	movs	r3, #25
 8003c02:	2201      	movs	r2, #1
 8003c04:	f000 fc24 	bl	8004450 <I2C_WaitOnFlagUntilTimeout>
 8003c08:	1e03      	subs	r3, r0, #0
 8003c0a:	d001      	beq.n	8003c10 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e0cc      	b.n	8003daa <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2241      	movs	r2, #65	; 0x41
 8003c14:	2121      	movs	r1, #33	; 0x21
 8003c16:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2242      	movs	r2, #66	; 0x42
 8003c1c:	2110      	movs	r1, #16
 8003c1e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2200      	movs	r2, #0
 8003c24:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2208      	movs	r2, #8
 8003c30:	18ba      	adds	r2, r7, r2
 8003c32:	8812      	ldrh	r2, [r2, #0]
 8003c34:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	2bff      	cmp	r3, #255	; 0xff
 8003c44:	d911      	bls.n	8003c6a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	22ff      	movs	r2, #255	; 0xff
 8003c4a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c50:	b2da      	uxtb	r2, r3
 8003c52:	2380      	movs	r3, #128	; 0x80
 8003c54:	045c      	lsls	r4, r3, #17
 8003c56:	230a      	movs	r3, #10
 8003c58:	18fb      	adds	r3, r7, r3
 8003c5a:	8819      	ldrh	r1, [r3, #0]
 8003c5c:	68f8      	ldr	r0, [r7, #12]
 8003c5e:	4b55      	ldr	r3, [pc, #340]	; (8003db4 <HAL_I2C_Master_Transmit+0x208>)
 8003c60:	9300      	str	r3, [sp, #0]
 8003c62:	0023      	movs	r3, r4
 8003c64:	f000 fd28 	bl	80046b8 <I2C_TransferConfig>
 8003c68:	e075      	b.n	8003d56 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c78:	b2da      	uxtb	r2, r3
 8003c7a:	2380      	movs	r3, #128	; 0x80
 8003c7c:	049c      	lsls	r4, r3, #18
 8003c7e:	230a      	movs	r3, #10
 8003c80:	18fb      	adds	r3, r7, r3
 8003c82:	8819      	ldrh	r1, [r3, #0]
 8003c84:	68f8      	ldr	r0, [r7, #12]
 8003c86:	4b4b      	ldr	r3, [pc, #300]	; (8003db4 <HAL_I2C_Master_Transmit+0x208>)
 8003c88:	9300      	str	r3, [sp, #0]
 8003c8a:	0023      	movs	r3, r4
 8003c8c:	f000 fd14 	bl	80046b8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003c90:	e061      	b.n	8003d56 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c92:	697a      	ldr	r2, [r7, #20]
 8003c94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	0018      	movs	r0, r3
 8003c9a:	f000 fc18 	bl	80044ce <I2C_WaitOnTXISFlagUntilTimeout>
 8003c9e:	1e03      	subs	r3, r0, #0
 8003ca0:	d001      	beq.n	8003ca6 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e081      	b.n	8003daa <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003caa:	781a      	ldrb	r2, [r3, #0]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb6:	1c5a      	adds	r2, r3, #1
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	b29a      	uxth	r2, r3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	b29a      	uxth	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d03a      	beq.n	8003d56 <HAL_I2C_Master_Transmit+0x1aa>
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d136      	bne.n	8003d56 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003ce8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	9300      	str	r3, [sp, #0]
 8003cf0:	0013      	movs	r3, r2
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	2180      	movs	r1, #128	; 0x80
 8003cf6:	f000 fbab 	bl	8004450 <I2C_WaitOnFlagUntilTimeout>
 8003cfa:	1e03      	subs	r3, r0, #0
 8003cfc:	d001      	beq.n	8003d02 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e053      	b.n	8003daa <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	2bff      	cmp	r3, #255	; 0xff
 8003d0a:	d911      	bls.n	8003d30 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	22ff      	movs	r2, #255	; 0xff
 8003d10:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d16:	b2da      	uxtb	r2, r3
 8003d18:	2380      	movs	r3, #128	; 0x80
 8003d1a:	045c      	lsls	r4, r3, #17
 8003d1c:	230a      	movs	r3, #10
 8003d1e:	18fb      	adds	r3, r7, r3
 8003d20:	8819      	ldrh	r1, [r3, #0]
 8003d22:	68f8      	ldr	r0, [r7, #12]
 8003d24:	2300      	movs	r3, #0
 8003d26:	9300      	str	r3, [sp, #0]
 8003d28:	0023      	movs	r3, r4
 8003d2a:	f000 fcc5 	bl	80046b8 <I2C_TransferConfig>
 8003d2e:	e012      	b.n	8003d56 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d3e:	b2da      	uxtb	r2, r3
 8003d40:	2380      	movs	r3, #128	; 0x80
 8003d42:	049c      	lsls	r4, r3, #18
 8003d44:	230a      	movs	r3, #10
 8003d46:	18fb      	adds	r3, r7, r3
 8003d48:	8819      	ldrh	r1, [r3, #0]
 8003d4a:	68f8      	ldr	r0, [r7, #12]
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	9300      	str	r3, [sp, #0]
 8003d50:	0023      	movs	r3, r4
 8003d52:	f000 fcb1 	bl	80046b8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d198      	bne.n	8003c92 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d60:	697a      	ldr	r2, [r7, #20]
 8003d62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	0018      	movs	r0, r3
 8003d68:	f000 fbf0 	bl	800454c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d6c:	1e03      	subs	r3, r0, #0
 8003d6e:	d001      	beq.n	8003d74 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e01a      	b.n	8003daa <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2220      	movs	r2, #32
 8003d7a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	685a      	ldr	r2, [r3, #4]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	490c      	ldr	r1, [pc, #48]	; (8003db8 <HAL_I2C_Master_Transmit+0x20c>)
 8003d88:	400a      	ands	r2, r1
 8003d8a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2241      	movs	r2, #65	; 0x41
 8003d90:	2120      	movs	r1, #32
 8003d92:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2242      	movs	r2, #66	; 0x42
 8003d98:	2100      	movs	r1, #0
 8003d9a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2240      	movs	r2, #64	; 0x40
 8003da0:	2100      	movs	r1, #0
 8003da2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003da4:	2300      	movs	r3, #0
 8003da6:	e000      	b.n	8003daa <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8003da8:	2302      	movs	r3, #2
  }
}
 8003daa:	0018      	movs	r0, r3
 8003dac:	46bd      	mov	sp, r7
 8003dae:	b007      	add	sp, #28
 8003db0:	bd90      	pop	{r4, r7, pc}
 8003db2:	46c0      	nop			; (mov r8, r8)
 8003db4:	80002000 	.word	0x80002000
 8003db8:	fe00e800 	.word	0xfe00e800

08003dbc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dbc:	b590      	push	{r4, r7, lr}
 8003dbe:	b089      	sub	sp, #36	; 0x24
 8003dc0:	af02      	add	r7, sp, #8
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	000c      	movs	r4, r1
 8003dc6:	0010      	movs	r0, r2
 8003dc8:	0019      	movs	r1, r3
 8003dca:	230a      	movs	r3, #10
 8003dcc:	18fb      	adds	r3, r7, r3
 8003dce:	1c22      	adds	r2, r4, #0
 8003dd0:	801a      	strh	r2, [r3, #0]
 8003dd2:	2308      	movs	r3, #8
 8003dd4:	18fb      	adds	r3, r7, r3
 8003dd6:	1c02      	adds	r2, r0, #0
 8003dd8:	801a      	strh	r2, [r3, #0]
 8003dda:	1dbb      	adds	r3, r7, #6
 8003ddc:	1c0a      	adds	r2, r1, #0
 8003dde:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2241      	movs	r2, #65	; 0x41
 8003de4:	5c9b      	ldrb	r3, [r3, r2]
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	2b20      	cmp	r3, #32
 8003dea:	d000      	beq.n	8003dee <HAL_I2C_Mem_Write+0x32>
 8003dec:	e10c      	b.n	8004008 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d004      	beq.n	8003dfe <HAL_I2C_Mem_Write+0x42>
 8003df4:	232c      	movs	r3, #44	; 0x2c
 8003df6:	18fb      	adds	r3, r7, r3
 8003df8:	881b      	ldrh	r3, [r3, #0]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d105      	bne.n	8003e0a <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2280      	movs	r2, #128	; 0x80
 8003e02:	0092      	lsls	r2, r2, #2
 8003e04:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e0ff      	b.n	800400a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2240      	movs	r2, #64	; 0x40
 8003e0e:	5c9b      	ldrb	r3, [r3, r2]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d101      	bne.n	8003e18 <HAL_I2C_Mem_Write+0x5c>
 8003e14:	2302      	movs	r3, #2
 8003e16:	e0f8      	b.n	800400a <HAL_I2C_Mem_Write+0x24e>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2240      	movs	r2, #64	; 0x40
 8003e1c:	2101      	movs	r1, #1
 8003e1e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003e20:	f7fe fe82 	bl	8002b28 <HAL_GetTick>
 8003e24:	0003      	movs	r3, r0
 8003e26:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e28:	2380      	movs	r3, #128	; 0x80
 8003e2a:	0219      	lsls	r1, r3, #8
 8003e2c:	68f8      	ldr	r0, [r7, #12]
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	9300      	str	r3, [sp, #0]
 8003e32:	2319      	movs	r3, #25
 8003e34:	2201      	movs	r2, #1
 8003e36:	f000 fb0b 	bl	8004450 <I2C_WaitOnFlagUntilTimeout>
 8003e3a:	1e03      	subs	r3, r0, #0
 8003e3c:	d001      	beq.n	8003e42 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e0e3      	b.n	800400a <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2241      	movs	r2, #65	; 0x41
 8003e46:	2121      	movs	r1, #33	; 0x21
 8003e48:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2242      	movs	r2, #66	; 0x42
 8003e4e:	2140      	movs	r1, #64	; 0x40
 8003e50:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2200      	movs	r2, #0
 8003e56:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e5c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	222c      	movs	r2, #44	; 0x2c
 8003e62:	18ba      	adds	r2, r7, r2
 8003e64:	8812      	ldrh	r2, [r2, #0]
 8003e66:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e6e:	1dbb      	adds	r3, r7, #6
 8003e70:	881c      	ldrh	r4, [r3, #0]
 8003e72:	2308      	movs	r3, #8
 8003e74:	18fb      	adds	r3, r7, r3
 8003e76:	881a      	ldrh	r2, [r3, #0]
 8003e78:	230a      	movs	r3, #10
 8003e7a:	18fb      	adds	r3, r7, r3
 8003e7c:	8819      	ldrh	r1, [r3, #0]
 8003e7e:	68f8      	ldr	r0, [r7, #12]
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	9301      	str	r3, [sp, #4]
 8003e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e86:	9300      	str	r3, [sp, #0]
 8003e88:	0023      	movs	r3, r4
 8003e8a:	f000 f9f9 	bl	8004280 <I2C_RequestMemoryWrite>
 8003e8e:	1e03      	subs	r3, r0, #0
 8003e90:	d005      	beq.n	8003e9e <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2240      	movs	r2, #64	; 0x40
 8003e96:	2100      	movs	r1, #0
 8003e98:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e0b5      	b.n	800400a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	2bff      	cmp	r3, #255	; 0xff
 8003ea6:	d911      	bls.n	8003ecc <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	22ff      	movs	r2, #255	; 0xff
 8003eac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eb2:	b2da      	uxtb	r2, r3
 8003eb4:	2380      	movs	r3, #128	; 0x80
 8003eb6:	045c      	lsls	r4, r3, #17
 8003eb8:	230a      	movs	r3, #10
 8003eba:	18fb      	adds	r3, r7, r3
 8003ebc:	8819      	ldrh	r1, [r3, #0]
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	9300      	str	r3, [sp, #0]
 8003ec4:	0023      	movs	r3, r4
 8003ec6:	f000 fbf7 	bl	80046b8 <I2C_TransferConfig>
 8003eca:	e012      	b.n	8003ef2 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ed0:	b29a      	uxth	r2, r3
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eda:	b2da      	uxtb	r2, r3
 8003edc:	2380      	movs	r3, #128	; 0x80
 8003ede:	049c      	lsls	r4, r3, #18
 8003ee0:	230a      	movs	r3, #10
 8003ee2:	18fb      	adds	r3, r7, r3
 8003ee4:	8819      	ldrh	r1, [r3, #0]
 8003ee6:	68f8      	ldr	r0, [r7, #12]
 8003ee8:	2300      	movs	r3, #0
 8003eea:	9300      	str	r3, [sp, #0]
 8003eec:	0023      	movs	r3, r4
 8003eee:	f000 fbe3 	bl	80046b8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ef2:	697a      	ldr	r2, [r7, #20]
 8003ef4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	0018      	movs	r0, r3
 8003efa:	f000 fae8 	bl	80044ce <I2C_WaitOnTXISFlagUntilTimeout>
 8003efe:	1e03      	subs	r3, r0, #0
 8003f00:	d001      	beq.n	8003f06 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e081      	b.n	800400a <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0a:	781a      	ldrb	r2, [r3, #0]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f16:	1c5a      	adds	r2, r3, #1
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	3b01      	subs	r3, #1
 8003f24:	b29a      	uxth	r2, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d03a      	beq.n	8003fb6 <HAL_I2C_Mem_Write+0x1fa>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d136      	bne.n	8003fb6 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003f48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	9300      	str	r3, [sp, #0]
 8003f50:	0013      	movs	r3, r2
 8003f52:	2200      	movs	r2, #0
 8003f54:	2180      	movs	r1, #128	; 0x80
 8003f56:	f000 fa7b 	bl	8004450 <I2C_WaitOnFlagUntilTimeout>
 8003f5a:	1e03      	subs	r3, r0, #0
 8003f5c:	d001      	beq.n	8003f62 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e053      	b.n	800400a <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	2bff      	cmp	r3, #255	; 0xff
 8003f6a:	d911      	bls.n	8003f90 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	22ff      	movs	r2, #255	; 0xff
 8003f70:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f76:	b2da      	uxtb	r2, r3
 8003f78:	2380      	movs	r3, #128	; 0x80
 8003f7a:	045c      	lsls	r4, r3, #17
 8003f7c:	230a      	movs	r3, #10
 8003f7e:	18fb      	adds	r3, r7, r3
 8003f80:	8819      	ldrh	r1, [r3, #0]
 8003f82:	68f8      	ldr	r0, [r7, #12]
 8003f84:	2300      	movs	r3, #0
 8003f86:	9300      	str	r3, [sp, #0]
 8003f88:	0023      	movs	r3, r4
 8003f8a:	f000 fb95 	bl	80046b8 <I2C_TransferConfig>
 8003f8e:	e012      	b.n	8003fb6 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f94:	b29a      	uxth	r2, r3
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f9e:	b2da      	uxtb	r2, r3
 8003fa0:	2380      	movs	r3, #128	; 0x80
 8003fa2:	049c      	lsls	r4, r3, #18
 8003fa4:	230a      	movs	r3, #10
 8003fa6:	18fb      	adds	r3, r7, r3
 8003fa8:	8819      	ldrh	r1, [r3, #0]
 8003faa:	68f8      	ldr	r0, [r7, #12]
 8003fac:	2300      	movs	r3, #0
 8003fae:	9300      	str	r3, [sp, #0]
 8003fb0:	0023      	movs	r3, r4
 8003fb2:	f000 fb81 	bl	80046b8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d198      	bne.n	8003ef2 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fc0:	697a      	ldr	r2, [r7, #20]
 8003fc2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	0018      	movs	r0, r3
 8003fc8:	f000 fac0 	bl	800454c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003fcc:	1e03      	subs	r3, r0, #0
 8003fce:	d001      	beq.n	8003fd4 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e01a      	b.n	800400a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2220      	movs	r2, #32
 8003fda:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	685a      	ldr	r2, [r3, #4]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	490b      	ldr	r1, [pc, #44]	; (8004014 <HAL_I2C_Mem_Write+0x258>)
 8003fe8:	400a      	ands	r2, r1
 8003fea:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2241      	movs	r2, #65	; 0x41
 8003ff0:	2120      	movs	r1, #32
 8003ff2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2242      	movs	r2, #66	; 0x42
 8003ff8:	2100      	movs	r1, #0
 8003ffa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2240      	movs	r2, #64	; 0x40
 8004000:	2100      	movs	r1, #0
 8004002:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004004:	2300      	movs	r3, #0
 8004006:	e000      	b.n	800400a <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8004008:	2302      	movs	r3, #2
  }
}
 800400a:	0018      	movs	r0, r3
 800400c:	46bd      	mov	sp, r7
 800400e:	b007      	add	sp, #28
 8004010:	bd90      	pop	{r4, r7, pc}
 8004012:	46c0      	nop			; (mov r8, r8)
 8004014:	fe00e800 	.word	0xfe00e800

08004018 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004018:	b590      	push	{r4, r7, lr}
 800401a:	b089      	sub	sp, #36	; 0x24
 800401c:	af02      	add	r7, sp, #8
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	000c      	movs	r4, r1
 8004022:	0010      	movs	r0, r2
 8004024:	0019      	movs	r1, r3
 8004026:	230a      	movs	r3, #10
 8004028:	18fb      	adds	r3, r7, r3
 800402a:	1c22      	adds	r2, r4, #0
 800402c:	801a      	strh	r2, [r3, #0]
 800402e:	2308      	movs	r3, #8
 8004030:	18fb      	adds	r3, r7, r3
 8004032:	1c02      	adds	r2, r0, #0
 8004034:	801a      	strh	r2, [r3, #0]
 8004036:	1dbb      	adds	r3, r7, #6
 8004038:	1c0a      	adds	r2, r1, #0
 800403a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2241      	movs	r2, #65	; 0x41
 8004040:	5c9b      	ldrb	r3, [r3, r2]
 8004042:	b2db      	uxtb	r3, r3
 8004044:	2b20      	cmp	r3, #32
 8004046:	d000      	beq.n	800404a <HAL_I2C_Mem_Read+0x32>
 8004048:	e110      	b.n	800426c <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800404a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800404c:	2b00      	cmp	r3, #0
 800404e:	d004      	beq.n	800405a <HAL_I2C_Mem_Read+0x42>
 8004050:	232c      	movs	r3, #44	; 0x2c
 8004052:	18fb      	adds	r3, r7, r3
 8004054:	881b      	ldrh	r3, [r3, #0]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d105      	bne.n	8004066 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2280      	movs	r2, #128	; 0x80
 800405e:	0092      	lsls	r2, r2, #2
 8004060:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e103      	b.n	800426e <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2240      	movs	r2, #64	; 0x40
 800406a:	5c9b      	ldrb	r3, [r3, r2]
 800406c:	2b01      	cmp	r3, #1
 800406e:	d101      	bne.n	8004074 <HAL_I2C_Mem_Read+0x5c>
 8004070:	2302      	movs	r3, #2
 8004072:	e0fc      	b.n	800426e <HAL_I2C_Mem_Read+0x256>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2240      	movs	r2, #64	; 0x40
 8004078:	2101      	movs	r1, #1
 800407a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800407c:	f7fe fd54 	bl	8002b28 <HAL_GetTick>
 8004080:	0003      	movs	r3, r0
 8004082:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004084:	2380      	movs	r3, #128	; 0x80
 8004086:	0219      	lsls	r1, r3, #8
 8004088:	68f8      	ldr	r0, [r7, #12]
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	9300      	str	r3, [sp, #0]
 800408e:	2319      	movs	r3, #25
 8004090:	2201      	movs	r2, #1
 8004092:	f000 f9dd 	bl	8004450 <I2C_WaitOnFlagUntilTimeout>
 8004096:	1e03      	subs	r3, r0, #0
 8004098:	d001      	beq.n	800409e <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e0e7      	b.n	800426e <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2241      	movs	r2, #65	; 0x41
 80040a2:	2122      	movs	r1, #34	; 0x22
 80040a4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2242      	movs	r2, #66	; 0x42
 80040aa:	2140      	movs	r1, #64	; 0x40
 80040ac:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	222c      	movs	r2, #44	; 0x2c
 80040be:	18ba      	adds	r2, r7, r2
 80040c0:	8812      	ldrh	r2, [r2, #0]
 80040c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040ca:	1dbb      	adds	r3, r7, #6
 80040cc:	881c      	ldrh	r4, [r3, #0]
 80040ce:	2308      	movs	r3, #8
 80040d0:	18fb      	adds	r3, r7, r3
 80040d2:	881a      	ldrh	r2, [r3, #0]
 80040d4:	230a      	movs	r3, #10
 80040d6:	18fb      	adds	r3, r7, r3
 80040d8:	8819      	ldrh	r1, [r3, #0]
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	9301      	str	r3, [sp, #4]
 80040e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e2:	9300      	str	r3, [sp, #0]
 80040e4:	0023      	movs	r3, r4
 80040e6:	f000 f92f 	bl	8004348 <I2C_RequestMemoryRead>
 80040ea:	1e03      	subs	r3, r0, #0
 80040ec:	d005      	beq.n	80040fa <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2240      	movs	r2, #64	; 0x40
 80040f2:	2100      	movs	r1, #0
 80040f4:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e0b9      	b.n	800426e <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040fe:	b29b      	uxth	r3, r3
 8004100:	2bff      	cmp	r3, #255	; 0xff
 8004102:	d911      	bls.n	8004128 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	22ff      	movs	r2, #255	; 0xff
 8004108:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800410e:	b2da      	uxtb	r2, r3
 8004110:	2380      	movs	r3, #128	; 0x80
 8004112:	045c      	lsls	r4, r3, #17
 8004114:	230a      	movs	r3, #10
 8004116:	18fb      	adds	r3, r7, r3
 8004118:	8819      	ldrh	r1, [r3, #0]
 800411a:	68f8      	ldr	r0, [r7, #12]
 800411c:	4b56      	ldr	r3, [pc, #344]	; (8004278 <HAL_I2C_Mem_Read+0x260>)
 800411e:	9300      	str	r3, [sp, #0]
 8004120:	0023      	movs	r3, r4
 8004122:	f000 fac9 	bl	80046b8 <I2C_TransferConfig>
 8004126:	e012      	b.n	800414e <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800412c:	b29a      	uxth	r2, r3
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004136:	b2da      	uxtb	r2, r3
 8004138:	2380      	movs	r3, #128	; 0x80
 800413a:	049c      	lsls	r4, r3, #18
 800413c:	230a      	movs	r3, #10
 800413e:	18fb      	adds	r3, r7, r3
 8004140:	8819      	ldrh	r1, [r3, #0]
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	4b4c      	ldr	r3, [pc, #304]	; (8004278 <HAL_I2C_Mem_Read+0x260>)
 8004146:	9300      	str	r3, [sp, #0]
 8004148:	0023      	movs	r3, r4
 800414a:	f000 fab5 	bl	80046b8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800414e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	9300      	str	r3, [sp, #0]
 8004156:	0013      	movs	r3, r2
 8004158:	2200      	movs	r2, #0
 800415a:	2104      	movs	r1, #4
 800415c:	f000 f978 	bl	8004450 <I2C_WaitOnFlagUntilTimeout>
 8004160:	1e03      	subs	r3, r0, #0
 8004162:	d001      	beq.n	8004168 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e082      	b.n	800426e <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004172:	b2d2      	uxtb	r2, r2
 8004174:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417a:	1c5a      	adds	r2, r3, #1
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004184:	3b01      	subs	r3, #1
 8004186:	b29a      	uxth	r2, r3
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004190:	b29b      	uxth	r3, r3
 8004192:	3b01      	subs	r3, #1
 8004194:	b29a      	uxth	r2, r3
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800419e:	b29b      	uxth	r3, r3
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d03a      	beq.n	800421a <HAL_I2C_Mem_Read+0x202>
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d136      	bne.n	800421a <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80041ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	9300      	str	r3, [sp, #0]
 80041b4:	0013      	movs	r3, r2
 80041b6:	2200      	movs	r2, #0
 80041b8:	2180      	movs	r1, #128	; 0x80
 80041ba:	f000 f949 	bl	8004450 <I2C_WaitOnFlagUntilTimeout>
 80041be:	1e03      	subs	r3, r0, #0
 80041c0:	d001      	beq.n	80041c6 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e053      	b.n	800426e <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	2bff      	cmp	r3, #255	; 0xff
 80041ce:	d911      	bls.n	80041f4 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	22ff      	movs	r2, #255	; 0xff
 80041d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041da:	b2da      	uxtb	r2, r3
 80041dc:	2380      	movs	r3, #128	; 0x80
 80041de:	045c      	lsls	r4, r3, #17
 80041e0:	230a      	movs	r3, #10
 80041e2:	18fb      	adds	r3, r7, r3
 80041e4:	8819      	ldrh	r1, [r3, #0]
 80041e6:	68f8      	ldr	r0, [r7, #12]
 80041e8:	2300      	movs	r3, #0
 80041ea:	9300      	str	r3, [sp, #0]
 80041ec:	0023      	movs	r3, r4
 80041ee:	f000 fa63 	bl	80046b8 <I2C_TransferConfig>
 80041f2:	e012      	b.n	800421a <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f8:	b29a      	uxth	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004202:	b2da      	uxtb	r2, r3
 8004204:	2380      	movs	r3, #128	; 0x80
 8004206:	049c      	lsls	r4, r3, #18
 8004208:	230a      	movs	r3, #10
 800420a:	18fb      	adds	r3, r7, r3
 800420c:	8819      	ldrh	r1, [r3, #0]
 800420e:	68f8      	ldr	r0, [r7, #12]
 8004210:	2300      	movs	r3, #0
 8004212:	9300      	str	r3, [sp, #0]
 8004214:	0023      	movs	r3, r4
 8004216:	f000 fa4f 	bl	80046b8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800421e:	b29b      	uxth	r3, r3
 8004220:	2b00      	cmp	r3, #0
 8004222:	d194      	bne.n	800414e <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	0018      	movs	r0, r3
 800422c:	f000 f98e 	bl	800454c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004230:	1e03      	subs	r3, r0, #0
 8004232:	d001      	beq.n	8004238 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e01a      	b.n	800426e <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2220      	movs	r2, #32
 800423e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	685a      	ldr	r2, [r3, #4]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	490c      	ldr	r1, [pc, #48]	; (800427c <HAL_I2C_Mem_Read+0x264>)
 800424c:	400a      	ands	r2, r1
 800424e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2241      	movs	r2, #65	; 0x41
 8004254:	2120      	movs	r1, #32
 8004256:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2242      	movs	r2, #66	; 0x42
 800425c:	2100      	movs	r1, #0
 800425e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2240      	movs	r2, #64	; 0x40
 8004264:	2100      	movs	r1, #0
 8004266:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004268:	2300      	movs	r3, #0
 800426a:	e000      	b.n	800426e <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 800426c:	2302      	movs	r3, #2
  }
}
 800426e:	0018      	movs	r0, r3
 8004270:	46bd      	mov	sp, r7
 8004272:	b007      	add	sp, #28
 8004274:	bd90      	pop	{r4, r7, pc}
 8004276:	46c0      	nop			; (mov r8, r8)
 8004278:	80002400 	.word	0x80002400
 800427c:	fe00e800 	.word	0xfe00e800

08004280 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004280:	b5b0      	push	{r4, r5, r7, lr}
 8004282:	b086      	sub	sp, #24
 8004284:	af02      	add	r7, sp, #8
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	000c      	movs	r4, r1
 800428a:	0010      	movs	r0, r2
 800428c:	0019      	movs	r1, r3
 800428e:	250a      	movs	r5, #10
 8004290:	197b      	adds	r3, r7, r5
 8004292:	1c22      	adds	r2, r4, #0
 8004294:	801a      	strh	r2, [r3, #0]
 8004296:	2308      	movs	r3, #8
 8004298:	18fb      	adds	r3, r7, r3
 800429a:	1c02      	adds	r2, r0, #0
 800429c:	801a      	strh	r2, [r3, #0]
 800429e:	1dbb      	adds	r3, r7, #6
 80042a0:	1c0a      	adds	r2, r1, #0
 80042a2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80042a4:	1dbb      	adds	r3, r7, #6
 80042a6:	881b      	ldrh	r3, [r3, #0]
 80042a8:	b2da      	uxtb	r2, r3
 80042aa:	2380      	movs	r3, #128	; 0x80
 80042ac:	045c      	lsls	r4, r3, #17
 80042ae:	197b      	adds	r3, r7, r5
 80042b0:	8819      	ldrh	r1, [r3, #0]
 80042b2:	68f8      	ldr	r0, [r7, #12]
 80042b4:	4b23      	ldr	r3, [pc, #140]	; (8004344 <I2C_RequestMemoryWrite+0xc4>)
 80042b6:	9300      	str	r3, [sp, #0]
 80042b8:	0023      	movs	r3, r4
 80042ba:	f000 f9fd 	bl	80046b8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042c0:	6a39      	ldr	r1, [r7, #32]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	0018      	movs	r0, r3
 80042c6:	f000 f902 	bl	80044ce <I2C_WaitOnTXISFlagUntilTimeout>
 80042ca:	1e03      	subs	r3, r0, #0
 80042cc:	d001      	beq.n	80042d2 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e033      	b.n	800433a <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80042d2:	1dbb      	adds	r3, r7, #6
 80042d4:	881b      	ldrh	r3, [r3, #0]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d107      	bne.n	80042ea <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80042da:	2308      	movs	r3, #8
 80042dc:	18fb      	adds	r3, r7, r3
 80042de:	881b      	ldrh	r3, [r3, #0]
 80042e0:	b2da      	uxtb	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	629a      	str	r2, [r3, #40]	; 0x28
 80042e8:	e019      	b.n	800431e <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80042ea:	2308      	movs	r3, #8
 80042ec:	18fb      	adds	r3, r7, r3
 80042ee:	881b      	ldrh	r3, [r3, #0]
 80042f0:	0a1b      	lsrs	r3, r3, #8
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	b2da      	uxtb	r2, r3
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042fe:	6a39      	ldr	r1, [r7, #32]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	0018      	movs	r0, r3
 8004304:	f000 f8e3 	bl	80044ce <I2C_WaitOnTXISFlagUntilTimeout>
 8004308:	1e03      	subs	r3, r0, #0
 800430a:	d001      	beq.n	8004310 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e014      	b.n	800433a <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004310:	2308      	movs	r3, #8
 8004312:	18fb      	adds	r3, r7, r3
 8004314:	881b      	ldrh	r3, [r3, #0]
 8004316:	b2da      	uxtb	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800431e:	6a3a      	ldr	r2, [r7, #32]
 8004320:	68f8      	ldr	r0, [r7, #12]
 8004322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004324:	9300      	str	r3, [sp, #0]
 8004326:	0013      	movs	r3, r2
 8004328:	2200      	movs	r2, #0
 800432a:	2180      	movs	r1, #128	; 0x80
 800432c:	f000 f890 	bl	8004450 <I2C_WaitOnFlagUntilTimeout>
 8004330:	1e03      	subs	r3, r0, #0
 8004332:	d001      	beq.n	8004338 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e000      	b.n	800433a <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8004338:	2300      	movs	r3, #0
}
 800433a:	0018      	movs	r0, r3
 800433c:	46bd      	mov	sp, r7
 800433e:	b004      	add	sp, #16
 8004340:	bdb0      	pop	{r4, r5, r7, pc}
 8004342:	46c0      	nop			; (mov r8, r8)
 8004344:	80002000 	.word	0x80002000

08004348 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004348:	b5b0      	push	{r4, r5, r7, lr}
 800434a:	b086      	sub	sp, #24
 800434c:	af02      	add	r7, sp, #8
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	000c      	movs	r4, r1
 8004352:	0010      	movs	r0, r2
 8004354:	0019      	movs	r1, r3
 8004356:	250a      	movs	r5, #10
 8004358:	197b      	adds	r3, r7, r5
 800435a:	1c22      	adds	r2, r4, #0
 800435c:	801a      	strh	r2, [r3, #0]
 800435e:	2308      	movs	r3, #8
 8004360:	18fb      	adds	r3, r7, r3
 8004362:	1c02      	adds	r2, r0, #0
 8004364:	801a      	strh	r2, [r3, #0]
 8004366:	1dbb      	adds	r3, r7, #6
 8004368:	1c0a      	adds	r2, r1, #0
 800436a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800436c:	1dbb      	adds	r3, r7, #6
 800436e:	881b      	ldrh	r3, [r3, #0]
 8004370:	b2da      	uxtb	r2, r3
 8004372:	197b      	adds	r3, r7, r5
 8004374:	8819      	ldrh	r1, [r3, #0]
 8004376:	68f8      	ldr	r0, [r7, #12]
 8004378:	4b23      	ldr	r3, [pc, #140]	; (8004408 <I2C_RequestMemoryRead+0xc0>)
 800437a:	9300      	str	r3, [sp, #0]
 800437c:	2300      	movs	r3, #0
 800437e:	f000 f99b 	bl	80046b8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004384:	6a39      	ldr	r1, [r7, #32]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	0018      	movs	r0, r3
 800438a:	f000 f8a0 	bl	80044ce <I2C_WaitOnTXISFlagUntilTimeout>
 800438e:	1e03      	subs	r3, r0, #0
 8004390:	d001      	beq.n	8004396 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e033      	b.n	80043fe <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004396:	1dbb      	adds	r3, r7, #6
 8004398:	881b      	ldrh	r3, [r3, #0]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d107      	bne.n	80043ae <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800439e:	2308      	movs	r3, #8
 80043a0:	18fb      	adds	r3, r7, r3
 80043a2:	881b      	ldrh	r3, [r3, #0]
 80043a4:	b2da      	uxtb	r2, r3
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	629a      	str	r2, [r3, #40]	; 0x28
 80043ac:	e019      	b.n	80043e2 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80043ae:	2308      	movs	r3, #8
 80043b0:	18fb      	adds	r3, r7, r3
 80043b2:	881b      	ldrh	r3, [r3, #0]
 80043b4:	0a1b      	lsrs	r3, r3, #8
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	b2da      	uxtb	r2, r3
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043c2:	6a39      	ldr	r1, [r7, #32]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	0018      	movs	r0, r3
 80043c8:	f000 f881 	bl	80044ce <I2C_WaitOnTXISFlagUntilTimeout>
 80043cc:	1e03      	subs	r3, r0, #0
 80043ce:	d001      	beq.n	80043d4 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e014      	b.n	80043fe <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80043d4:	2308      	movs	r3, #8
 80043d6:	18fb      	adds	r3, r7, r3
 80043d8:	881b      	ldrh	r3, [r3, #0]
 80043da:	b2da      	uxtb	r2, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80043e2:	6a3a      	ldr	r2, [r7, #32]
 80043e4:	68f8      	ldr	r0, [r7, #12]
 80043e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e8:	9300      	str	r3, [sp, #0]
 80043ea:	0013      	movs	r3, r2
 80043ec:	2200      	movs	r2, #0
 80043ee:	2140      	movs	r1, #64	; 0x40
 80043f0:	f000 f82e 	bl	8004450 <I2C_WaitOnFlagUntilTimeout>
 80043f4:	1e03      	subs	r3, r0, #0
 80043f6:	d001      	beq.n	80043fc <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e000      	b.n	80043fe <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	0018      	movs	r0, r3
 8004400:	46bd      	mov	sp, r7
 8004402:	b004      	add	sp, #16
 8004404:	bdb0      	pop	{r4, r5, r7, pc}
 8004406:	46c0      	nop			; (mov r8, r8)
 8004408:	80002000 	.word	0x80002000

0800440c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	2202      	movs	r2, #2
 800441c:	4013      	ands	r3, r2
 800441e:	2b02      	cmp	r3, #2
 8004420:	d103      	bne.n	800442a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2200      	movs	r2, #0
 8004428:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	699b      	ldr	r3, [r3, #24]
 8004430:	2201      	movs	r2, #1
 8004432:	4013      	ands	r3, r2
 8004434:	2b01      	cmp	r3, #1
 8004436:	d007      	beq.n	8004448 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	699a      	ldr	r2, [r3, #24]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2101      	movs	r1, #1
 8004444:	430a      	orrs	r2, r1
 8004446:	619a      	str	r2, [r3, #24]
  }
}
 8004448:	46c0      	nop			; (mov r8, r8)
 800444a:	46bd      	mov	sp, r7
 800444c:	b002      	add	sp, #8
 800444e:	bd80      	pop	{r7, pc}

08004450 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	603b      	str	r3, [r7, #0]
 800445c:	1dfb      	adds	r3, r7, #7
 800445e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004460:	e021      	b.n	80044a6 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	3301      	adds	r3, #1
 8004466:	d01e      	beq.n	80044a6 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004468:	f7fe fb5e 	bl	8002b28 <HAL_GetTick>
 800446c:	0002      	movs	r2, r0
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	683a      	ldr	r2, [r7, #0]
 8004474:	429a      	cmp	r2, r3
 8004476:	d302      	bcc.n	800447e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d113      	bne.n	80044a6 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004482:	2220      	movs	r2, #32
 8004484:	431a      	orrs	r2, r3
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2241      	movs	r2, #65	; 0x41
 800448e:	2120      	movs	r1, #32
 8004490:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2242      	movs	r2, #66	; 0x42
 8004496:	2100      	movs	r1, #0
 8004498:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2240      	movs	r2, #64	; 0x40
 800449e:	2100      	movs	r1, #0
 80044a0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e00f      	b.n	80044c6 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	699b      	ldr	r3, [r3, #24]
 80044ac:	68ba      	ldr	r2, [r7, #8]
 80044ae:	4013      	ands	r3, r2
 80044b0:	68ba      	ldr	r2, [r7, #8]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	425a      	negs	r2, r3
 80044b6:	4153      	adcs	r3, r2
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	001a      	movs	r2, r3
 80044bc:	1dfb      	adds	r3, r7, #7
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d0ce      	beq.n	8004462 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	0018      	movs	r0, r3
 80044c8:	46bd      	mov	sp, r7
 80044ca:	b004      	add	sp, #16
 80044cc:	bd80      	pop	{r7, pc}

080044ce <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80044ce:	b580      	push	{r7, lr}
 80044d0:	b084      	sub	sp, #16
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	60f8      	str	r0, [r7, #12]
 80044d6:	60b9      	str	r1, [r7, #8]
 80044d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80044da:	e02b      	b.n	8004534 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	68b9      	ldr	r1, [r7, #8]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	0018      	movs	r0, r3
 80044e4:	f000 f86e 	bl	80045c4 <I2C_IsAcknowledgeFailed>
 80044e8:	1e03      	subs	r3, r0, #0
 80044ea:	d001      	beq.n	80044f0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e029      	b.n	8004544 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	3301      	adds	r3, #1
 80044f4:	d01e      	beq.n	8004534 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044f6:	f7fe fb17 	bl	8002b28 <HAL_GetTick>
 80044fa:	0002      	movs	r2, r0
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	68ba      	ldr	r2, [r7, #8]
 8004502:	429a      	cmp	r2, r3
 8004504:	d302      	bcc.n	800450c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d113      	bne.n	8004534 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004510:	2220      	movs	r2, #32
 8004512:	431a      	orrs	r2, r3
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2241      	movs	r2, #65	; 0x41
 800451c:	2120      	movs	r1, #32
 800451e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2242      	movs	r2, #66	; 0x42
 8004524:	2100      	movs	r1, #0
 8004526:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2240      	movs	r2, #64	; 0x40
 800452c:	2100      	movs	r1, #0
 800452e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e007      	b.n	8004544 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	699b      	ldr	r3, [r3, #24]
 800453a:	2202      	movs	r2, #2
 800453c:	4013      	ands	r3, r2
 800453e:	2b02      	cmp	r3, #2
 8004540:	d1cc      	bne.n	80044dc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004542:	2300      	movs	r3, #0
}
 8004544:	0018      	movs	r0, r3
 8004546:	46bd      	mov	sp, r7
 8004548:	b004      	add	sp, #16
 800454a:	bd80      	pop	{r7, pc}

0800454c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004558:	e028      	b.n	80045ac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	68b9      	ldr	r1, [r7, #8]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	0018      	movs	r0, r3
 8004562:	f000 f82f 	bl	80045c4 <I2C_IsAcknowledgeFailed>
 8004566:	1e03      	subs	r3, r0, #0
 8004568:	d001      	beq.n	800456e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e026      	b.n	80045bc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800456e:	f7fe fadb 	bl	8002b28 <HAL_GetTick>
 8004572:	0002      	movs	r2, r0
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	68ba      	ldr	r2, [r7, #8]
 800457a:	429a      	cmp	r2, r3
 800457c:	d302      	bcc.n	8004584 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d113      	bne.n	80045ac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004588:	2220      	movs	r2, #32
 800458a:	431a      	orrs	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2241      	movs	r2, #65	; 0x41
 8004594:	2120      	movs	r1, #32
 8004596:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2242      	movs	r2, #66	; 0x42
 800459c:	2100      	movs	r1, #0
 800459e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2240      	movs	r2, #64	; 0x40
 80045a4:	2100      	movs	r1, #0
 80045a6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e007      	b.n	80045bc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	699b      	ldr	r3, [r3, #24]
 80045b2:	2220      	movs	r2, #32
 80045b4:	4013      	ands	r3, r2
 80045b6:	2b20      	cmp	r3, #32
 80045b8:	d1cf      	bne.n	800455a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	0018      	movs	r0, r3
 80045be:	46bd      	mov	sp, r7
 80045c0:	b004      	add	sp, #16
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	2210      	movs	r2, #16
 80045d8:	4013      	ands	r3, r2
 80045da:	2b10      	cmp	r3, #16
 80045dc:	d164      	bne.n	80046a8 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	685a      	ldr	r2, [r3, #4]
 80045e4:	2380      	movs	r3, #128	; 0x80
 80045e6:	049b      	lsls	r3, r3, #18
 80045e8:	401a      	ands	r2, r3
 80045ea:	2380      	movs	r3, #128	; 0x80
 80045ec:	049b      	lsls	r3, r3, #18
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d02b      	beq.n	800464a <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	685a      	ldr	r2, [r3, #4]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2180      	movs	r1, #128	; 0x80
 80045fe:	01c9      	lsls	r1, r1, #7
 8004600:	430a      	orrs	r2, r1
 8004602:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004604:	e021      	b.n	800464a <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	3301      	adds	r3, #1
 800460a:	d01e      	beq.n	800464a <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800460c:	f7fe fa8c 	bl	8002b28 <HAL_GetTick>
 8004610:	0002      	movs	r2, r0
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	68ba      	ldr	r2, [r7, #8]
 8004618:	429a      	cmp	r2, r3
 800461a:	d302      	bcc.n	8004622 <I2C_IsAcknowledgeFailed+0x5e>
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d113      	bne.n	800464a <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004626:	2220      	movs	r2, #32
 8004628:	431a      	orrs	r2, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2241      	movs	r2, #65	; 0x41
 8004632:	2120      	movs	r1, #32
 8004634:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2242      	movs	r2, #66	; 0x42
 800463a:	2100      	movs	r1, #0
 800463c:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2240      	movs	r2, #64	; 0x40
 8004642:	2100      	movs	r1, #0
 8004644:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e02f      	b.n	80046aa <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	699b      	ldr	r3, [r3, #24]
 8004650:	2220      	movs	r2, #32
 8004652:	4013      	ands	r3, r2
 8004654:	2b20      	cmp	r3, #32
 8004656:	d1d6      	bne.n	8004606 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2210      	movs	r2, #16
 800465e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2220      	movs	r2, #32
 8004666:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	0018      	movs	r0, r3
 800466c:	f7ff fece 	bl	800440c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	685a      	ldr	r2, [r3, #4]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	490e      	ldr	r1, [pc, #56]	; (80046b4 <I2C_IsAcknowledgeFailed+0xf0>)
 800467c:	400a      	ands	r2, r1
 800467e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004684:	2204      	movs	r2, #4
 8004686:	431a      	orrs	r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2241      	movs	r2, #65	; 0x41
 8004690:	2120      	movs	r1, #32
 8004692:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2242      	movs	r2, #66	; 0x42
 8004698:	2100      	movs	r1, #0
 800469a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2240      	movs	r2, #64	; 0x40
 80046a0:	2100      	movs	r1, #0
 80046a2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e000      	b.n	80046aa <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 80046a8:	2300      	movs	r3, #0
}
 80046aa:	0018      	movs	r0, r3
 80046ac:	46bd      	mov	sp, r7
 80046ae:	b004      	add	sp, #16
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	46c0      	nop			; (mov r8, r8)
 80046b4:	fe00e800 	.word	0xfe00e800

080046b8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80046b8:	b590      	push	{r4, r7, lr}
 80046ba:	b085      	sub	sp, #20
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	0008      	movs	r0, r1
 80046c2:	0011      	movs	r1, r2
 80046c4:	607b      	str	r3, [r7, #4]
 80046c6:	240a      	movs	r4, #10
 80046c8:	193b      	adds	r3, r7, r4
 80046ca:	1c02      	adds	r2, r0, #0
 80046cc:	801a      	strh	r2, [r3, #0]
 80046ce:	2009      	movs	r0, #9
 80046d0:	183b      	adds	r3, r7, r0
 80046d2:	1c0a      	adds	r2, r1, #0
 80046d4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	6a3a      	ldr	r2, [r7, #32]
 80046de:	0d51      	lsrs	r1, r2, #21
 80046e0:	2280      	movs	r2, #128	; 0x80
 80046e2:	00d2      	lsls	r2, r2, #3
 80046e4:	400a      	ands	r2, r1
 80046e6:	490e      	ldr	r1, [pc, #56]	; (8004720 <I2C_TransferConfig+0x68>)
 80046e8:	430a      	orrs	r2, r1
 80046ea:	43d2      	mvns	r2, r2
 80046ec:	401a      	ands	r2, r3
 80046ee:	0011      	movs	r1, r2
 80046f0:	193b      	adds	r3, r7, r4
 80046f2:	881b      	ldrh	r3, [r3, #0]
 80046f4:	059b      	lsls	r3, r3, #22
 80046f6:	0d9a      	lsrs	r2, r3, #22
 80046f8:	183b      	adds	r3, r7, r0
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	0418      	lsls	r0, r3, #16
 80046fe:	23ff      	movs	r3, #255	; 0xff
 8004700:	041b      	lsls	r3, r3, #16
 8004702:	4003      	ands	r3, r0
 8004704:	431a      	orrs	r2, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	431a      	orrs	r2, r3
 800470a:	6a3b      	ldr	r3, [r7, #32]
 800470c:	431a      	orrs	r2, r3
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	430a      	orrs	r2, r1
 8004714:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8004716:	46c0      	nop			; (mov r8, r8)
 8004718:	46bd      	mov	sp, r7
 800471a:	b005      	add	sp, #20
 800471c:	bd90      	pop	{r4, r7, pc}
 800471e:	46c0      	nop			; (mov r8, r8)
 8004720:	03ff63ff 	.word	0x03ff63ff

08004724 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2241      	movs	r2, #65	; 0x41
 8004732:	5c9b      	ldrb	r3, [r3, r2]
 8004734:	b2db      	uxtb	r3, r3
 8004736:	2b20      	cmp	r3, #32
 8004738:	d138      	bne.n	80047ac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2240      	movs	r2, #64	; 0x40
 800473e:	5c9b      	ldrb	r3, [r3, r2]
 8004740:	2b01      	cmp	r3, #1
 8004742:	d101      	bne.n	8004748 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004744:	2302      	movs	r3, #2
 8004746:	e032      	b.n	80047ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2240      	movs	r2, #64	; 0x40
 800474c:	2101      	movs	r1, #1
 800474e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2241      	movs	r2, #65	; 0x41
 8004754:	2124      	movs	r1, #36	; 0x24
 8004756:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2101      	movs	r1, #1
 8004764:	438a      	bics	r2, r1
 8004766:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4911      	ldr	r1, [pc, #68]	; (80047b8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004774:	400a      	ands	r2, r1
 8004776:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	6819      	ldr	r1, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	683a      	ldr	r2, [r7, #0]
 8004784:	430a      	orrs	r2, r1
 8004786:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2101      	movs	r1, #1
 8004794:	430a      	orrs	r2, r1
 8004796:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2241      	movs	r2, #65	; 0x41
 800479c:	2120      	movs	r1, #32
 800479e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2240      	movs	r2, #64	; 0x40
 80047a4:	2100      	movs	r1, #0
 80047a6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80047a8:	2300      	movs	r3, #0
 80047aa:	e000      	b.n	80047ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80047ac:	2302      	movs	r3, #2
  }
}
 80047ae:	0018      	movs	r0, r3
 80047b0:	46bd      	mov	sp, r7
 80047b2:	b002      	add	sp, #8
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	46c0      	nop			; (mov r8, r8)
 80047b8:	ffffefff 	.word	0xffffefff

080047bc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2241      	movs	r2, #65	; 0x41
 80047ca:	5c9b      	ldrb	r3, [r3, r2]
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	2b20      	cmp	r3, #32
 80047d0:	d139      	bne.n	8004846 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2240      	movs	r2, #64	; 0x40
 80047d6:	5c9b      	ldrb	r3, [r3, r2]
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d101      	bne.n	80047e0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80047dc:	2302      	movs	r3, #2
 80047de:	e033      	b.n	8004848 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2240      	movs	r2, #64	; 0x40
 80047e4:	2101      	movs	r1, #1
 80047e6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2241      	movs	r2, #65	; 0x41
 80047ec:	2124      	movs	r1, #36	; 0x24
 80047ee:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2101      	movs	r1, #1
 80047fc:	438a      	bics	r2, r1
 80047fe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	4a11      	ldr	r2, [pc, #68]	; (8004850 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800480c:	4013      	ands	r3, r2
 800480e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	021b      	lsls	r3, r3, #8
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	4313      	orrs	r3, r2
 8004818:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2101      	movs	r1, #1
 800482e:	430a      	orrs	r2, r1
 8004830:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2241      	movs	r2, #65	; 0x41
 8004836:	2120      	movs	r1, #32
 8004838:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2240      	movs	r2, #64	; 0x40
 800483e:	2100      	movs	r1, #0
 8004840:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004842:	2300      	movs	r3, #0
 8004844:	e000      	b.n	8004848 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004846:	2302      	movs	r3, #2
  }
}
 8004848:	0018      	movs	r0, r3
 800484a:	46bd      	mov	sp, r7
 800484c:	b004      	add	sp, #16
 800484e:	bd80      	pop	{r7, pc}
 8004850:	fffff0ff 	.word	0xfffff0ff

08004854 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b088      	sub	sp, #32
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d102      	bne.n	8004868 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	f000 fb76 	bl	8004f54 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2201      	movs	r2, #1
 800486e:	4013      	ands	r3, r2
 8004870:	d100      	bne.n	8004874 <HAL_RCC_OscConfig+0x20>
 8004872:	e08e      	b.n	8004992 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004874:	4bc5      	ldr	r3, [pc, #788]	; (8004b8c <HAL_RCC_OscConfig+0x338>)
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	220c      	movs	r2, #12
 800487a:	4013      	ands	r3, r2
 800487c:	2b04      	cmp	r3, #4
 800487e:	d00e      	beq.n	800489e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004880:	4bc2      	ldr	r3, [pc, #776]	; (8004b8c <HAL_RCC_OscConfig+0x338>)
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	220c      	movs	r2, #12
 8004886:	4013      	ands	r3, r2
 8004888:	2b08      	cmp	r3, #8
 800488a:	d117      	bne.n	80048bc <HAL_RCC_OscConfig+0x68>
 800488c:	4bbf      	ldr	r3, [pc, #764]	; (8004b8c <HAL_RCC_OscConfig+0x338>)
 800488e:	685a      	ldr	r2, [r3, #4]
 8004890:	23c0      	movs	r3, #192	; 0xc0
 8004892:	025b      	lsls	r3, r3, #9
 8004894:	401a      	ands	r2, r3
 8004896:	2380      	movs	r3, #128	; 0x80
 8004898:	025b      	lsls	r3, r3, #9
 800489a:	429a      	cmp	r2, r3
 800489c:	d10e      	bne.n	80048bc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800489e:	4bbb      	ldr	r3, [pc, #748]	; (8004b8c <HAL_RCC_OscConfig+0x338>)
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	2380      	movs	r3, #128	; 0x80
 80048a4:	029b      	lsls	r3, r3, #10
 80048a6:	4013      	ands	r3, r2
 80048a8:	d100      	bne.n	80048ac <HAL_RCC_OscConfig+0x58>
 80048aa:	e071      	b.n	8004990 <HAL_RCC_OscConfig+0x13c>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d000      	beq.n	80048b6 <HAL_RCC_OscConfig+0x62>
 80048b4:	e06c      	b.n	8004990 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	f000 fb4c 	bl	8004f54 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d107      	bne.n	80048d4 <HAL_RCC_OscConfig+0x80>
 80048c4:	4bb1      	ldr	r3, [pc, #708]	; (8004b8c <HAL_RCC_OscConfig+0x338>)
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	4bb0      	ldr	r3, [pc, #704]	; (8004b8c <HAL_RCC_OscConfig+0x338>)
 80048ca:	2180      	movs	r1, #128	; 0x80
 80048cc:	0249      	lsls	r1, r1, #9
 80048ce:	430a      	orrs	r2, r1
 80048d0:	601a      	str	r2, [r3, #0]
 80048d2:	e02f      	b.n	8004934 <HAL_RCC_OscConfig+0xe0>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d10c      	bne.n	80048f6 <HAL_RCC_OscConfig+0xa2>
 80048dc:	4bab      	ldr	r3, [pc, #684]	; (8004b8c <HAL_RCC_OscConfig+0x338>)
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	4baa      	ldr	r3, [pc, #680]	; (8004b8c <HAL_RCC_OscConfig+0x338>)
 80048e2:	49ab      	ldr	r1, [pc, #684]	; (8004b90 <HAL_RCC_OscConfig+0x33c>)
 80048e4:	400a      	ands	r2, r1
 80048e6:	601a      	str	r2, [r3, #0]
 80048e8:	4ba8      	ldr	r3, [pc, #672]	; (8004b8c <HAL_RCC_OscConfig+0x338>)
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	4ba7      	ldr	r3, [pc, #668]	; (8004b8c <HAL_RCC_OscConfig+0x338>)
 80048ee:	49a9      	ldr	r1, [pc, #676]	; (8004b94 <HAL_RCC_OscConfig+0x340>)
 80048f0:	400a      	ands	r2, r1
 80048f2:	601a      	str	r2, [r3, #0]
 80048f4:	e01e      	b.n	8004934 <HAL_RCC_OscConfig+0xe0>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	2b05      	cmp	r3, #5
 80048fc:	d10e      	bne.n	800491c <HAL_RCC_OscConfig+0xc8>
 80048fe:	4ba3      	ldr	r3, [pc, #652]	; (8004b8c <HAL_RCC_OscConfig+0x338>)
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	4ba2      	ldr	r3, [pc, #648]	; (8004b8c <HAL_RCC_OscConfig+0x338>)
 8004904:	2180      	movs	r1, #128	; 0x80
 8004906:	02c9      	lsls	r1, r1, #11
 8004908:	430a      	orrs	r2, r1
 800490a:	601a      	str	r2, [r3, #0]
 800490c:	4b9f      	ldr	r3, [pc, #636]	; (8004b8c <HAL_RCC_OscConfig+0x338>)
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	4b9e      	ldr	r3, [pc, #632]	; (8004b8c <HAL_RCC_OscConfig+0x338>)
 8004912:	2180      	movs	r1, #128	; 0x80
 8004914:	0249      	lsls	r1, r1, #9
 8004916:	430a      	orrs	r2, r1
 8004918:	601a      	str	r2, [r3, #0]
 800491a:	e00b      	b.n	8004934 <HAL_RCC_OscConfig+0xe0>
 800491c:	4b9b      	ldr	r3, [pc, #620]	; (8004b8c <HAL_RCC_OscConfig+0x338>)
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	4b9a      	ldr	r3, [pc, #616]	; (8004b8c <HAL_RCC_OscConfig+0x338>)
 8004922:	499b      	ldr	r1, [pc, #620]	; (8004b90 <HAL_RCC_OscConfig+0x33c>)
 8004924:	400a      	ands	r2, r1
 8004926:	601a      	str	r2, [r3, #0]
 8004928:	4b98      	ldr	r3, [pc, #608]	; (8004b8c <HAL_RCC_OscConfig+0x338>)
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	4b97      	ldr	r3, [pc, #604]	; (8004b8c <HAL_RCC_OscConfig+0x338>)
 800492e:	4999      	ldr	r1, [pc, #612]	; (8004b94 <HAL_RCC_OscConfig+0x340>)
 8004930:	400a      	ands	r2, r1
 8004932:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d014      	beq.n	8004966 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800493c:	f7fe f8f4 	bl	8002b28 <HAL_GetTick>
 8004940:	0003      	movs	r3, r0
 8004942:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004944:	e008      	b.n	8004958 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004946:	f7fe f8ef 	bl	8002b28 <HAL_GetTick>
 800494a:	0002      	movs	r2, r0
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	2b64      	cmp	r3, #100	; 0x64
 8004952:	d901      	bls.n	8004958 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e2fd      	b.n	8004f54 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004958:	4b8c      	ldr	r3, [pc, #560]	; (8004b8c <HAL_RCC_OscConfig+0x338>)
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	2380      	movs	r3, #128	; 0x80
 800495e:	029b      	lsls	r3, r3, #10
 8004960:	4013      	ands	r3, r2
 8004962:	d0f0      	beq.n	8004946 <HAL_RCC_OscConfig+0xf2>
 8004964:	e015      	b.n	8004992 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004966:	f7fe f8df 	bl	8002b28 <HAL_GetTick>
 800496a:	0003      	movs	r3, r0
 800496c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800496e:	e008      	b.n	8004982 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004970:	f7fe f8da 	bl	8002b28 <HAL_GetTick>
 8004974:	0002      	movs	r2, r0
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	2b64      	cmp	r3, #100	; 0x64
 800497c:	d901      	bls.n	8004982 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e2e8      	b.n	8004f54 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004982:	4b82      	ldr	r3, [pc, #520]	; (8004b8c <HAL_RCC_OscConfig+0x338>)
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	2380      	movs	r3, #128	; 0x80
 8004988:	029b      	lsls	r3, r3, #10
 800498a:	4013      	ands	r3, r2
 800498c:	d1f0      	bne.n	8004970 <HAL_RCC_OscConfig+0x11c>
 800498e:	e000      	b.n	8004992 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004990:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2202      	movs	r2, #2
 8004998:	4013      	ands	r3, r2
 800499a:	d100      	bne.n	800499e <HAL_RCC_OscConfig+0x14a>
 800499c:	e06c      	b.n	8004a78 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800499e:	4b7b      	ldr	r3, [pc, #492]	; (8004b8c <HAL_RCC_OscConfig+0x338>)
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	220c      	movs	r2, #12
 80049a4:	4013      	ands	r3, r2
 80049a6:	d00e      	beq.n	80049c6 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80049a8:	4b78      	ldr	r3, [pc, #480]	; (8004b8c <HAL_RCC_OscConfig+0x338>)
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	220c      	movs	r2, #12
 80049ae:	4013      	ands	r3, r2
 80049b0:	2b08      	cmp	r3, #8
 80049b2:	d11f      	bne.n	80049f4 <HAL_RCC_OscConfig+0x1a0>
 80049b4:	4b75      	ldr	r3, [pc, #468]	; (8004b8c <HAL_RCC_OscConfig+0x338>)
 80049b6:	685a      	ldr	r2, [r3, #4]
 80049b8:	23c0      	movs	r3, #192	; 0xc0
 80049ba:	025b      	lsls	r3, r3, #9
 80049bc:	401a      	ands	r2, r3
 80049be:	2380      	movs	r3, #128	; 0x80
 80049c0:	021b      	lsls	r3, r3, #8
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d116      	bne.n	80049f4 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049c6:	4b71      	ldr	r3, [pc, #452]	; (8004b8c <HAL_RCC_OscConfig+0x338>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2202      	movs	r2, #2
 80049cc:	4013      	ands	r3, r2
 80049ce:	d005      	beq.n	80049dc <HAL_RCC_OscConfig+0x188>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d001      	beq.n	80049dc <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e2bb      	b.n	8004f54 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049dc:	4b6b      	ldr	r3, [pc, #428]	; (8004b8c <HAL_RCC_OscConfig+0x338>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	22f8      	movs	r2, #248	; 0xf8
 80049e2:	4393      	bics	r3, r2
 80049e4:	0019      	movs	r1, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	00da      	lsls	r2, r3, #3
 80049ec:	4b67      	ldr	r3, [pc, #412]	; (8004b8c <HAL_RCC_OscConfig+0x338>)
 80049ee:	430a      	orrs	r2, r1
 80049f0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049f2:	e041      	b.n	8004a78 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d024      	beq.n	8004a46 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049fc:	4b63      	ldr	r3, [pc, #396]	; (8004b8c <HAL_RCC_OscConfig+0x338>)
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	4b62      	ldr	r3, [pc, #392]	; (8004b8c <HAL_RCC_OscConfig+0x338>)
 8004a02:	2101      	movs	r1, #1
 8004a04:	430a      	orrs	r2, r1
 8004a06:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a08:	f7fe f88e 	bl	8002b28 <HAL_GetTick>
 8004a0c:	0003      	movs	r3, r0
 8004a0e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a10:	e008      	b.n	8004a24 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a12:	f7fe f889 	bl	8002b28 <HAL_GetTick>
 8004a16:	0002      	movs	r2, r0
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d901      	bls.n	8004a24 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	e297      	b.n	8004f54 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a24:	4b59      	ldr	r3, [pc, #356]	; (8004b8c <HAL_RCC_OscConfig+0x338>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2202      	movs	r2, #2
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	d0f1      	beq.n	8004a12 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a2e:	4b57      	ldr	r3, [pc, #348]	; (8004b8c <HAL_RCC_OscConfig+0x338>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	22f8      	movs	r2, #248	; 0xf8
 8004a34:	4393      	bics	r3, r2
 8004a36:	0019      	movs	r1, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	691b      	ldr	r3, [r3, #16]
 8004a3c:	00da      	lsls	r2, r3, #3
 8004a3e:	4b53      	ldr	r3, [pc, #332]	; (8004b8c <HAL_RCC_OscConfig+0x338>)
 8004a40:	430a      	orrs	r2, r1
 8004a42:	601a      	str	r2, [r3, #0]
 8004a44:	e018      	b.n	8004a78 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a46:	4b51      	ldr	r3, [pc, #324]	; (8004b8c <HAL_RCC_OscConfig+0x338>)
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	4b50      	ldr	r3, [pc, #320]	; (8004b8c <HAL_RCC_OscConfig+0x338>)
 8004a4c:	2101      	movs	r1, #1
 8004a4e:	438a      	bics	r2, r1
 8004a50:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a52:	f7fe f869 	bl	8002b28 <HAL_GetTick>
 8004a56:	0003      	movs	r3, r0
 8004a58:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a5a:	e008      	b.n	8004a6e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a5c:	f7fe f864 	bl	8002b28 <HAL_GetTick>
 8004a60:	0002      	movs	r2, r0
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d901      	bls.n	8004a6e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e272      	b.n	8004f54 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a6e:	4b47      	ldr	r3, [pc, #284]	; (8004b8c <HAL_RCC_OscConfig+0x338>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2202      	movs	r2, #2
 8004a74:	4013      	ands	r3, r2
 8004a76:	d1f1      	bne.n	8004a5c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2208      	movs	r2, #8
 8004a7e:	4013      	ands	r3, r2
 8004a80:	d036      	beq.n	8004af0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	69db      	ldr	r3, [r3, #28]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d019      	beq.n	8004abe <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a8a:	4b40      	ldr	r3, [pc, #256]	; (8004b8c <HAL_RCC_OscConfig+0x338>)
 8004a8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a8e:	4b3f      	ldr	r3, [pc, #252]	; (8004b8c <HAL_RCC_OscConfig+0x338>)
 8004a90:	2101      	movs	r1, #1
 8004a92:	430a      	orrs	r2, r1
 8004a94:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a96:	f7fe f847 	bl	8002b28 <HAL_GetTick>
 8004a9a:	0003      	movs	r3, r0
 8004a9c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a9e:	e008      	b.n	8004ab2 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004aa0:	f7fe f842 	bl	8002b28 <HAL_GetTick>
 8004aa4:	0002      	movs	r2, r0
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d901      	bls.n	8004ab2 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e250      	b.n	8004f54 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ab2:	4b36      	ldr	r3, [pc, #216]	; (8004b8c <HAL_RCC_OscConfig+0x338>)
 8004ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab6:	2202      	movs	r2, #2
 8004ab8:	4013      	ands	r3, r2
 8004aba:	d0f1      	beq.n	8004aa0 <HAL_RCC_OscConfig+0x24c>
 8004abc:	e018      	b.n	8004af0 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004abe:	4b33      	ldr	r3, [pc, #204]	; (8004b8c <HAL_RCC_OscConfig+0x338>)
 8004ac0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ac2:	4b32      	ldr	r3, [pc, #200]	; (8004b8c <HAL_RCC_OscConfig+0x338>)
 8004ac4:	2101      	movs	r1, #1
 8004ac6:	438a      	bics	r2, r1
 8004ac8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004aca:	f7fe f82d 	bl	8002b28 <HAL_GetTick>
 8004ace:	0003      	movs	r3, r0
 8004ad0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ad2:	e008      	b.n	8004ae6 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ad4:	f7fe f828 	bl	8002b28 <HAL_GetTick>
 8004ad8:	0002      	movs	r2, r0
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d901      	bls.n	8004ae6 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e236      	b.n	8004f54 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ae6:	4b29      	ldr	r3, [pc, #164]	; (8004b8c <HAL_RCC_OscConfig+0x338>)
 8004ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aea:	2202      	movs	r2, #2
 8004aec:	4013      	ands	r3, r2
 8004aee:	d1f1      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2204      	movs	r2, #4
 8004af6:	4013      	ands	r3, r2
 8004af8:	d100      	bne.n	8004afc <HAL_RCC_OscConfig+0x2a8>
 8004afa:	e0b5      	b.n	8004c68 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004afc:	201f      	movs	r0, #31
 8004afe:	183b      	adds	r3, r7, r0
 8004b00:	2200      	movs	r2, #0
 8004b02:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b04:	4b21      	ldr	r3, [pc, #132]	; (8004b8c <HAL_RCC_OscConfig+0x338>)
 8004b06:	69da      	ldr	r2, [r3, #28]
 8004b08:	2380      	movs	r3, #128	; 0x80
 8004b0a:	055b      	lsls	r3, r3, #21
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	d110      	bne.n	8004b32 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b10:	4b1e      	ldr	r3, [pc, #120]	; (8004b8c <HAL_RCC_OscConfig+0x338>)
 8004b12:	69da      	ldr	r2, [r3, #28]
 8004b14:	4b1d      	ldr	r3, [pc, #116]	; (8004b8c <HAL_RCC_OscConfig+0x338>)
 8004b16:	2180      	movs	r1, #128	; 0x80
 8004b18:	0549      	lsls	r1, r1, #21
 8004b1a:	430a      	orrs	r2, r1
 8004b1c:	61da      	str	r2, [r3, #28]
 8004b1e:	4b1b      	ldr	r3, [pc, #108]	; (8004b8c <HAL_RCC_OscConfig+0x338>)
 8004b20:	69da      	ldr	r2, [r3, #28]
 8004b22:	2380      	movs	r3, #128	; 0x80
 8004b24:	055b      	lsls	r3, r3, #21
 8004b26:	4013      	ands	r3, r2
 8004b28:	60fb      	str	r3, [r7, #12]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004b2c:	183b      	adds	r3, r7, r0
 8004b2e:	2201      	movs	r2, #1
 8004b30:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b32:	4b19      	ldr	r3, [pc, #100]	; (8004b98 <HAL_RCC_OscConfig+0x344>)
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	2380      	movs	r3, #128	; 0x80
 8004b38:	005b      	lsls	r3, r3, #1
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	d11a      	bne.n	8004b74 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b3e:	4b16      	ldr	r3, [pc, #88]	; (8004b98 <HAL_RCC_OscConfig+0x344>)
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	4b15      	ldr	r3, [pc, #84]	; (8004b98 <HAL_RCC_OscConfig+0x344>)
 8004b44:	2180      	movs	r1, #128	; 0x80
 8004b46:	0049      	lsls	r1, r1, #1
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b4c:	f7fd ffec 	bl	8002b28 <HAL_GetTick>
 8004b50:	0003      	movs	r3, r0
 8004b52:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b54:	e008      	b.n	8004b68 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b56:	f7fd ffe7 	bl	8002b28 <HAL_GetTick>
 8004b5a:	0002      	movs	r2, r0
 8004b5c:	69bb      	ldr	r3, [r7, #24]
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	2b64      	cmp	r3, #100	; 0x64
 8004b62:	d901      	bls.n	8004b68 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8004b64:	2303      	movs	r3, #3
 8004b66:	e1f5      	b.n	8004f54 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b68:	4b0b      	ldr	r3, [pc, #44]	; (8004b98 <HAL_RCC_OscConfig+0x344>)
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	2380      	movs	r3, #128	; 0x80
 8004b6e:	005b      	lsls	r3, r3, #1
 8004b70:	4013      	ands	r3, r2
 8004b72:	d0f0      	beq.n	8004b56 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d10f      	bne.n	8004b9c <HAL_RCC_OscConfig+0x348>
 8004b7c:	4b03      	ldr	r3, [pc, #12]	; (8004b8c <HAL_RCC_OscConfig+0x338>)
 8004b7e:	6a1a      	ldr	r2, [r3, #32]
 8004b80:	4b02      	ldr	r3, [pc, #8]	; (8004b8c <HAL_RCC_OscConfig+0x338>)
 8004b82:	2101      	movs	r1, #1
 8004b84:	430a      	orrs	r2, r1
 8004b86:	621a      	str	r2, [r3, #32]
 8004b88:	e036      	b.n	8004bf8 <HAL_RCC_OscConfig+0x3a4>
 8004b8a:	46c0      	nop			; (mov r8, r8)
 8004b8c:	40021000 	.word	0x40021000
 8004b90:	fffeffff 	.word	0xfffeffff
 8004b94:	fffbffff 	.word	0xfffbffff
 8004b98:	40007000 	.word	0x40007000
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d10c      	bne.n	8004bbe <HAL_RCC_OscConfig+0x36a>
 8004ba4:	4bca      	ldr	r3, [pc, #808]	; (8004ed0 <HAL_RCC_OscConfig+0x67c>)
 8004ba6:	6a1a      	ldr	r2, [r3, #32]
 8004ba8:	4bc9      	ldr	r3, [pc, #804]	; (8004ed0 <HAL_RCC_OscConfig+0x67c>)
 8004baa:	2101      	movs	r1, #1
 8004bac:	438a      	bics	r2, r1
 8004bae:	621a      	str	r2, [r3, #32]
 8004bb0:	4bc7      	ldr	r3, [pc, #796]	; (8004ed0 <HAL_RCC_OscConfig+0x67c>)
 8004bb2:	6a1a      	ldr	r2, [r3, #32]
 8004bb4:	4bc6      	ldr	r3, [pc, #792]	; (8004ed0 <HAL_RCC_OscConfig+0x67c>)
 8004bb6:	2104      	movs	r1, #4
 8004bb8:	438a      	bics	r2, r1
 8004bba:	621a      	str	r2, [r3, #32]
 8004bbc:	e01c      	b.n	8004bf8 <HAL_RCC_OscConfig+0x3a4>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	2b05      	cmp	r3, #5
 8004bc4:	d10c      	bne.n	8004be0 <HAL_RCC_OscConfig+0x38c>
 8004bc6:	4bc2      	ldr	r3, [pc, #776]	; (8004ed0 <HAL_RCC_OscConfig+0x67c>)
 8004bc8:	6a1a      	ldr	r2, [r3, #32]
 8004bca:	4bc1      	ldr	r3, [pc, #772]	; (8004ed0 <HAL_RCC_OscConfig+0x67c>)
 8004bcc:	2104      	movs	r1, #4
 8004bce:	430a      	orrs	r2, r1
 8004bd0:	621a      	str	r2, [r3, #32]
 8004bd2:	4bbf      	ldr	r3, [pc, #764]	; (8004ed0 <HAL_RCC_OscConfig+0x67c>)
 8004bd4:	6a1a      	ldr	r2, [r3, #32]
 8004bd6:	4bbe      	ldr	r3, [pc, #760]	; (8004ed0 <HAL_RCC_OscConfig+0x67c>)
 8004bd8:	2101      	movs	r1, #1
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	621a      	str	r2, [r3, #32]
 8004bde:	e00b      	b.n	8004bf8 <HAL_RCC_OscConfig+0x3a4>
 8004be0:	4bbb      	ldr	r3, [pc, #748]	; (8004ed0 <HAL_RCC_OscConfig+0x67c>)
 8004be2:	6a1a      	ldr	r2, [r3, #32]
 8004be4:	4bba      	ldr	r3, [pc, #744]	; (8004ed0 <HAL_RCC_OscConfig+0x67c>)
 8004be6:	2101      	movs	r1, #1
 8004be8:	438a      	bics	r2, r1
 8004bea:	621a      	str	r2, [r3, #32]
 8004bec:	4bb8      	ldr	r3, [pc, #736]	; (8004ed0 <HAL_RCC_OscConfig+0x67c>)
 8004bee:	6a1a      	ldr	r2, [r3, #32]
 8004bf0:	4bb7      	ldr	r3, [pc, #732]	; (8004ed0 <HAL_RCC_OscConfig+0x67c>)
 8004bf2:	2104      	movs	r1, #4
 8004bf4:	438a      	bics	r2, r1
 8004bf6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d014      	beq.n	8004c2a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c00:	f7fd ff92 	bl	8002b28 <HAL_GetTick>
 8004c04:	0003      	movs	r3, r0
 8004c06:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c08:	e009      	b.n	8004c1e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c0a:	f7fd ff8d 	bl	8002b28 <HAL_GetTick>
 8004c0e:	0002      	movs	r2, r0
 8004c10:	69bb      	ldr	r3, [r7, #24]
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	4aaf      	ldr	r2, [pc, #700]	; (8004ed4 <HAL_RCC_OscConfig+0x680>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d901      	bls.n	8004c1e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e19a      	b.n	8004f54 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c1e:	4bac      	ldr	r3, [pc, #688]	; (8004ed0 <HAL_RCC_OscConfig+0x67c>)
 8004c20:	6a1b      	ldr	r3, [r3, #32]
 8004c22:	2202      	movs	r2, #2
 8004c24:	4013      	ands	r3, r2
 8004c26:	d0f0      	beq.n	8004c0a <HAL_RCC_OscConfig+0x3b6>
 8004c28:	e013      	b.n	8004c52 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c2a:	f7fd ff7d 	bl	8002b28 <HAL_GetTick>
 8004c2e:	0003      	movs	r3, r0
 8004c30:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c32:	e009      	b.n	8004c48 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c34:	f7fd ff78 	bl	8002b28 <HAL_GetTick>
 8004c38:	0002      	movs	r2, r0
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	4aa5      	ldr	r2, [pc, #660]	; (8004ed4 <HAL_RCC_OscConfig+0x680>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d901      	bls.n	8004c48 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004c44:	2303      	movs	r3, #3
 8004c46:	e185      	b.n	8004f54 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c48:	4ba1      	ldr	r3, [pc, #644]	; (8004ed0 <HAL_RCC_OscConfig+0x67c>)
 8004c4a:	6a1b      	ldr	r3, [r3, #32]
 8004c4c:	2202      	movs	r2, #2
 8004c4e:	4013      	ands	r3, r2
 8004c50:	d1f0      	bne.n	8004c34 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004c52:	231f      	movs	r3, #31
 8004c54:	18fb      	adds	r3, r7, r3
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d105      	bne.n	8004c68 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c5c:	4b9c      	ldr	r3, [pc, #624]	; (8004ed0 <HAL_RCC_OscConfig+0x67c>)
 8004c5e:	69da      	ldr	r2, [r3, #28]
 8004c60:	4b9b      	ldr	r3, [pc, #620]	; (8004ed0 <HAL_RCC_OscConfig+0x67c>)
 8004c62:	499d      	ldr	r1, [pc, #628]	; (8004ed8 <HAL_RCC_OscConfig+0x684>)
 8004c64:	400a      	ands	r2, r1
 8004c66:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2210      	movs	r2, #16
 8004c6e:	4013      	ands	r3, r2
 8004c70:	d063      	beq.n	8004d3a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	695b      	ldr	r3, [r3, #20]
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d12a      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004c7a:	4b95      	ldr	r3, [pc, #596]	; (8004ed0 <HAL_RCC_OscConfig+0x67c>)
 8004c7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c7e:	4b94      	ldr	r3, [pc, #592]	; (8004ed0 <HAL_RCC_OscConfig+0x67c>)
 8004c80:	2104      	movs	r1, #4
 8004c82:	430a      	orrs	r2, r1
 8004c84:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004c86:	4b92      	ldr	r3, [pc, #584]	; (8004ed0 <HAL_RCC_OscConfig+0x67c>)
 8004c88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c8a:	4b91      	ldr	r3, [pc, #580]	; (8004ed0 <HAL_RCC_OscConfig+0x67c>)
 8004c8c:	2101      	movs	r1, #1
 8004c8e:	430a      	orrs	r2, r1
 8004c90:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c92:	f7fd ff49 	bl	8002b28 <HAL_GetTick>
 8004c96:	0003      	movs	r3, r0
 8004c98:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004c9a:	e008      	b.n	8004cae <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004c9c:	f7fd ff44 	bl	8002b28 <HAL_GetTick>
 8004ca0:	0002      	movs	r2, r0
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d901      	bls.n	8004cae <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e152      	b.n	8004f54 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004cae:	4b88      	ldr	r3, [pc, #544]	; (8004ed0 <HAL_RCC_OscConfig+0x67c>)
 8004cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cb2:	2202      	movs	r2, #2
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	d0f1      	beq.n	8004c9c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004cb8:	4b85      	ldr	r3, [pc, #532]	; (8004ed0 <HAL_RCC_OscConfig+0x67c>)
 8004cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cbc:	22f8      	movs	r2, #248	; 0xf8
 8004cbe:	4393      	bics	r3, r2
 8004cc0:	0019      	movs	r1, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	00da      	lsls	r2, r3, #3
 8004cc8:	4b81      	ldr	r3, [pc, #516]	; (8004ed0 <HAL_RCC_OscConfig+0x67c>)
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	635a      	str	r2, [r3, #52]	; 0x34
 8004cce:	e034      	b.n	8004d3a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	695b      	ldr	r3, [r3, #20]
 8004cd4:	3305      	adds	r3, #5
 8004cd6:	d111      	bne.n	8004cfc <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004cd8:	4b7d      	ldr	r3, [pc, #500]	; (8004ed0 <HAL_RCC_OscConfig+0x67c>)
 8004cda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cdc:	4b7c      	ldr	r3, [pc, #496]	; (8004ed0 <HAL_RCC_OscConfig+0x67c>)
 8004cde:	2104      	movs	r1, #4
 8004ce0:	438a      	bics	r2, r1
 8004ce2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004ce4:	4b7a      	ldr	r3, [pc, #488]	; (8004ed0 <HAL_RCC_OscConfig+0x67c>)
 8004ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ce8:	22f8      	movs	r2, #248	; 0xf8
 8004cea:	4393      	bics	r3, r2
 8004cec:	0019      	movs	r1, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	699b      	ldr	r3, [r3, #24]
 8004cf2:	00da      	lsls	r2, r3, #3
 8004cf4:	4b76      	ldr	r3, [pc, #472]	; (8004ed0 <HAL_RCC_OscConfig+0x67c>)
 8004cf6:	430a      	orrs	r2, r1
 8004cf8:	635a      	str	r2, [r3, #52]	; 0x34
 8004cfa:	e01e      	b.n	8004d3a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004cfc:	4b74      	ldr	r3, [pc, #464]	; (8004ed0 <HAL_RCC_OscConfig+0x67c>)
 8004cfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d00:	4b73      	ldr	r3, [pc, #460]	; (8004ed0 <HAL_RCC_OscConfig+0x67c>)
 8004d02:	2104      	movs	r1, #4
 8004d04:	430a      	orrs	r2, r1
 8004d06:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004d08:	4b71      	ldr	r3, [pc, #452]	; (8004ed0 <HAL_RCC_OscConfig+0x67c>)
 8004d0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d0c:	4b70      	ldr	r3, [pc, #448]	; (8004ed0 <HAL_RCC_OscConfig+0x67c>)
 8004d0e:	2101      	movs	r1, #1
 8004d10:	438a      	bics	r2, r1
 8004d12:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d14:	f7fd ff08 	bl	8002b28 <HAL_GetTick>
 8004d18:	0003      	movs	r3, r0
 8004d1a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004d1c:	e008      	b.n	8004d30 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004d1e:	f7fd ff03 	bl	8002b28 <HAL_GetTick>
 8004d22:	0002      	movs	r2, r0
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	1ad3      	subs	r3, r2, r3
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	d901      	bls.n	8004d30 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	e111      	b.n	8004f54 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004d30:	4b67      	ldr	r3, [pc, #412]	; (8004ed0 <HAL_RCC_OscConfig+0x67c>)
 8004d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d34:	2202      	movs	r2, #2
 8004d36:	4013      	ands	r3, r2
 8004d38:	d1f1      	bne.n	8004d1e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	2220      	movs	r2, #32
 8004d40:	4013      	ands	r3, r2
 8004d42:	d05c      	beq.n	8004dfe <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004d44:	4b62      	ldr	r3, [pc, #392]	; (8004ed0 <HAL_RCC_OscConfig+0x67c>)
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	220c      	movs	r2, #12
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	2b0c      	cmp	r3, #12
 8004d4e:	d00e      	beq.n	8004d6e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004d50:	4b5f      	ldr	r3, [pc, #380]	; (8004ed0 <HAL_RCC_OscConfig+0x67c>)
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	220c      	movs	r2, #12
 8004d56:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004d58:	2b08      	cmp	r3, #8
 8004d5a:	d114      	bne.n	8004d86 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004d5c:	4b5c      	ldr	r3, [pc, #368]	; (8004ed0 <HAL_RCC_OscConfig+0x67c>)
 8004d5e:	685a      	ldr	r2, [r3, #4]
 8004d60:	23c0      	movs	r3, #192	; 0xc0
 8004d62:	025b      	lsls	r3, r3, #9
 8004d64:	401a      	ands	r2, r3
 8004d66:	23c0      	movs	r3, #192	; 0xc0
 8004d68:	025b      	lsls	r3, r3, #9
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d10b      	bne.n	8004d86 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004d6e:	4b58      	ldr	r3, [pc, #352]	; (8004ed0 <HAL_RCC_OscConfig+0x67c>)
 8004d70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d72:	2380      	movs	r3, #128	; 0x80
 8004d74:	025b      	lsls	r3, r3, #9
 8004d76:	4013      	ands	r3, r2
 8004d78:	d040      	beq.n	8004dfc <HAL_RCC_OscConfig+0x5a8>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a1b      	ldr	r3, [r3, #32]
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d03c      	beq.n	8004dfc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e0e6      	b.n	8004f54 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a1b      	ldr	r3, [r3, #32]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d01b      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004d8e:	4b50      	ldr	r3, [pc, #320]	; (8004ed0 <HAL_RCC_OscConfig+0x67c>)
 8004d90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d92:	4b4f      	ldr	r3, [pc, #316]	; (8004ed0 <HAL_RCC_OscConfig+0x67c>)
 8004d94:	2180      	movs	r1, #128	; 0x80
 8004d96:	0249      	lsls	r1, r1, #9
 8004d98:	430a      	orrs	r2, r1
 8004d9a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d9c:	f7fd fec4 	bl	8002b28 <HAL_GetTick>
 8004da0:	0003      	movs	r3, r0
 8004da2:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004da4:	e008      	b.n	8004db8 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004da6:	f7fd febf 	bl	8002b28 <HAL_GetTick>
 8004daa:	0002      	movs	r2, r0
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d901      	bls.n	8004db8 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8004db4:	2303      	movs	r3, #3
 8004db6:	e0cd      	b.n	8004f54 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004db8:	4b45      	ldr	r3, [pc, #276]	; (8004ed0 <HAL_RCC_OscConfig+0x67c>)
 8004dba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dbc:	2380      	movs	r3, #128	; 0x80
 8004dbe:	025b      	lsls	r3, r3, #9
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	d0f0      	beq.n	8004da6 <HAL_RCC_OscConfig+0x552>
 8004dc4:	e01b      	b.n	8004dfe <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004dc6:	4b42      	ldr	r3, [pc, #264]	; (8004ed0 <HAL_RCC_OscConfig+0x67c>)
 8004dc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dca:	4b41      	ldr	r3, [pc, #260]	; (8004ed0 <HAL_RCC_OscConfig+0x67c>)
 8004dcc:	4943      	ldr	r1, [pc, #268]	; (8004edc <HAL_RCC_OscConfig+0x688>)
 8004dce:	400a      	ands	r2, r1
 8004dd0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dd2:	f7fd fea9 	bl	8002b28 <HAL_GetTick>
 8004dd6:	0003      	movs	r3, r0
 8004dd8:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004dda:	e008      	b.n	8004dee <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ddc:	f7fd fea4 	bl	8002b28 <HAL_GetTick>
 8004de0:	0002      	movs	r2, r0
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d901      	bls.n	8004dee <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e0b2      	b.n	8004f54 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004dee:	4b38      	ldr	r3, [pc, #224]	; (8004ed0 <HAL_RCC_OscConfig+0x67c>)
 8004df0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004df2:	2380      	movs	r3, #128	; 0x80
 8004df4:	025b      	lsls	r3, r3, #9
 8004df6:	4013      	ands	r3, r2
 8004df8:	d1f0      	bne.n	8004ddc <HAL_RCC_OscConfig+0x588>
 8004dfa:	e000      	b.n	8004dfe <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004dfc:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d100      	bne.n	8004e08 <HAL_RCC_OscConfig+0x5b4>
 8004e06:	e0a4      	b.n	8004f52 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e08:	4b31      	ldr	r3, [pc, #196]	; (8004ed0 <HAL_RCC_OscConfig+0x67c>)
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	220c      	movs	r2, #12
 8004e0e:	4013      	ands	r3, r2
 8004e10:	2b08      	cmp	r3, #8
 8004e12:	d100      	bne.n	8004e16 <HAL_RCC_OscConfig+0x5c2>
 8004e14:	e078      	b.n	8004f08 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d14c      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e1e:	4b2c      	ldr	r3, [pc, #176]	; (8004ed0 <HAL_RCC_OscConfig+0x67c>)
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	4b2b      	ldr	r3, [pc, #172]	; (8004ed0 <HAL_RCC_OscConfig+0x67c>)
 8004e24:	492e      	ldr	r1, [pc, #184]	; (8004ee0 <HAL_RCC_OscConfig+0x68c>)
 8004e26:	400a      	ands	r2, r1
 8004e28:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e2a:	f7fd fe7d 	bl	8002b28 <HAL_GetTick>
 8004e2e:	0003      	movs	r3, r0
 8004e30:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e32:	e008      	b.n	8004e46 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e34:	f7fd fe78 	bl	8002b28 <HAL_GetTick>
 8004e38:	0002      	movs	r2, r0
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d901      	bls.n	8004e46 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e086      	b.n	8004f54 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e46:	4b22      	ldr	r3, [pc, #136]	; (8004ed0 <HAL_RCC_OscConfig+0x67c>)
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	2380      	movs	r3, #128	; 0x80
 8004e4c:	049b      	lsls	r3, r3, #18
 8004e4e:	4013      	ands	r3, r2
 8004e50:	d1f0      	bne.n	8004e34 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e52:	4b1f      	ldr	r3, [pc, #124]	; (8004ed0 <HAL_RCC_OscConfig+0x67c>)
 8004e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e56:	220f      	movs	r2, #15
 8004e58:	4393      	bics	r3, r2
 8004e5a:	0019      	movs	r1, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e60:	4b1b      	ldr	r3, [pc, #108]	; (8004ed0 <HAL_RCC_OscConfig+0x67c>)
 8004e62:	430a      	orrs	r2, r1
 8004e64:	62da      	str	r2, [r3, #44]	; 0x2c
 8004e66:	4b1a      	ldr	r3, [pc, #104]	; (8004ed0 <HAL_RCC_OscConfig+0x67c>)
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	4a1e      	ldr	r2, [pc, #120]	; (8004ee4 <HAL_RCC_OscConfig+0x690>)
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	0019      	movs	r1, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e78:	431a      	orrs	r2, r3
 8004e7a:	4b15      	ldr	r3, [pc, #84]	; (8004ed0 <HAL_RCC_OscConfig+0x67c>)
 8004e7c:	430a      	orrs	r2, r1
 8004e7e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e80:	4b13      	ldr	r3, [pc, #76]	; (8004ed0 <HAL_RCC_OscConfig+0x67c>)
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	4b12      	ldr	r3, [pc, #72]	; (8004ed0 <HAL_RCC_OscConfig+0x67c>)
 8004e86:	2180      	movs	r1, #128	; 0x80
 8004e88:	0449      	lsls	r1, r1, #17
 8004e8a:	430a      	orrs	r2, r1
 8004e8c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e8e:	f7fd fe4b 	bl	8002b28 <HAL_GetTick>
 8004e92:	0003      	movs	r3, r0
 8004e94:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e96:	e008      	b.n	8004eaa <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e98:	f7fd fe46 	bl	8002b28 <HAL_GetTick>
 8004e9c:	0002      	movs	r2, r0
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d901      	bls.n	8004eaa <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e054      	b.n	8004f54 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004eaa:	4b09      	ldr	r3, [pc, #36]	; (8004ed0 <HAL_RCC_OscConfig+0x67c>)
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	2380      	movs	r3, #128	; 0x80
 8004eb0:	049b      	lsls	r3, r3, #18
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	d0f0      	beq.n	8004e98 <HAL_RCC_OscConfig+0x644>
 8004eb6:	e04c      	b.n	8004f52 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eb8:	4b05      	ldr	r3, [pc, #20]	; (8004ed0 <HAL_RCC_OscConfig+0x67c>)
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	4b04      	ldr	r3, [pc, #16]	; (8004ed0 <HAL_RCC_OscConfig+0x67c>)
 8004ebe:	4908      	ldr	r1, [pc, #32]	; (8004ee0 <HAL_RCC_OscConfig+0x68c>)
 8004ec0:	400a      	ands	r2, r1
 8004ec2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ec4:	f7fd fe30 	bl	8002b28 <HAL_GetTick>
 8004ec8:	0003      	movs	r3, r0
 8004eca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ecc:	e015      	b.n	8004efa <HAL_RCC_OscConfig+0x6a6>
 8004ece:	46c0      	nop			; (mov r8, r8)
 8004ed0:	40021000 	.word	0x40021000
 8004ed4:	00001388 	.word	0x00001388
 8004ed8:	efffffff 	.word	0xefffffff
 8004edc:	fffeffff 	.word	0xfffeffff
 8004ee0:	feffffff 	.word	0xfeffffff
 8004ee4:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ee8:	f7fd fe1e 	bl	8002b28 <HAL_GetTick>
 8004eec:	0002      	movs	r2, r0
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d901      	bls.n	8004efa <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e02c      	b.n	8004f54 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004efa:	4b18      	ldr	r3, [pc, #96]	; (8004f5c <HAL_RCC_OscConfig+0x708>)
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	2380      	movs	r3, #128	; 0x80
 8004f00:	049b      	lsls	r3, r3, #18
 8004f02:	4013      	ands	r3, r2
 8004f04:	d1f0      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x694>
 8004f06:	e024      	b.n	8004f52 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d101      	bne.n	8004f14 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e01f      	b.n	8004f54 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004f14:	4b11      	ldr	r3, [pc, #68]	; (8004f5c <HAL_RCC_OscConfig+0x708>)
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004f1a:	4b10      	ldr	r3, [pc, #64]	; (8004f5c <HAL_RCC_OscConfig+0x708>)
 8004f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f20:	697a      	ldr	r2, [r7, #20]
 8004f22:	23c0      	movs	r3, #192	; 0xc0
 8004f24:	025b      	lsls	r3, r3, #9
 8004f26:	401a      	ands	r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d10e      	bne.n	8004f4e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	220f      	movs	r2, #15
 8004f34:	401a      	ands	r2, r3
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d107      	bne.n	8004f4e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004f3e:	697a      	ldr	r2, [r7, #20]
 8004f40:	23f0      	movs	r3, #240	; 0xf0
 8004f42:	039b      	lsls	r3, r3, #14
 8004f44:	401a      	ands	r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d001      	beq.n	8004f52 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e000      	b.n	8004f54 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8004f52:	2300      	movs	r3, #0
}
 8004f54:	0018      	movs	r0, r3
 8004f56:	46bd      	mov	sp, r7
 8004f58:	b008      	add	sp, #32
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	40021000 	.word	0x40021000

08004f60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d101      	bne.n	8004f74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e0bf      	b.n	80050f4 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f74:	4b61      	ldr	r3, [pc, #388]	; (80050fc <HAL_RCC_ClockConfig+0x19c>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	683a      	ldr	r2, [r7, #0]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d911      	bls.n	8004fa6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f82:	4b5e      	ldr	r3, [pc, #376]	; (80050fc <HAL_RCC_ClockConfig+0x19c>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2201      	movs	r2, #1
 8004f88:	4393      	bics	r3, r2
 8004f8a:	0019      	movs	r1, r3
 8004f8c:	4b5b      	ldr	r3, [pc, #364]	; (80050fc <HAL_RCC_ClockConfig+0x19c>)
 8004f8e:	683a      	ldr	r2, [r7, #0]
 8004f90:	430a      	orrs	r2, r1
 8004f92:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f94:	4b59      	ldr	r3, [pc, #356]	; (80050fc <HAL_RCC_ClockConfig+0x19c>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	683a      	ldr	r2, [r7, #0]
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d001      	beq.n	8004fa6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e0a6      	b.n	80050f4 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2202      	movs	r2, #2
 8004fac:	4013      	ands	r3, r2
 8004fae:	d015      	beq.n	8004fdc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2204      	movs	r2, #4
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	d006      	beq.n	8004fc8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004fba:	4b51      	ldr	r3, [pc, #324]	; (8005100 <HAL_RCC_ClockConfig+0x1a0>)
 8004fbc:	685a      	ldr	r2, [r3, #4]
 8004fbe:	4b50      	ldr	r3, [pc, #320]	; (8005100 <HAL_RCC_ClockConfig+0x1a0>)
 8004fc0:	21e0      	movs	r1, #224	; 0xe0
 8004fc2:	00c9      	lsls	r1, r1, #3
 8004fc4:	430a      	orrs	r2, r1
 8004fc6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fc8:	4b4d      	ldr	r3, [pc, #308]	; (8005100 <HAL_RCC_ClockConfig+0x1a0>)
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	22f0      	movs	r2, #240	; 0xf0
 8004fce:	4393      	bics	r3, r2
 8004fd0:	0019      	movs	r1, r3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	689a      	ldr	r2, [r3, #8]
 8004fd6:	4b4a      	ldr	r3, [pc, #296]	; (8005100 <HAL_RCC_ClockConfig+0x1a0>)
 8004fd8:	430a      	orrs	r2, r1
 8004fda:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	d04c      	beq.n	8005080 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d107      	bne.n	8004ffe <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fee:	4b44      	ldr	r3, [pc, #272]	; (8005100 <HAL_RCC_ClockConfig+0x1a0>)
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	2380      	movs	r3, #128	; 0x80
 8004ff4:	029b      	lsls	r3, r3, #10
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	d120      	bne.n	800503c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e07a      	b.n	80050f4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	2b02      	cmp	r3, #2
 8005004:	d107      	bne.n	8005016 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005006:	4b3e      	ldr	r3, [pc, #248]	; (8005100 <HAL_RCC_ClockConfig+0x1a0>)
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	2380      	movs	r3, #128	; 0x80
 800500c:	049b      	lsls	r3, r3, #18
 800500e:	4013      	ands	r3, r2
 8005010:	d114      	bne.n	800503c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e06e      	b.n	80050f4 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	2b03      	cmp	r3, #3
 800501c:	d107      	bne.n	800502e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800501e:	4b38      	ldr	r3, [pc, #224]	; (8005100 <HAL_RCC_ClockConfig+0x1a0>)
 8005020:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005022:	2380      	movs	r3, #128	; 0x80
 8005024:	025b      	lsls	r3, r3, #9
 8005026:	4013      	ands	r3, r2
 8005028:	d108      	bne.n	800503c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e062      	b.n	80050f4 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800502e:	4b34      	ldr	r3, [pc, #208]	; (8005100 <HAL_RCC_ClockConfig+0x1a0>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2202      	movs	r2, #2
 8005034:	4013      	ands	r3, r2
 8005036:	d101      	bne.n	800503c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e05b      	b.n	80050f4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800503c:	4b30      	ldr	r3, [pc, #192]	; (8005100 <HAL_RCC_ClockConfig+0x1a0>)
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	2203      	movs	r2, #3
 8005042:	4393      	bics	r3, r2
 8005044:	0019      	movs	r1, r3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	685a      	ldr	r2, [r3, #4]
 800504a:	4b2d      	ldr	r3, [pc, #180]	; (8005100 <HAL_RCC_ClockConfig+0x1a0>)
 800504c:	430a      	orrs	r2, r1
 800504e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005050:	f7fd fd6a 	bl	8002b28 <HAL_GetTick>
 8005054:	0003      	movs	r3, r0
 8005056:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005058:	e009      	b.n	800506e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800505a:	f7fd fd65 	bl	8002b28 <HAL_GetTick>
 800505e:	0002      	movs	r2, r0
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	4a27      	ldr	r2, [pc, #156]	; (8005104 <HAL_RCC_ClockConfig+0x1a4>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d901      	bls.n	800506e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e042      	b.n	80050f4 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800506e:	4b24      	ldr	r3, [pc, #144]	; (8005100 <HAL_RCC_ClockConfig+0x1a0>)
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	220c      	movs	r2, #12
 8005074:	401a      	ands	r2, r3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	429a      	cmp	r2, r3
 800507e:	d1ec      	bne.n	800505a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005080:	4b1e      	ldr	r3, [pc, #120]	; (80050fc <HAL_RCC_ClockConfig+0x19c>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2201      	movs	r2, #1
 8005086:	4013      	ands	r3, r2
 8005088:	683a      	ldr	r2, [r7, #0]
 800508a:	429a      	cmp	r2, r3
 800508c:	d211      	bcs.n	80050b2 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800508e:	4b1b      	ldr	r3, [pc, #108]	; (80050fc <HAL_RCC_ClockConfig+0x19c>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2201      	movs	r2, #1
 8005094:	4393      	bics	r3, r2
 8005096:	0019      	movs	r1, r3
 8005098:	4b18      	ldr	r3, [pc, #96]	; (80050fc <HAL_RCC_ClockConfig+0x19c>)
 800509a:	683a      	ldr	r2, [r7, #0]
 800509c:	430a      	orrs	r2, r1
 800509e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050a0:	4b16      	ldr	r3, [pc, #88]	; (80050fc <HAL_RCC_ClockConfig+0x19c>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2201      	movs	r2, #1
 80050a6:	4013      	ands	r3, r2
 80050a8:	683a      	ldr	r2, [r7, #0]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d001      	beq.n	80050b2 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e020      	b.n	80050f4 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	2204      	movs	r2, #4
 80050b8:	4013      	ands	r3, r2
 80050ba:	d009      	beq.n	80050d0 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80050bc:	4b10      	ldr	r3, [pc, #64]	; (8005100 <HAL_RCC_ClockConfig+0x1a0>)
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	4a11      	ldr	r2, [pc, #68]	; (8005108 <HAL_RCC_ClockConfig+0x1a8>)
 80050c2:	4013      	ands	r3, r2
 80050c4:	0019      	movs	r1, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	68da      	ldr	r2, [r3, #12]
 80050ca:	4b0d      	ldr	r3, [pc, #52]	; (8005100 <HAL_RCC_ClockConfig+0x1a0>)
 80050cc:	430a      	orrs	r2, r1
 80050ce:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80050d0:	f000 f820 	bl	8005114 <HAL_RCC_GetSysClockFreq>
 80050d4:	0001      	movs	r1, r0
 80050d6:	4b0a      	ldr	r3, [pc, #40]	; (8005100 <HAL_RCC_ClockConfig+0x1a0>)
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	091b      	lsrs	r3, r3, #4
 80050dc:	220f      	movs	r2, #15
 80050de:	4013      	ands	r3, r2
 80050e0:	4a0a      	ldr	r2, [pc, #40]	; (800510c <HAL_RCC_ClockConfig+0x1ac>)
 80050e2:	5cd3      	ldrb	r3, [r2, r3]
 80050e4:	000a      	movs	r2, r1
 80050e6:	40da      	lsrs	r2, r3
 80050e8:	4b09      	ldr	r3, [pc, #36]	; (8005110 <HAL_RCC_ClockConfig+0x1b0>)
 80050ea:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80050ec:	2003      	movs	r0, #3
 80050ee:	f7fd fcd5 	bl	8002a9c <HAL_InitTick>
  
  return HAL_OK;
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	0018      	movs	r0, r3
 80050f6:	46bd      	mov	sp, r7
 80050f8:	b004      	add	sp, #16
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	40022000 	.word	0x40022000
 8005100:	40021000 	.word	0x40021000
 8005104:	00001388 	.word	0x00001388
 8005108:	fffff8ff 	.word	0xfffff8ff
 800510c:	080070d8 	.word	0x080070d8
 8005110:	20000000 	.word	0x20000000

08005114 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005114:	b590      	push	{r4, r7, lr}
 8005116:	b08f      	sub	sp, #60	; 0x3c
 8005118:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800511a:	2314      	movs	r3, #20
 800511c:	18fb      	adds	r3, r7, r3
 800511e:	4a38      	ldr	r2, [pc, #224]	; (8005200 <HAL_RCC_GetSysClockFreq+0xec>)
 8005120:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005122:	c313      	stmia	r3!, {r0, r1, r4}
 8005124:	6812      	ldr	r2, [r2, #0]
 8005126:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8005128:	1d3b      	adds	r3, r7, #4
 800512a:	4a36      	ldr	r2, [pc, #216]	; (8005204 <HAL_RCC_GetSysClockFreq+0xf0>)
 800512c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800512e:	c313      	stmia	r3!, {r0, r1, r4}
 8005130:	6812      	ldr	r2, [r2, #0]
 8005132:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005134:	2300      	movs	r3, #0
 8005136:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005138:	2300      	movs	r3, #0
 800513a:	62bb      	str	r3, [r7, #40]	; 0x28
 800513c:	2300      	movs	r3, #0
 800513e:	637b      	str	r3, [r7, #52]	; 0x34
 8005140:	2300      	movs	r3, #0
 8005142:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8005144:	2300      	movs	r3, #0
 8005146:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8005148:	4b2f      	ldr	r3, [pc, #188]	; (8005208 <HAL_RCC_GetSysClockFreq+0xf4>)
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800514e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005150:	220c      	movs	r2, #12
 8005152:	4013      	ands	r3, r2
 8005154:	2b0c      	cmp	r3, #12
 8005156:	d047      	beq.n	80051e8 <HAL_RCC_GetSysClockFreq+0xd4>
 8005158:	d849      	bhi.n	80051ee <HAL_RCC_GetSysClockFreq+0xda>
 800515a:	2b04      	cmp	r3, #4
 800515c:	d002      	beq.n	8005164 <HAL_RCC_GetSysClockFreq+0x50>
 800515e:	2b08      	cmp	r3, #8
 8005160:	d003      	beq.n	800516a <HAL_RCC_GetSysClockFreq+0x56>
 8005162:	e044      	b.n	80051ee <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005164:	4b29      	ldr	r3, [pc, #164]	; (800520c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005166:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005168:	e044      	b.n	80051f4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800516a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800516c:	0c9b      	lsrs	r3, r3, #18
 800516e:	220f      	movs	r2, #15
 8005170:	4013      	ands	r3, r2
 8005172:	2214      	movs	r2, #20
 8005174:	18ba      	adds	r2, r7, r2
 8005176:	5cd3      	ldrb	r3, [r2, r3]
 8005178:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800517a:	4b23      	ldr	r3, [pc, #140]	; (8005208 <HAL_RCC_GetSysClockFreq+0xf4>)
 800517c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800517e:	220f      	movs	r2, #15
 8005180:	4013      	ands	r3, r2
 8005182:	1d3a      	adds	r2, r7, #4
 8005184:	5cd3      	ldrb	r3, [r2, r3]
 8005186:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005188:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800518a:	23c0      	movs	r3, #192	; 0xc0
 800518c:	025b      	lsls	r3, r3, #9
 800518e:	401a      	ands	r2, r3
 8005190:	2380      	movs	r3, #128	; 0x80
 8005192:	025b      	lsls	r3, r3, #9
 8005194:	429a      	cmp	r2, r3
 8005196:	d109      	bne.n	80051ac <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005198:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800519a:	481c      	ldr	r0, [pc, #112]	; (800520c <HAL_RCC_GetSysClockFreq+0xf8>)
 800519c:	f7fa ffb2 	bl	8000104 <__udivsi3>
 80051a0:	0003      	movs	r3, r0
 80051a2:	001a      	movs	r2, r3
 80051a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a6:	4353      	muls	r3, r2
 80051a8:	637b      	str	r3, [r7, #52]	; 0x34
 80051aa:	e01a      	b.n	80051e2 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80051ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051ae:	23c0      	movs	r3, #192	; 0xc0
 80051b0:	025b      	lsls	r3, r3, #9
 80051b2:	401a      	ands	r2, r3
 80051b4:	23c0      	movs	r3, #192	; 0xc0
 80051b6:	025b      	lsls	r3, r3, #9
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d109      	bne.n	80051d0 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80051bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051be:	4814      	ldr	r0, [pc, #80]	; (8005210 <HAL_RCC_GetSysClockFreq+0xfc>)
 80051c0:	f7fa ffa0 	bl	8000104 <__udivsi3>
 80051c4:	0003      	movs	r3, r0
 80051c6:	001a      	movs	r2, r3
 80051c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ca:	4353      	muls	r3, r2
 80051cc:	637b      	str	r3, [r7, #52]	; 0x34
 80051ce:	e008      	b.n	80051e2 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80051d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051d2:	480e      	ldr	r0, [pc, #56]	; (800520c <HAL_RCC_GetSysClockFreq+0xf8>)
 80051d4:	f7fa ff96 	bl	8000104 <__udivsi3>
 80051d8:	0003      	movs	r3, r0
 80051da:	001a      	movs	r2, r3
 80051dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051de:	4353      	muls	r3, r2
 80051e0:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80051e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051e4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80051e6:	e005      	b.n	80051f4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80051e8:	4b09      	ldr	r3, [pc, #36]	; (8005210 <HAL_RCC_GetSysClockFreq+0xfc>)
 80051ea:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80051ec:	e002      	b.n	80051f4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80051ee:	4b07      	ldr	r3, [pc, #28]	; (800520c <HAL_RCC_GetSysClockFreq+0xf8>)
 80051f0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80051f2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80051f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80051f6:	0018      	movs	r0, r3
 80051f8:	46bd      	mov	sp, r7
 80051fa:	b00f      	add	sp, #60	; 0x3c
 80051fc:	bd90      	pop	{r4, r7, pc}
 80051fe:	46c0      	nop			; (mov r8, r8)
 8005200:	08007038 	.word	0x08007038
 8005204:	08007048 	.word	0x08007048
 8005208:	40021000 	.word	0x40021000
 800520c:	007a1200 	.word	0x007a1200
 8005210:	02dc6c00 	.word	0x02dc6c00

08005214 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005218:	4b02      	ldr	r3, [pc, #8]	; (8005224 <HAL_RCC_GetHCLKFreq+0x10>)
 800521a:	681b      	ldr	r3, [r3, #0]
}
 800521c:	0018      	movs	r0, r3
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	46c0      	nop			; (mov r8, r8)
 8005224:	20000000 	.word	0x20000000

08005228 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800522c:	f7ff fff2 	bl	8005214 <HAL_RCC_GetHCLKFreq>
 8005230:	0001      	movs	r1, r0
 8005232:	4b06      	ldr	r3, [pc, #24]	; (800524c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	0a1b      	lsrs	r3, r3, #8
 8005238:	2207      	movs	r2, #7
 800523a:	4013      	ands	r3, r2
 800523c:	4a04      	ldr	r2, [pc, #16]	; (8005250 <HAL_RCC_GetPCLK1Freq+0x28>)
 800523e:	5cd3      	ldrb	r3, [r2, r3]
 8005240:	40d9      	lsrs	r1, r3
 8005242:	000b      	movs	r3, r1
}    
 8005244:	0018      	movs	r0, r3
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	46c0      	nop			; (mov r8, r8)
 800524c:	40021000 	.word	0x40021000
 8005250:	080070e8 	.word	0x080070e8

08005254 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b086      	sub	sp, #24
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800525c:	2300      	movs	r3, #0
 800525e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8005260:	2300      	movs	r3, #0
 8005262:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	2380      	movs	r3, #128	; 0x80
 800526a:	025b      	lsls	r3, r3, #9
 800526c:	4013      	ands	r3, r2
 800526e:	d100      	bne.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8005270:	e08e      	b.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8005272:	2017      	movs	r0, #23
 8005274:	183b      	adds	r3, r7, r0
 8005276:	2200      	movs	r2, #0
 8005278:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800527a:	4b6e      	ldr	r3, [pc, #440]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800527c:	69da      	ldr	r2, [r3, #28]
 800527e:	2380      	movs	r3, #128	; 0x80
 8005280:	055b      	lsls	r3, r3, #21
 8005282:	4013      	ands	r3, r2
 8005284:	d110      	bne.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005286:	4b6b      	ldr	r3, [pc, #428]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005288:	69da      	ldr	r2, [r3, #28]
 800528a:	4b6a      	ldr	r3, [pc, #424]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800528c:	2180      	movs	r1, #128	; 0x80
 800528e:	0549      	lsls	r1, r1, #21
 8005290:	430a      	orrs	r2, r1
 8005292:	61da      	str	r2, [r3, #28]
 8005294:	4b67      	ldr	r3, [pc, #412]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005296:	69da      	ldr	r2, [r3, #28]
 8005298:	2380      	movs	r3, #128	; 0x80
 800529a:	055b      	lsls	r3, r3, #21
 800529c:	4013      	ands	r3, r2
 800529e:	60bb      	str	r3, [r7, #8]
 80052a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052a2:	183b      	adds	r3, r7, r0
 80052a4:	2201      	movs	r2, #1
 80052a6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052a8:	4b63      	ldr	r3, [pc, #396]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	2380      	movs	r3, #128	; 0x80
 80052ae:	005b      	lsls	r3, r3, #1
 80052b0:	4013      	ands	r3, r2
 80052b2:	d11a      	bne.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052b4:	4b60      	ldr	r3, [pc, #384]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	4b5f      	ldr	r3, [pc, #380]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80052ba:	2180      	movs	r1, #128	; 0x80
 80052bc:	0049      	lsls	r1, r1, #1
 80052be:	430a      	orrs	r2, r1
 80052c0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052c2:	f7fd fc31 	bl	8002b28 <HAL_GetTick>
 80052c6:	0003      	movs	r3, r0
 80052c8:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052ca:	e008      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052cc:	f7fd fc2c 	bl	8002b28 <HAL_GetTick>
 80052d0:	0002      	movs	r2, r0
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	2b64      	cmp	r3, #100	; 0x64
 80052d8:	d901      	bls.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e0a6      	b.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052de:	4b56      	ldr	r3, [pc, #344]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	2380      	movs	r3, #128	; 0x80
 80052e4:	005b      	lsls	r3, r3, #1
 80052e6:	4013      	ands	r3, r2
 80052e8:	d0f0      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80052ea:	4b52      	ldr	r3, [pc, #328]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80052ec:	6a1a      	ldr	r2, [r3, #32]
 80052ee:	23c0      	movs	r3, #192	; 0xc0
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	4013      	ands	r3, r2
 80052f4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d034      	beq.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	685a      	ldr	r2, [r3, #4]
 8005300:	23c0      	movs	r3, #192	; 0xc0
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	4013      	ands	r3, r2
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	429a      	cmp	r2, r3
 800530a:	d02c      	beq.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800530c:	4b49      	ldr	r3, [pc, #292]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800530e:	6a1b      	ldr	r3, [r3, #32]
 8005310:	4a4a      	ldr	r2, [pc, #296]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8005312:	4013      	ands	r3, r2
 8005314:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005316:	4b47      	ldr	r3, [pc, #284]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005318:	6a1a      	ldr	r2, [r3, #32]
 800531a:	4b46      	ldr	r3, [pc, #280]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800531c:	2180      	movs	r1, #128	; 0x80
 800531e:	0249      	lsls	r1, r1, #9
 8005320:	430a      	orrs	r2, r1
 8005322:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005324:	4b43      	ldr	r3, [pc, #268]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005326:	6a1a      	ldr	r2, [r3, #32]
 8005328:	4b42      	ldr	r3, [pc, #264]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800532a:	4945      	ldr	r1, [pc, #276]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 800532c:	400a      	ands	r2, r1
 800532e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005330:	4b40      	ldr	r3, [pc, #256]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2201      	movs	r2, #1
 800533a:	4013      	ands	r3, r2
 800533c:	d013      	beq.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800533e:	f7fd fbf3 	bl	8002b28 <HAL_GetTick>
 8005342:	0003      	movs	r3, r0
 8005344:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005346:	e009      	b.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005348:	f7fd fbee 	bl	8002b28 <HAL_GetTick>
 800534c:	0002      	movs	r2, r0
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	4a3c      	ldr	r2, [pc, #240]	; (8005444 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d901      	bls.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	e067      	b.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800535c:	4b35      	ldr	r3, [pc, #212]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800535e:	6a1b      	ldr	r3, [r3, #32]
 8005360:	2202      	movs	r2, #2
 8005362:	4013      	ands	r3, r2
 8005364:	d0f0      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005366:	4b33      	ldr	r3, [pc, #204]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005368:	6a1b      	ldr	r3, [r3, #32]
 800536a:	4a34      	ldr	r2, [pc, #208]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800536c:	4013      	ands	r3, r2
 800536e:	0019      	movs	r1, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685a      	ldr	r2, [r3, #4]
 8005374:	4b2f      	ldr	r3, [pc, #188]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005376:	430a      	orrs	r2, r1
 8005378:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800537a:	2317      	movs	r3, #23
 800537c:	18fb      	adds	r3, r7, r3
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	2b01      	cmp	r3, #1
 8005382:	d105      	bne.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005384:	4b2b      	ldr	r3, [pc, #172]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005386:	69da      	ldr	r2, [r3, #28]
 8005388:	4b2a      	ldr	r3, [pc, #168]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800538a:	492f      	ldr	r1, [pc, #188]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 800538c:	400a      	ands	r2, r1
 800538e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2201      	movs	r2, #1
 8005396:	4013      	ands	r3, r2
 8005398:	d009      	beq.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800539a:	4b26      	ldr	r3, [pc, #152]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800539c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800539e:	2203      	movs	r2, #3
 80053a0:	4393      	bics	r3, r2
 80053a2:	0019      	movs	r1, r3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	689a      	ldr	r2, [r3, #8]
 80053a8:	4b22      	ldr	r3, [pc, #136]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80053aa:	430a      	orrs	r2, r1
 80053ac:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2202      	movs	r2, #2
 80053b4:	4013      	ands	r3, r2
 80053b6:	d009      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80053b8:	4b1e      	ldr	r3, [pc, #120]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80053ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053bc:	4a23      	ldr	r2, [pc, #140]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80053be:	4013      	ands	r3, r2
 80053c0:	0019      	movs	r1, r3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	68da      	ldr	r2, [r3, #12]
 80053c6:	4b1b      	ldr	r3, [pc, #108]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80053c8:	430a      	orrs	r2, r1
 80053ca:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	2380      	movs	r3, #128	; 0x80
 80053d2:	02db      	lsls	r3, r3, #11
 80053d4:	4013      	ands	r3, r2
 80053d6:	d009      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80053d8:	4b16      	ldr	r3, [pc, #88]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80053da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053dc:	4a1c      	ldr	r2, [pc, #112]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80053de:	4013      	ands	r3, r2
 80053e0:	0019      	movs	r1, r3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	691a      	ldr	r2, [r3, #16]
 80053e6:	4b13      	ldr	r3, [pc, #76]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80053e8:	430a      	orrs	r2, r1
 80053ea:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2220      	movs	r2, #32
 80053f2:	4013      	ands	r3, r2
 80053f4:	d009      	beq.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80053f6:	4b0f      	ldr	r3, [pc, #60]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80053f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053fa:	2210      	movs	r2, #16
 80053fc:	4393      	bics	r3, r2
 80053fe:	0019      	movs	r1, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	695a      	ldr	r2, [r3, #20]
 8005404:	4b0b      	ldr	r3, [pc, #44]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005406:	430a      	orrs	r2, r1
 8005408:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	2380      	movs	r3, #128	; 0x80
 8005410:	00db      	lsls	r3, r3, #3
 8005412:	4013      	ands	r3, r2
 8005414:	d009      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005416:	4b07      	ldr	r3, [pc, #28]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800541a:	2240      	movs	r2, #64	; 0x40
 800541c:	4393      	bics	r3, r2
 800541e:	0019      	movs	r1, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	699a      	ldr	r2, [r3, #24]
 8005424:	4b03      	ldr	r3, [pc, #12]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005426:	430a      	orrs	r2, r1
 8005428:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800542a:	2300      	movs	r3, #0
}
 800542c:	0018      	movs	r0, r3
 800542e:	46bd      	mov	sp, r7
 8005430:	b006      	add	sp, #24
 8005432:	bd80      	pop	{r7, pc}
 8005434:	40021000 	.word	0x40021000
 8005438:	40007000 	.word	0x40007000
 800543c:	fffffcff 	.word	0xfffffcff
 8005440:	fffeffff 	.word	0xfffeffff
 8005444:	00001388 	.word	0x00001388
 8005448:	efffffff 	.word	0xefffffff
 800544c:	fffcffff 	.word	0xfffcffff
 8005450:	fff3ffff 	.word	0xfff3ffff

08005454 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b082      	sub	sp, #8
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d101      	bne.n	8005466 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e081      	b.n	800556a <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	7f5b      	ldrb	r3, [r3, #29]
 800546a:	b2db      	uxtb	r3, r3
 800546c:	2b00      	cmp	r3, #0
 800546e:	d106      	bne.n	800547e <HAL_RTC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	0018      	movs	r0, r3
 800547a:	f7fd fa1b 	bl	80028b4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2202      	movs	r2, #2
 8005482:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	22ca      	movs	r2, #202	; 0xca
 800548a:	625a      	str	r2, [r3, #36]	; 0x24
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2253      	movs	r2, #83	; 0x53
 8005492:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	0018      	movs	r0, r3
 8005498:	f000 f947 	bl	800572a <RTC_EnterInitMode>
 800549c:	1e03      	subs	r3, r0, #0
 800549e:	d008      	beq.n	80054b2 <HAL_RTC_Init+0x5e>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	22ff      	movs	r2, #255	; 0xff
 80054a6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2204      	movs	r2, #4
 80054ac:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e05b      	b.n	800556a <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	689a      	ldr	r2, [r3, #8]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	492d      	ldr	r1, [pc, #180]	; (8005574 <HAL_RTC_Init+0x120>)
 80054be:	400a      	ands	r2, r1
 80054c0:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	6899      	ldr	r1, [r3, #8]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	685a      	ldr	r2, [r3, #4]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	691b      	ldr	r3, [r3, #16]
 80054d0:	431a      	orrs	r2, r3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	695b      	ldr	r3, [r3, #20]
 80054d6:	431a      	orrs	r2, r3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	430a      	orrs	r2, r1
 80054de:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	68d2      	ldr	r2, [r2, #12]
 80054e8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	6919      	ldr	r1, [r3, #16]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	041a      	lsls	r2, r3, #16
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	430a      	orrs	r2, r1
 80054fc:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68da      	ldr	r2, [r3, #12]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	2180      	movs	r1, #128	; 0x80
 800550a:	438a      	bics	r2, r1
 800550c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	2220      	movs	r2, #32
 8005516:	4013      	ands	r3, r2
 8005518:	d10e      	bne.n	8005538 <HAL_RTC_Init+0xe4>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	0018      	movs	r0, r3
 800551e:	f000 f8db 	bl	80056d8 <HAL_RTC_WaitForSynchro>
 8005522:	1e03      	subs	r3, r0, #0
 8005524:	d008      	beq.n	8005538 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	22ff      	movs	r2, #255	; 0xff
 800552c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2204      	movs	r2, #4
 8005532:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	e018      	b.n	800556a <HAL_RTC_Init+0x116>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	490d      	ldr	r1, [pc, #52]	; (8005578 <HAL_RTC_Init+0x124>)
 8005544:	400a      	ands	r2, r1
 8005546:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	699a      	ldr	r2, [r3, #24]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	430a      	orrs	r2, r1
 8005558:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	22ff      	movs	r2, #255	; 0xff
 8005560:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2201      	movs	r2, #1
 8005566:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005568:	2300      	movs	r3, #0
  }
}
 800556a:	0018      	movs	r0, r3
 800556c:	46bd      	mov	sp, r7
 800556e:	b002      	add	sp, #8
 8005570:	bd80      	pop	{r7, pc}
 8005572:	46c0      	nop			; (mov r8, r8)
 8005574:	ff8fffbf 	.word	0xff8fffbf
 8005578:	fffbffff 	.word	0xfffbffff

0800557c <HAL_RTC_GetTime>:
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read
  * to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b086      	sub	sp, #24
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8005588:	2300      	movs	r3, #0
 800558a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	691b      	ldr	r3, [r3, #16]
 800559c:	045b      	lsls	r3, r3, #17
 800559e:	0c5a      	lsrs	r2, r3, #17
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a22      	ldr	r2, [pc, #136]	; (8005634 <HAL_RTC_GetTime+0xb8>)
 80055ac:	4013      	ands	r3, r2
 80055ae:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	0c1b      	lsrs	r3, r3, #16
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	223f      	movs	r2, #63	; 0x3f
 80055b8:	4013      	ands	r3, r2
 80055ba:	b2da      	uxtb	r2, r3
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	0a1b      	lsrs	r3, r3, #8
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	227f      	movs	r2, #127	; 0x7f
 80055c8:	4013      	ands	r3, r2
 80055ca:	b2da      	uxtb	r2, r3
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	227f      	movs	r2, #127	; 0x7f
 80055d6:	4013      	ands	r3, r2
 80055d8:	b2da      	uxtb	r2, r3
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	0c1b      	lsrs	r3, r3, #16
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	2240      	movs	r2, #64	; 0x40
 80055e6:	4013      	ands	r3, r2
 80055e8:	b2da      	uxtb	r2, r3
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d11a      	bne.n	800562a <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	0018      	movs	r0, r3
 80055fa:	f000 f8c2 	bl	8005782 <RTC_Bcd2ToByte>
 80055fe:	0003      	movs	r3, r0
 8005600:	001a      	movs	r2, r3
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	785b      	ldrb	r3, [r3, #1]
 800560a:	0018      	movs	r0, r3
 800560c:	f000 f8b9 	bl	8005782 <RTC_Bcd2ToByte>
 8005610:	0003      	movs	r3, r0
 8005612:	001a      	movs	r2, r3
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	789b      	ldrb	r3, [r3, #2]
 800561c:	0018      	movs	r0, r3
 800561e:	f000 f8b0 	bl	8005782 <RTC_Bcd2ToByte>
 8005622:	0003      	movs	r3, r0
 8005624:	001a      	movs	r2, r3
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800562a:	2300      	movs	r3, #0
}
 800562c:	0018      	movs	r0, r3
 800562e:	46bd      	mov	sp, r7
 8005630:	b006      	add	sp, #24
 8005632:	bd80      	pop	{r7, pc}
 8005634:	007f7f7f 	.word	0x007f7f7f

08005638 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b086      	sub	sp, #24
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005644:	2300      	movs	r3, #0
 8005646:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	4a21      	ldr	r2, [pc, #132]	; (80056d4 <HAL_RTC_GetDate+0x9c>)
 8005650:	4013      	ands	r3, r2
 8005652:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	0c1b      	lsrs	r3, r3, #16
 8005658:	b2da      	uxtb	r2, r3
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	0a1b      	lsrs	r3, r3, #8
 8005662:	b2db      	uxtb	r3, r3
 8005664:	221f      	movs	r2, #31
 8005666:	4013      	ands	r3, r2
 8005668:	b2da      	uxtb	r2, r3
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	b2db      	uxtb	r3, r3
 8005672:	223f      	movs	r2, #63	; 0x3f
 8005674:	4013      	ands	r3, r2
 8005676:	b2da      	uxtb	r2, r3
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	0b5b      	lsrs	r3, r3, #13
 8005680:	b2db      	uxtb	r3, r3
 8005682:	2207      	movs	r2, #7
 8005684:	4013      	ands	r3, r2
 8005686:	b2da      	uxtb	r2, r3
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d11a      	bne.n	80056c8 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	78db      	ldrb	r3, [r3, #3]
 8005696:	0018      	movs	r0, r3
 8005698:	f000 f873 	bl	8005782 <RTC_Bcd2ToByte>
 800569c:	0003      	movs	r3, r0
 800569e:	001a      	movs	r2, r3
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	785b      	ldrb	r3, [r3, #1]
 80056a8:	0018      	movs	r0, r3
 80056aa:	f000 f86a 	bl	8005782 <RTC_Bcd2ToByte>
 80056ae:	0003      	movs	r3, r0
 80056b0:	001a      	movs	r2, r3
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	789b      	ldrb	r3, [r3, #2]
 80056ba:	0018      	movs	r0, r3
 80056bc:	f000 f861 	bl	8005782 <RTC_Bcd2ToByte>
 80056c0:	0003      	movs	r3, r0
 80056c2:	001a      	movs	r2, r3
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	0018      	movs	r0, r3
 80056cc:	46bd      	mov	sp, r7
 80056ce:	b006      	add	sp, #24
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	46c0      	nop			; (mov r8, r8)
 80056d4:	00ffff3f 	.word	0x00ffff3f

080056d8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80056e0:	2300      	movs	r3, #0
 80056e2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68da      	ldr	r2, [r3, #12]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	21a0      	movs	r1, #160	; 0xa0
 80056f0:	438a      	bics	r2, r1
 80056f2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80056f4:	f7fd fa18 	bl	8002b28 <HAL_GetTick>
 80056f8:	0003      	movs	r3, r0
 80056fa:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80056fc:	e00a      	b.n	8005714 <HAL_RTC_WaitForSynchro+0x3c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80056fe:	f7fd fa13 	bl	8002b28 <HAL_GetTick>
 8005702:	0002      	movs	r2, r0
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	1ad2      	subs	r2, r2, r3
 8005708:	23fa      	movs	r3, #250	; 0xfa
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	429a      	cmp	r2, r3
 800570e:	d901      	bls.n	8005714 <HAL_RTC_WaitForSynchro+0x3c>
    {
      return HAL_TIMEOUT;
 8005710:	2303      	movs	r3, #3
 8005712:	e006      	b.n	8005722 <HAL_RTC_WaitForSynchro+0x4a>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	2220      	movs	r2, #32
 800571c:	4013      	ands	r3, r2
 800571e:	d0ee      	beq.n	80056fe <HAL_RTC_WaitForSynchro+0x26>
    }
  }

  return HAL_OK;
 8005720:	2300      	movs	r3, #0
}
 8005722:	0018      	movs	r0, r3
 8005724:	46bd      	mov	sp, r7
 8005726:	b004      	add	sp, #16
 8005728:	bd80      	pop	{r7, pc}

0800572a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800572a:	b580      	push	{r7, lr}
 800572c:	b084      	sub	sp, #16
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005732:	2300      	movs	r3, #0
 8005734:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	2240      	movs	r2, #64	; 0x40
 800573e:	4013      	ands	r3, r2
 8005740:	d11a      	bne.n	8005778 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2201      	movs	r2, #1
 8005748:	4252      	negs	r2, r2
 800574a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800574c:	f7fd f9ec 	bl	8002b28 <HAL_GetTick>
 8005750:	0003      	movs	r3, r0
 8005752:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005754:	e00a      	b.n	800576c <RTC_EnterInitMode+0x42>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005756:	f7fd f9e7 	bl	8002b28 <HAL_GetTick>
 800575a:	0002      	movs	r2, r0
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	1ad2      	subs	r2, r2, r3
 8005760:	23fa      	movs	r3, #250	; 0xfa
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	429a      	cmp	r2, r3
 8005766:	d901      	bls.n	800576c <RTC_EnterInitMode+0x42>
      {
        return HAL_TIMEOUT;
 8005768:	2303      	movs	r3, #3
 800576a:	e006      	b.n	800577a <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	2240      	movs	r2, #64	; 0x40
 8005774:	4013      	ands	r3, r2
 8005776:	d0ee      	beq.n	8005756 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8005778:	2300      	movs	r3, #0
}
 800577a:	0018      	movs	r0, r3
 800577c:	46bd      	mov	sp, r7
 800577e:	b004      	add	sp, #16
 8005780:	bd80      	pop	{r7, pc}

08005782 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005782:	b580      	push	{r7, lr}
 8005784:	b084      	sub	sp, #16
 8005786:	af00      	add	r7, sp, #0
 8005788:	0002      	movs	r2, r0
 800578a:	1dfb      	adds	r3, r7, #7
 800578c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp = 0U;
 800578e:	2300      	movs	r3, #0
 8005790:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 8005792:	1dfb      	adds	r3, r7, #7
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	091b      	lsrs	r3, r3, #4
 8005798:	b2db      	uxtb	r3, r3
 800579a:	001a      	movs	r2, r3
 800579c:	0013      	movs	r3, r2
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	189b      	adds	r3, r3, r2
 80057a2:	005b      	lsls	r3, r3, #1
 80057a4:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0FU));
 80057a6:	1dfb      	adds	r3, r7, #7
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	220f      	movs	r2, #15
 80057ac:	4013      	ands	r3, r2
 80057ae:	b2da      	uxtb	r2, r3
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	18d3      	adds	r3, r2, r3
 80057b6:	b2db      	uxtb	r3, r3
}
 80057b8:	0018      	movs	r0, r3
 80057ba:	46bd      	mov	sp, r7
 80057bc:	b004      	add	sp, #16
 80057be:	bd80      	pop	{r7, pc}

080057c0 <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef *hrtc, uint32_t CalibOutput)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	7f1b      	ldrb	r3, [r3, #28]
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d101      	bne.n	80057d6 <HAL_RTCEx_SetCalibrationOutPut+0x16>
 80057d2:	2302      	movs	r3, #2
 80057d4:	e031      	b.n	800583a <HAL_RTCEx_SetCalibrationOutPut+0x7a>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2201      	movs	r2, #1
 80057da:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2202      	movs	r2, #2
 80057e0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	22ca      	movs	r2, #202	; 0xca
 80057e8:	625a      	str	r2, [r3, #36]	; 0x24
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2253      	movs	r2, #83	; 0x53
 80057f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	689a      	ldr	r2, [r3, #8]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4911      	ldr	r1, [pc, #68]	; (8005844 <HAL_RTCEx_SetCalibrationOutPut+0x84>)
 80057fe:	400a      	ands	r2, r1
 8005800:	609a      	str	r2, [r3, #8]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	6899      	ldr	r1, [r3, #8]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	683a      	ldr	r2, [r7, #0]
 800580e:	430a      	orrs	r2, r1
 8005810:	609a      	str	r2, [r3, #8]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	689a      	ldr	r2, [r3, #8]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2180      	movs	r1, #128	; 0x80
 800581e:	0409      	lsls	r1, r1, #16
 8005820:	430a      	orrs	r2, r1
 8005822:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	22ff      	movs	r2, #255	; 0xff
 800582a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	0018      	movs	r0, r3
 800583c:	46bd      	mov	sp, r7
 800583e:	b002      	add	sp, #8
 8005840:	bd80      	pop	{r7, pc}
 8005842:	46c0      	nop			; (mov r8, r8)
 8005844:	fff7ffff 	.word	0xfff7ffff

08005848 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d101      	bne.n	800585a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e044      	b.n	80058e4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800585e:	2b00      	cmp	r3, #0
 8005860:	d107      	bne.n	8005872 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2274      	movs	r2, #116	; 0x74
 8005866:	2100      	movs	r1, #0
 8005868:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	0018      	movs	r0, r3
 800586e:	f7fd f857 	bl	8002920 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2224      	movs	r2, #36	; 0x24
 8005876:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	2101      	movs	r1, #1
 8005884:	438a      	bics	r2, r1
 8005886:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	0018      	movs	r0, r3
 800588c:	f000 fd20 	bl	80062d0 <UART_SetConfig>
 8005890:	0003      	movs	r3, r0
 8005892:	2b01      	cmp	r3, #1
 8005894:	d101      	bne.n	800589a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e024      	b.n	80058e4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d003      	beq.n	80058aa <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	0018      	movs	r0, r3
 80058a6:	f000 fefb 	bl	80066a0 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	685a      	ldr	r2, [r3, #4]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	490d      	ldr	r1, [pc, #52]	; (80058ec <HAL_UART_Init+0xa4>)
 80058b6:	400a      	ands	r2, r1
 80058b8:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	689a      	ldr	r2, [r3, #8]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	212a      	movs	r1, #42	; 0x2a
 80058c6:	438a      	bics	r2, r1
 80058c8:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2101      	movs	r1, #1
 80058d6:	430a      	orrs	r2, r1
 80058d8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	0018      	movs	r0, r3
 80058de:	f000 ff93 	bl	8006808 <UART_CheckIdleState>
 80058e2:	0003      	movs	r3, r0
}
 80058e4:	0018      	movs	r0, r3
 80058e6:	46bd      	mov	sp, r7
 80058e8:	b002      	add	sp, #8
 80058ea:	bd80      	pop	{r7, pc}
 80058ec:	ffffb7ff 	.word	0xffffb7ff

080058f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b08a      	sub	sp, #40	; 0x28
 80058f4:	af02      	add	r7, sp, #8
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	603b      	str	r3, [r7, #0]
 80058fc:	1dbb      	adds	r3, r7, #6
 80058fe:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005904:	2b20      	cmp	r3, #32
 8005906:	d000      	beq.n	800590a <HAL_UART_Transmit+0x1a>
 8005908:	e096      	b.n	8005a38 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d003      	beq.n	8005918 <HAL_UART_Transmit+0x28>
 8005910:	1dbb      	adds	r3, r7, #6
 8005912:	881b      	ldrh	r3, [r3, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d101      	bne.n	800591c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	e08e      	b.n	8005a3a <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	689a      	ldr	r2, [r3, #8]
 8005920:	2380      	movs	r3, #128	; 0x80
 8005922:	015b      	lsls	r3, r3, #5
 8005924:	429a      	cmp	r2, r3
 8005926:	d109      	bne.n	800593c <HAL_UART_Transmit+0x4c>
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	691b      	ldr	r3, [r3, #16]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d105      	bne.n	800593c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	2201      	movs	r2, #1
 8005934:	4013      	ands	r3, r2
 8005936:	d001      	beq.n	800593c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	e07e      	b.n	8005a3a <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2274      	movs	r2, #116	; 0x74
 8005940:	5c9b      	ldrb	r3, [r3, r2]
 8005942:	2b01      	cmp	r3, #1
 8005944:	d101      	bne.n	800594a <HAL_UART_Transmit+0x5a>
 8005946:	2302      	movs	r3, #2
 8005948:	e077      	b.n	8005a3a <HAL_UART_Transmit+0x14a>
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2274      	movs	r2, #116	; 0x74
 800594e:	2101      	movs	r1, #1
 8005950:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2280      	movs	r2, #128	; 0x80
 8005956:	2100      	movs	r1, #0
 8005958:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2221      	movs	r2, #33	; 0x21
 800595e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005960:	f7fd f8e2 	bl	8002b28 <HAL_GetTick>
 8005964:	0003      	movs	r3, r0
 8005966:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	1dba      	adds	r2, r7, #6
 800596c:	2150      	movs	r1, #80	; 0x50
 800596e:	8812      	ldrh	r2, [r2, #0]
 8005970:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	1dba      	adds	r2, r7, #6
 8005976:	2152      	movs	r1, #82	; 0x52
 8005978:	8812      	ldrh	r2, [r2, #0]
 800597a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	689a      	ldr	r2, [r3, #8]
 8005980:	2380      	movs	r3, #128	; 0x80
 8005982:	015b      	lsls	r3, r3, #5
 8005984:	429a      	cmp	r2, r3
 8005986:	d108      	bne.n	800599a <HAL_UART_Transmit+0xaa>
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	691b      	ldr	r3, [r3, #16]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d104      	bne.n	800599a <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8005990:	2300      	movs	r3, #0
 8005992:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	61bb      	str	r3, [r7, #24]
 8005998:	e003      	b.n	80059a2 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800599e:	2300      	movs	r3, #0
 80059a0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2274      	movs	r2, #116	; 0x74
 80059a6:	2100      	movs	r1, #0
 80059a8:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80059aa:	e02d      	b.n	8005a08 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80059ac:	697a      	ldr	r2, [r7, #20]
 80059ae:	68f8      	ldr	r0, [r7, #12]
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	9300      	str	r3, [sp, #0]
 80059b4:	0013      	movs	r3, r2
 80059b6:	2200      	movs	r2, #0
 80059b8:	2180      	movs	r1, #128	; 0x80
 80059ba:	f000 ff6d 	bl	8006898 <UART_WaitOnFlagUntilTimeout>
 80059be:	1e03      	subs	r3, r0, #0
 80059c0:	d001      	beq.n	80059c6 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e039      	b.n	8005a3a <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d10b      	bne.n	80059e4 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	881a      	ldrh	r2, [r3, #0]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	05d2      	lsls	r2, r2, #23
 80059d6:	0dd2      	lsrs	r2, r2, #23
 80059d8:	b292      	uxth	r2, r2
 80059da:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	3302      	adds	r3, #2
 80059e0:	61bb      	str	r3, [r7, #24]
 80059e2:	e008      	b.n	80059f6 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80059e4:	69fb      	ldr	r3, [r7, #28]
 80059e6:	781a      	ldrb	r2, [r3, #0]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	b292      	uxth	r2, r2
 80059ee:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	3301      	adds	r3, #1
 80059f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2252      	movs	r2, #82	; 0x52
 80059fa:	5a9b      	ldrh	r3, [r3, r2]
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	3b01      	subs	r3, #1
 8005a00:	b299      	uxth	r1, r3
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2252      	movs	r2, #82	; 0x52
 8005a06:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2252      	movs	r2, #82	; 0x52
 8005a0c:	5a9b      	ldrh	r3, [r3, r2]
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d1cb      	bne.n	80059ac <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a14:	697a      	ldr	r2, [r7, #20]
 8005a16:	68f8      	ldr	r0, [r7, #12]
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	9300      	str	r3, [sp, #0]
 8005a1c:	0013      	movs	r3, r2
 8005a1e:	2200      	movs	r2, #0
 8005a20:	2140      	movs	r1, #64	; 0x40
 8005a22:	f000 ff39 	bl	8006898 <UART_WaitOnFlagUntilTimeout>
 8005a26:	1e03      	subs	r3, r0, #0
 8005a28:	d001      	beq.n	8005a2e <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	e005      	b.n	8005a3a <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2220      	movs	r2, #32
 8005a32:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005a34:	2300      	movs	r3, #0
 8005a36:	e000      	b.n	8005a3a <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005a38:	2302      	movs	r3, #2
  }
}
 8005a3a:	0018      	movs	r0, r3
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	b008      	add	sp, #32
 8005a40:	bd80      	pop	{r7, pc}
	...

08005a44 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b08a      	sub	sp, #40	; 0x28
 8005a48:	af02      	add	r7, sp, #8
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	60b9      	str	r1, [r7, #8]
 8005a4e:	603b      	str	r3, [r7, #0]
 8005a50:	1dbb      	adds	r3, r7, #6
 8005a52:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a58:	2b20      	cmp	r3, #32
 8005a5a:	d000      	beq.n	8005a5e <HAL_UART_Receive+0x1a>
 8005a5c:	e0da      	b.n	8005c14 <HAL_UART_Receive+0x1d0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d003      	beq.n	8005a6c <HAL_UART_Receive+0x28>
 8005a64:	1dbb      	adds	r3, r7, #6
 8005a66:	881b      	ldrh	r3, [r3, #0]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d101      	bne.n	8005a70 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e0d2      	b.n	8005c16 <HAL_UART_Receive+0x1d2>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	689a      	ldr	r2, [r3, #8]
 8005a74:	2380      	movs	r3, #128	; 0x80
 8005a76:	015b      	lsls	r3, r3, #5
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d109      	bne.n	8005a90 <HAL_UART_Receive+0x4c>
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	691b      	ldr	r3, [r3, #16]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d105      	bne.n	8005a90 <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	2201      	movs	r2, #1
 8005a88:	4013      	ands	r3, r2
 8005a8a:	d001      	beq.n	8005a90 <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e0c2      	b.n	8005c16 <HAL_UART_Receive+0x1d2>
      }
    }

    __HAL_LOCK(huart);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2274      	movs	r2, #116	; 0x74
 8005a94:	5c9b      	ldrb	r3, [r3, r2]
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d101      	bne.n	8005a9e <HAL_UART_Receive+0x5a>
 8005a9a:	2302      	movs	r3, #2
 8005a9c:	e0bb      	b.n	8005c16 <HAL_UART_Receive+0x1d2>
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2274      	movs	r2, #116	; 0x74
 8005aa2:	2101      	movs	r1, #1
 8005aa4:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2280      	movs	r2, #128	; 0x80
 8005aaa:	2100      	movs	r1, #0
 8005aac:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2222      	movs	r2, #34	; 0x22
 8005ab2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005aba:	f7fd f835 	bl	8002b28 <HAL_GetTick>
 8005abe:	0003      	movs	r3, r0
 8005ac0:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	1dba      	adds	r2, r7, #6
 8005ac6:	2158      	movs	r1, #88	; 0x58
 8005ac8:	8812      	ldrh	r2, [r2, #0]
 8005aca:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	1dba      	adds	r2, r7, #6
 8005ad0:	215a      	movs	r1, #90	; 0x5a
 8005ad2:	8812      	ldrh	r2, [r2, #0]
 8005ad4:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	689a      	ldr	r2, [r3, #8]
 8005ada:	2380      	movs	r3, #128	; 0x80
 8005adc:	015b      	lsls	r3, r3, #5
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d10d      	bne.n	8005afe <HAL_UART_Receive+0xba>
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	691b      	ldr	r3, [r3, #16]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d104      	bne.n	8005af4 <HAL_UART_Receive+0xb0>
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	225c      	movs	r2, #92	; 0x5c
 8005aee:	494c      	ldr	r1, [pc, #304]	; (8005c20 <HAL_UART_Receive+0x1dc>)
 8005af0:	5299      	strh	r1, [r3, r2]
 8005af2:	e02e      	b.n	8005b52 <HAL_UART_Receive+0x10e>
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	225c      	movs	r2, #92	; 0x5c
 8005af8:	21ff      	movs	r1, #255	; 0xff
 8005afa:	5299      	strh	r1, [r3, r2]
 8005afc:	e029      	b.n	8005b52 <HAL_UART_Receive+0x10e>
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d10d      	bne.n	8005b22 <HAL_UART_Receive+0xde>
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d104      	bne.n	8005b18 <HAL_UART_Receive+0xd4>
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	225c      	movs	r2, #92	; 0x5c
 8005b12:	21ff      	movs	r1, #255	; 0xff
 8005b14:	5299      	strh	r1, [r3, r2]
 8005b16:	e01c      	b.n	8005b52 <HAL_UART_Receive+0x10e>
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	225c      	movs	r2, #92	; 0x5c
 8005b1c:	217f      	movs	r1, #127	; 0x7f
 8005b1e:	5299      	strh	r1, [r3, r2]
 8005b20:	e017      	b.n	8005b52 <HAL_UART_Receive+0x10e>
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	689a      	ldr	r2, [r3, #8]
 8005b26:	2380      	movs	r3, #128	; 0x80
 8005b28:	055b      	lsls	r3, r3, #21
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d10d      	bne.n	8005b4a <HAL_UART_Receive+0x106>
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d104      	bne.n	8005b40 <HAL_UART_Receive+0xfc>
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	225c      	movs	r2, #92	; 0x5c
 8005b3a:	217f      	movs	r1, #127	; 0x7f
 8005b3c:	5299      	strh	r1, [r3, r2]
 8005b3e:	e008      	b.n	8005b52 <HAL_UART_Receive+0x10e>
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	225c      	movs	r2, #92	; 0x5c
 8005b44:	213f      	movs	r1, #63	; 0x3f
 8005b46:	5299      	strh	r1, [r3, r2]
 8005b48:	e003      	b.n	8005b52 <HAL_UART_Receive+0x10e>
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	225c      	movs	r2, #92	; 0x5c
 8005b4e:	2100      	movs	r1, #0
 8005b50:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8005b52:	2312      	movs	r3, #18
 8005b54:	18fb      	adds	r3, r7, r3
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	215c      	movs	r1, #92	; 0x5c
 8005b5a:	5a52      	ldrh	r2, [r2, r1]
 8005b5c:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	689a      	ldr	r2, [r3, #8]
 8005b62:	2380      	movs	r3, #128	; 0x80
 8005b64:	015b      	lsls	r3, r3, #5
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d108      	bne.n	8005b7c <HAL_UART_Receive+0x138>
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d104      	bne.n	8005b7c <HAL_UART_Receive+0x138>
    {
      pdata8bits  = NULL;
 8005b72:	2300      	movs	r3, #0
 8005b74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	61bb      	str	r3, [r7, #24]
 8005b7a:	e003      	b.n	8005b84 <HAL_UART_Receive+0x140>
    }
    else
    {
      pdata8bits  = pData;
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b80:	2300      	movs	r3, #0
 8005b82:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2274      	movs	r2, #116	; 0x74
 8005b88:	2100      	movs	r1, #0
 8005b8a:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005b8c:	e037      	b.n	8005bfe <HAL_UART_Receive+0x1ba>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005b8e:	697a      	ldr	r2, [r7, #20]
 8005b90:	68f8      	ldr	r0, [r7, #12]
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	9300      	str	r3, [sp, #0]
 8005b96:	0013      	movs	r3, r2
 8005b98:	2200      	movs	r2, #0
 8005b9a:	2120      	movs	r1, #32
 8005b9c:	f000 fe7c 	bl	8006898 <UART_WaitOnFlagUntilTimeout>
 8005ba0:	1e03      	subs	r3, r0, #0
 8005ba2:	d001      	beq.n	8005ba8 <HAL_UART_Receive+0x164>
      {
        return HAL_TIMEOUT;
 8005ba4:	2303      	movs	r3, #3
 8005ba6:	e036      	b.n	8005c16 <HAL_UART_Receive+0x1d2>
      }
      if (pdata8bits == NULL)
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d10e      	bne.n	8005bcc <HAL_UART_Receive+0x188>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	2212      	movs	r2, #18
 8005bb8:	18ba      	adds	r2, r7, r2
 8005bba:	8812      	ldrh	r2, [r2, #0]
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	b29a      	uxth	r2, r3
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	3302      	adds	r3, #2
 8005bc8:	61bb      	str	r3, [r7, #24]
 8005bca:	e00f      	b.n	8005bec <HAL_UART_Receive+0x1a8>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	2212      	movs	r2, #18
 8005bd8:	18ba      	adds	r2, r7, r2
 8005bda:	8812      	ldrh	r2, [r2, #0]
 8005bdc:	b2d2      	uxtb	r2, r2
 8005bde:	4013      	ands	r3, r2
 8005be0:	b2da      	uxtb	r2, r3
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	3301      	adds	r3, #1
 8005bea:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	225a      	movs	r2, #90	; 0x5a
 8005bf0:	5a9b      	ldrh	r3, [r3, r2]
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	3b01      	subs	r3, #1
 8005bf6:	b299      	uxth	r1, r3
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	225a      	movs	r2, #90	; 0x5a
 8005bfc:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	225a      	movs	r2, #90	; 0x5a
 8005c02:	5a9b      	ldrh	r3, [r3, r2]
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d1c1      	bne.n	8005b8e <HAL_UART_Receive+0x14a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2220      	movs	r2, #32
 8005c0e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005c10:	2300      	movs	r3, #0
 8005c12:	e000      	b.n	8005c16 <HAL_UART_Receive+0x1d2>
  }
  else
  {
    return HAL_BUSY;
 8005c14:	2302      	movs	r3, #2
  }
}
 8005c16:	0018      	movs	r0, r3
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	b008      	add	sp, #32
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	46c0      	nop			; (mov r8, r8)
 8005c20:	000001ff 	.word	0x000001ff

08005c24 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b088      	sub	sp, #32
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	1dbb      	adds	r3, r7, #6
 8005c30:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c36:	2b20      	cmp	r3, #32
 8005c38:	d150      	bne.n	8005cdc <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d003      	beq.n	8005c48 <HAL_UART_Receive_IT+0x24>
 8005c40:	1dbb      	adds	r3, r7, #6
 8005c42:	881b      	ldrh	r3, [r3, #0]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d101      	bne.n	8005c4c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e048      	b.n	8005cde <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	689a      	ldr	r2, [r3, #8]
 8005c50:	2380      	movs	r3, #128	; 0x80
 8005c52:	015b      	lsls	r3, r3, #5
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d109      	bne.n	8005c6c <HAL_UART_Receive_IT+0x48>
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d105      	bne.n	8005c6c <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	2201      	movs	r2, #1
 8005c64:	4013      	ands	r3, r2
 8005c66:	d001      	beq.n	8005c6c <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e038      	b.n	8005cde <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2274      	movs	r2, #116	; 0x74
 8005c70:	5c9b      	ldrb	r3, [r3, r2]
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d101      	bne.n	8005c7a <HAL_UART_Receive_IT+0x56>
 8005c76:	2302      	movs	r3, #2
 8005c78:	e031      	b.n	8005cde <HAL_UART_Receive_IT+0xba>
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2274      	movs	r2, #116	; 0x74
 8005c7e:	2101      	movs	r1, #1
 8005c80:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2200      	movs	r2, #0
 8005c86:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	685a      	ldr	r2, [r3, #4]
 8005c8e:	2380      	movs	r3, #128	; 0x80
 8005c90:	041b      	lsls	r3, r3, #16
 8005c92:	4013      	ands	r3, r2
 8005c94:	d019      	beq.n	8005cca <HAL_UART_Receive_IT+0xa6>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c96:	f3ef 8310 	mrs	r3, PRIMASK
 8005c9a:	613b      	str	r3, [r7, #16]
  return(result);
 8005c9c:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005c9e:	61fb      	str	r3, [r7, #28]
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	f383 8810 	msr	PRIMASK, r3
}
 8005caa:	46c0      	nop			; (mov r8, r8)
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	2180      	movs	r1, #128	; 0x80
 8005cb8:	04c9      	lsls	r1, r1, #19
 8005cba:	430a      	orrs	r2, r1
 8005cbc:	601a      	str	r2, [r3, #0]
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	f383 8810 	msr	PRIMASK, r3
}
 8005cc8:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005cca:	1dbb      	adds	r3, r7, #6
 8005ccc:	881a      	ldrh	r2, [r3, #0]
 8005cce:	68b9      	ldr	r1, [r7, #8]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	0018      	movs	r0, r3
 8005cd4:	f000 fea4 	bl	8006a20 <UART_Start_Receive_IT>
 8005cd8:	0003      	movs	r3, r0
 8005cda:	e000      	b.n	8005cde <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 8005cdc:	2302      	movs	r3, #2
  }
}
 8005cde:	0018      	movs	r0, r3
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	b008      	add	sp, #32
 8005ce4:	bd80      	pop	{r7, pc}
	...

08005ce8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ce8:	b590      	push	{r4, r7, lr}
 8005cea:	b0ab      	sub	sp, #172	; 0xac
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	69db      	ldr	r3, [r3, #28]
 8005cf6:	22a4      	movs	r2, #164	; 0xa4
 8005cf8:	18b9      	adds	r1, r7, r2
 8005cfa:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	20a0      	movs	r0, #160	; 0xa0
 8005d04:	1839      	adds	r1, r7, r0
 8005d06:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	219c      	movs	r1, #156	; 0x9c
 8005d10:	1879      	adds	r1, r7, r1
 8005d12:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005d14:	0011      	movs	r1, r2
 8005d16:	18bb      	adds	r3, r7, r2
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a99      	ldr	r2, [pc, #612]	; (8005f80 <HAL_UART_IRQHandler+0x298>)
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	2298      	movs	r2, #152	; 0x98
 8005d20:	18bc      	adds	r4, r7, r2
 8005d22:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8005d24:	18bb      	adds	r3, r7, r2
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d114      	bne.n	8005d56 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005d2c:	187b      	adds	r3, r7, r1
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2220      	movs	r2, #32
 8005d32:	4013      	ands	r3, r2
 8005d34:	d00f      	beq.n	8005d56 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005d36:	183b      	adds	r3, r7, r0
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2220      	movs	r2, #32
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	d00a      	beq.n	8005d56 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d100      	bne.n	8005d4a <HAL_UART_IRQHandler+0x62>
 8005d48:	e296      	b.n	8006278 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	0010      	movs	r0, r2
 8005d52:	4798      	blx	r3
      }
      return;
 8005d54:	e290      	b.n	8006278 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005d56:	2398      	movs	r3, #152	; 0x98
 8005d58:	18fb      	adds	r3, r7, r3
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d100      	bne.n	8005d62 <HAL_UART_IRQHandler+0x7a>
 8005d60:	e114      	b.n	8005f8c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005d62:	239c      	movs	r3, #156	; 0x9c
 8005d64:	18fb      	adds	r3, r7, r3
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	4013      	ands	r3, r2
 8005d6c:	d106      	bne.n	8005d7c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005d6e:	23a0      	movs	r3, #160	; 0xa0
 8005d70:	18fb      	adds	r3, r7, r3
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a83      	ldr	r2, [pc, #524]	; (8005f84 <HAL_UART_IRQHandler+0x29c>)
 8005d76:	4013      	ands	r3, r2
 8005d78:	d100      	bne.n	8005d7c <HAL_UART_IRQHandler+0x94>
 8005d7a:	e107      	b.n	8005f8c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005d7c:	23a4      	movs	r3, #164	; 0xa4
 8005d7e:	18fb      	adds	r3, r7, r3
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	2201      	movs	r2, #1
 8005d84:	4013      	ands	r3, r2
 8005d86:	d012      	beq.n	8005dae <HAL_UART_IRQHandler+0xc6>
 8005d88:	23a0      	movs	r3, #160	; 0xa0
 8005d8a:	18fb      	adds	r3, r7, r3
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	2380      	movs	r3, #128	; 0x80
 8005d90:	005b      	lsls	r3, r3, #1
 8005d92:	4013      	ands	r3, r2
 8005d94:	d00b      	beq.n	8005dae <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2280      	movs	r2, #128	; 0x80
 8005da2:	589b      	ldr	r3, [r3, r2]
 8005da4:	2201      	movs	r2, #1
 8005da6:	431a      	orrs	r2, r3
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2180      	movs	r1, #128	; 0x80
 8005dac:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005dae:	23a4      	movs	r3, #164	; 0xa4
 8005db0:	18fb      	adds	r3, r7, r3
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2202      	movs	r2, #2
 8005db6:	4013      	ands	r3, r2
 8005db8:	d011      	beq.n	8005dde <HAL_UART_IRQHandler+0xf6>
 8005dba:	239c      	movs	r3, #156	; 0x9c
 8005dbc:	18fb      	adds	r3, r7, r3
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	4013      	ands	r3, r2
 8005dc4:	d00b      	beq.n	8005dde <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	2202      	movs	r2, #2
 8005dcc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2280      	movs	r2, #128	; 0x80
 8005dd2:	589b      	ldr	r3, [r3, r2]
 8005dd4:	2204      	movs	r2, #4
 8005dd6:	431a      	orrs	r2, r3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2180      	movs	r1, #128	; 0x80
 8005ddc:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005dde:	23a4      	movs	r3, #164	; 0xa4
 8005de0:	18fb      	adds	r3, r7, r3
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	2204      	movs	r2, #4
 8005de6:	4013      	ands	r3, r2
 8005de8:	d011      	beq.n	8005e0e <HAL_UART_IRQHandler+0x126>
 8005dea:	239c      	movs	r3, #156	; 0x9c
 8005dec:	18fb      	adds	r3, r7, r3
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	2201      	movs	r2, #1
 8005df2:	4013      	ands	r3, r2
 8005df4:	d00b      	beq.n	8005e0e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	2204      	movs	r2, #4
 8005dfc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2280      	movs	r2, #128	; 0x80
 8005e02:	589b      	ldr	r3, [r3, r2]
 8005e04:	2202      	movs	r2, #2
 8005e06:	431a      	orrs	r2, r3
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2180      	movs	r1, #128	; 0x80
 8005e0c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005e0e:	23a4      	movs	r3, #164	; 0xa4
 8005e10:	18fb      	adds	r3, r7, r3
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2208      	movs	r2, #8
 8005e16:	4013      	ands	r3, r2
 8005e18:	d017      	beq.n	8005e4a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005e1a:	23a0      	movs	r3, #160	; 0xa0
 8005e1c:	18fb      	adds	r3, r7, r3
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	2220      	movs	r2, #32
 8005e22:	4013      	ands	r3, r2
 8005e24:	d105      	bne.n	8005e32 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005e26:	239c      	movs	r3, #156	; 0x9c
 8005e28:	18fb      	adds	r3, r7, r3
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005e30:	d00b      	beq.n	8005e4a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	2208      	movs	r2, #8
 8005e38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2280      	movs	r2, #128	; 0x80
 8005e3e:	589b      	ldr	r3, [r3, r2]
 8005e40:	2208      	movs	r2, #8
 8005e42:	431a      	orrs	r2, r3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2180      	movs	r1, #128	; 0x80
 8005e48:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005e4a:	23a4      	movs	r3, #164	; 0xa4
 8005e4c:	18fb      	adds	r3, r7, r3
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	2380      	movs	r3, #128	; 0x80
 8005e52:	011b      	lsls	r3, r3, #4
 8005e54:	4013      	ands	r3, r2
 8005e56:	d013      	beq.n	8005e80 <HAL_UART_IRQHandler+0x198>
 8005e58:	23a0      	movs	r3, #160	; 0xa0
 8005e5a:	18fb      	adds	r3, r7, r3
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	2380      	movs	r3, #128	; 0x80
 8005e60:	04db      	lsls	r3, r3, #19
 8005e62:	4013      	ands	r3, r2
 8005e64:	d00c      	beq.n	8005e80 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2280      	movs	r2, #128	; 0x80
 8005e6c:	0112      	lsls	r2, r2, #4
 8005e6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2280      	movs	r2, #128	; 0x80
 8005e74:	589b      	ldr	r3, [r3, r2]
 8005e76:	2220      	movs	r2, #32
 8005e78:	431a      	orrs	r2, r3
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2180      	movs	r1, #128	; 0x80
 8005e7e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2280      	movs	r2, #128	; 0x80
 8005e84:	589b      	ldr	r3, [r3, r2]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d100      	bne.n	8005e8c <HAL_UART_IRQHandler+0x1a4>
 8005e8a:	e1f7      	b.n	800627c <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005e8c:	23a4      	movs	r3, #164	; 0xa4
 8005e8e:	18fb      	adds	r3, r7, r3
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	2220      	movs	r2, #32
 8005e94:	4013      	ands	r3, r2
 8005e96:	d00e      	beq.n	8005eb6 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005e98:	23a0      	movs	r3, #160	; 0xa0
 8005e9a:	18fb      	adds	r3, r7, r3
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2220      	movs	r2, #32
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	d008      	beq.n	8005eb6 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d004      	beq.n	8005eb6 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	0010      	movs	r0, r2
 8005eb4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2280      	movs	r2, #128	; 0x80
 8005eba:	589b      	ldr	r3, [r3, r2]
 8005ebc:	2194      	movs	r1, #148	; 0x94
 8005ebe:	187a      	adds	r2, r7, r1
 8005ec0:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	2240      	movs	r2, #64	; 0x40
 8005eca:	4013      	ands	r3, r2
 8005ecc:	2b40      	cmp	r3, #64	; 0x40
 8005ece:	d004      	beq.n	8005eda <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005ed0:	187b      	adds	r3, r7, r1
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	2228      	movs	r2, #40	; 0x28
 8005ed6:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ed8:	d047      	beq.n	8005f6a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	0018      	movs	r0, r3
 8005ede:	f000 fe4f 	bl	8006b80 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	2240      	movs	r2, #64	; 0x40
 8005eea:	4013      	ands	r3, r2
 8005eec:	2b40      	cmp	r3, #64	; 0x40
 8005eee:	d137      	bne.n	8005f60 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ef0:	f3ef 8310 	mrs	r3, PRIMASK
 8005ef4:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8005ef6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ef8:	2090      	movs	r0, #144	; 0x90
 8005efa:	183a      	adds	r2, r7, r0
 8005efc:	6013      	str	r3, [r2, #0]
 8005efe:	2301      	movs	r3, #1
 8005f00:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f04:	f383 8810 	msr	PRIMASK, r3
}
 8005f08:	46c0      	nop			; (mov r8, r8)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	689a      	ldr	r2, [r3, #8]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2140      	movs	r1, #64	; 0x40
 8005f16:	438a      	bics	r2, r1
 8005f18:	609a      	str	r2, [r3, #8]
 8005f1a:	183b      	adds	r3, r7, r0
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f22:	f383 8810 	msr	PRIMASK, r3
}
 8005f26:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d012      	beq.n	8005f56 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f34:	4a14      	ldr	r2, [pc, #80]	; (8005f88 <HAL_UART_IRQHandler+0x2a0>)
 8005f36:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f3c:	0018      	movs	r0, r3
 8005f3e:	f7fd fba9 	bl	8003694 <HAL_DMA_Abort_IT>
 8005f42:	1e03      	subs	r3, r0, #0
 8005f44:	d01a      	beq.n	8005f7c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f50:	0018      	movs	r0, r3
 8005f52:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f54:	e012      	b.n	8005f7c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	0018      	movs	r0, r3
 8005f5a:	f000 f9a5 	bl	80062a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f5e:	e00d      	b.n	8005f7c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	0018      	movs	r0, r3
 8005f64:	f000 f9a0 	bl	80062a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f68:	e008      	b.n	8005f7c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	0018      	movs	r0, r3
 8005f6e:	f000 f99b 	bl	80062a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2280      	movs	r2, #128	; 0x80
 8005f76:	2100      	movs	r1, #0
 8005f78:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8005f7a:	e17f      	b.n	800627c <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f7c:	46c0      	nop			; (mov r8, r8)
    return;
 8005f7e:	e17d      	b.n	800627c <HAL_UART_IRQHandler+0x594>
 8005f80:	0000080f 	.word	0x0000080f
 8005f84:	04000120 	.word	0x04000120
 8005f88:	08006c45 	.word	0x08006c45

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d000      	beq.n	8005f96 <HAL_UART_IRQHandler+0x2ae>
 8005f94:	e131      	b.n	80061fa <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005f96:	23a4      	movs	r3, #164	; 0xa4
 8005f98:	18fb      	adds	r3, r7, r3
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	2210      	movs	r2, #16
 8005f9e:	4013      	ands	r3, r2
 8005fa0:	d100      	bne.n	8005fa4 <HAL_UART_IRQHandler+0x2bc>
 8005fa2:	e12a      	b.n	80061fa <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005fa4:	23a0      	movs	r3, #160	; 0xa0
 8005fa6:	18fb      	adds	r3, r7, r3
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	2210      	movs	r2, #16
 8005fac:	4013      	ands	r3, r2
 8005fae:	d100      	bne.n	8005fb2 <HAL_UART_IRQHandler+0x2ca>
 8005fb0:	e123      	b.n	80061fa <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	2210      	movs	r2, #16
 8005fb8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	2240      	movs	r2, #64	; 0x40
 8005fc2:	4013      	ands	r3, r2
 8005fc4:	2b40      	cmp	r3, #64	; 0x40
 8005fc6:	d000      	beq.n	8005fca <HAL_UART_IRQHandler+0x2e2>
 8005fc8:	e09b      	b.n	8006102 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	685a      	ldr	r2, [r3, #4]
 8005fd2:	217e      	movs	r1, #126	; 0x7e
 8005fd4:	187b      	adds	r3, r7, r1
 8005fd6:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8005fd8:	187b      	adds	r3, r7, r1
 8005fda:	881b      	ldrh	r3, [r3, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d100      	bne.n	8005fe2 <HAL_UART_IRQHandler+0x2fa>
 8005fe0:	e14e      	b.n	8006280 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2258      	movs	r2, #88	; 0x58
 8005fe6:	5a9b      	ldrh	r3, [r3, r2]
 8005fe8:	187a      	adds	r2, r7, r1
 8005fea:	8812      	ldrh	r2, [r2, #0]
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d300      	bcc.n	8005ff2 <HAL_UART_IRQHandler+0x30a>
 8005ff0:	e146      	b.n	8006280 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	187a      	adds	r2, r7, r1
 8005ff6:	215a      	movs	r1, #90	; 0x5a
 8005ff8:	8812      	ldrh	r2, [r2, #0]
 8005ffa:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006000:	699b      	ldr	r3, [r3, #24]
 8006002:	2b20      	cmp	r3, #32
 8006004:	d06e      	beq.n	80060e4 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006006:	f3ef 8310 	mrs	r3, PRIMASK
 800600a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800600c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800600e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006010:	2301      	movs	r3, #1
 8006012:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006016:	f383 8810 	msr	PRIMASK, r3
}
 800601a:	46c0      	nop			; (mov r8, r8)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	499a      	ldr	r1, [pc, #616]	; (8006290 <HAL_UART_IRQHandler+0x5a8>)
 8006028:	400a      	ands	r2, r1
 800602a:	601a      	str	r2, [r3, #0]
 800602c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800602e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006032:	f383 8810 	msr	PRIMASK, r3
}
 8006036:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006038:	f3ef 8310 	mrs	r3, PRIMASK
 800603c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800603e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006040:	677b      	str	r3, [r7, #116]	; 0x74
 8006042:	2301      	movs	r3, #1
 8006044:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006046:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006048:	f383 8810 	msr	PRIMASK, r3
}
 800604c:	46c0      	nop			; (mov r8, r8)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	689a      	ldr	r2, [r3, #8]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2101      	movs	r1, #1
 800605a:	438a      	bics	r2, r1
 800605c:	609a      	str	r2, [r3, #8]
 800605e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006060:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006062:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006064:	f383 8810 	msr	PRIMASK, r3
}
 8006068:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800606a:	f3ef 8310 	mrs	r3, PRIMASK
 800606e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8006070:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006072:	673b      	str	r3, [r7, #112]	; 0x70
 8006074:	2301      	movs	r3, #1
 8006076:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006078:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800607a:	f383 8810 	msr	PRIMASK, r3
}
 800607e:	46c0      	nop			; (mov r8, r8)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	689a      	ldr	r2, [r3, #8]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	2140      	movs	r1, #64	; 0x40
 800608c:	438a      	bics	r2, r1
 800608e:	609a      	str	r2, [r3, #8]
 8006090:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006092:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006094:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006096:	f383 8810 	msr	PRIMASK, r3
}
 800609a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2220      	movs	r2, #32
 80060a0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060a8:	f3ef 8310 	mrs	r3, PRIMASK
 80060ac:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80060ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80060b2:	2301      	movs	r3, #1
 80060b4:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060b8:	f383 8810 	msr	PRIMASK, r3
}
 80060bc:	46c0      	nop			; (mov r8, r8)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	2110      	movs	r1, #16
 80060ca:	438a      	bics	r2, r1
 80060cc:	601a      	str	r2, [r3, #0]
 80060ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060d0:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060d4:	f383 8810 	msr	PRIMASK, r3
}
 80060d8:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060de:	0018      	movs	r0, r3
 80060e0:	f7fd faa0 	bl	8003624 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2258      	movs	r2, #88	; 0x58
 80060e8:	5a9a      	ldrh	r2, [r3, r2]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	215a      	movs	r1, #90	; 0x5a
 80060ee:	5a5b      	ldrh	r3, [r3, r1]
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	1ad3      	subs	r3, r2, r3
 80060f4:	b29a      	uxth	r2, r3
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	0011      	movs	r1, r2
 80060fa:	0018      	movs	r0, r3
 80060fc:	f000 f8dc 	bl	80062b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006100:	e0be      	b.n	8006280 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2258      	movs	r2, #88	; 0x58
 8006106:	5a99      	ldrh	r1, [r3, r2]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	225a      	movs	r2, #90	; 0x5a
 800610c:	5a9b      	ldrh	r3, [r3, r2]
 800610e:	b29a      	uxth	r2, r3
 8006110:	208e      	movs	r0, #142	; 0x8e
 8006112:	183b      	adds	r3, r7, r0
 8006114:	1a8a      	subs	r2, r1, r2
 8006116:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	225a      	movs	r2, #90	; 0x5a
 800611c:	5a9b      	ldrh	r3, [r3, r2]
 800611e:	b29b      	uxth	r3, r3
 8006120:	2b00      	cmp	r3, #0
 8006122:	d100      	bne.n	8006126 <HAL_UART_IRQHandler+0x43e>
 8006124:	e0ae      	b.n	8006284 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8006126:	183b      	adds	r3, r7, r0
 8006128:	881b      	ldrh	r3, [r3, #0]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d100      	bne.n	8006130 <HAL_UART_IRQHandler+0x448>
 800612e:	e0a9      	b.n	8006284 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006130:	f3ef 8310 	mrs	r3, PRIMASK
 8006134:	60fb      	str	r3, [r7, #12]
  return(result);
 8006136:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006138:	2488      	movs	r4, #136	; 0x88
 800613a:	193a      	adds	r2, r7, r4
 800613c:	6013      	str	r3, [r2, #0]
 800613e:	2301      	movs	r3, #1
 8006140:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	f383 8810 	msr	PRIMASK, r3
}
 8006148:	46c0      	nop			; (mov r8, r8)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	494f      	ldr	r1, [pc, #316]	; (8006294 <HAL_UART_IRQHandler+0x5ac>)
 8006156:	400a      	ands	r2, r1
 8006158:	601a      	str	r2, [r3, #0]
 800615a:	193b      	adds	r3, r7, r4
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	f383 8810 	msr	PRIMASK, r3
}
 8006166:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006168:	f3ef 8310 	mrs	r3, PRIMASK
 800616c:	61bb      	str	r3, [r7, #24]
  return(result);
 800616e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006170:	2484      	movs	r4, #132	; 0x84
 8006172:	193a      	adds	r2, r7, r4
 8006174:	6013      	str	r3, [r2, #0]
 8006176:	2301      	movs	r3, #1
 8006178:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	f383 8810 	msr	PRIMASK, r3
}
 8006180:	46c0      	nop			; (mov r8, r8)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	689a      	ldr	r2, [r3, #8]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2101      	movs	r1, #1
 800618e:	438a      	bics	r2, r1
 8006190:	609a      	str	r2, [r3, #8]
 8006192:	193b      	adds	r3, r7, r4
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006198:	6a3b      	ldr	r3, [r7, #32]
 800619a:	f383 8810 	msr	PRIMASK, r3
}
 800619e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2220      	movs	r2, #32
 80061a4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2200      	movs	r2, #0
 80061b0:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061b2:	f3ef 8310 	mrs	r3, PRIMASK
 80061b6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80061b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061ba:	2480      	movs	r4, #128	; 0x80
 80061bc:	193a      	adds	r2, r7, r4
 80061be:	6013      	str	r3, [r2, #0]
 80061c0:	2301      	movs	r3, #1
 80061c2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c6:	f383 8810 	msr	PRIMASK, r3
}
 80061ca:	46c0      	nop			; (mov r8, r8)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	2110      	movs	r1, #16
 80061d8:	438a      	bics	r2, r1
 80061da:	601a      	str	r2, [r3, #0]
 80061dc:	193b      	adds	r3, r7, r4
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e4:	f383 8810 	msr	PRIMASK, r3
}
 80061e8:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80061ea:	183b      	adds	r3, r7, r0
 80061ec:	881a      	ldrh	r2, [r3, #0]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	0011      	movs	r1, r2
 80061f2:	0018      	movs	r0, r3
 80061f4:	f000 f860 	bl	80062b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80061f8:	e044      	b.n	8006284 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80061fa:	23a4      	movs	r3, #164	; 0xa4
 80061fc:	18fb      	adds	r3, r7, r3
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	2380      	movs	r3, #128	; 0x80
 8006202:	035b      	lsls	r3, r3, #13
 8006204:	4013      	ands	r3, r2
 8006206:	d010      	beq.n	800622a <HAL_UART_IRQHandler+0x542>
 8006208:	239c      	movs	r3, #156	; 0x9c
 800620a:	18fb      	adds	r3, r7, r3
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	2380      	movs	r3, #128	; 0x80
 8006210:	03db      	lsls	r3, r3, #15
 8006212:	4013      	ands	r3, r2
 8006214:	d009      	beq.n	800622a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	2280      	movs	r2, #128	; 0x80
 800621c:	0352      	lsls	r2, r2, #13
 800621e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	0018      	movs	r0, r3
 8006224:	f000 feb8 	bl	8006f98 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006228:	e02f      	b.n	800628a <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800622a:	23a4      	movs	r3, #164	; 0xa4
 800622c:	18fb      	adds	r3, r7, r3
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	2280      	movs	r2, #128	; 0x80
 8006232:	4013      	ands	r3, r2
 8006234:	d00f      	beq.n	8006256 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006236:	23a0      	movs	r3, #160	; 0xa0
 8006238:	18fb      	adds	r3, r7, r3
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	2280      	movs	r2, #128	; 0x80
 800623e:	4013      	ands	r3, r2
 8006240:	d009      	beq.n	8006256 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006246:	2b00      	cmp	r3, #0
 8006248:	d01e      	beq.n	8006288 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	0010      	movs	r0, r2
 8006252:	4798      	blx	r3
    }
    return;
 8006254:	e018      	b.n	8006288 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006256:	23a4      	movs	r3, #164	; 0xa4
 8006258:	18fb      	adds	r3, r7, r3
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	2240      	movs	r2, #64	; 0x40
 800625e:	4013      	ands	r3, r2
 8006260:	d013      	beq.n	800628a <HAL_UART_IRQHandler+0x5a2>
 8006262:	23a0      	movs	r3, #160	; 0xa0
 8006264:	18fb      	adds	r3, r7, r3
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	2240      	movs	r2, #64	; 0x40
 800626a:	4013      	ands	r3, r2
 800626c:	d00d      	beq.n	800628a <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	0018      	movs	r0, r3
 8006272:	f000 fcfe 	bl	8006c72 <UART_EndTransmit_IT>
    return;
 8006276:	e008      	b.n	800628a <HAL_UART_IRQHandler+0x5a2>
      return;
 8006278:	46c0      	nop			; (mov r8, r8)
 800627a:	e006      	b.n	800628a <HAL_UART_IRQHandler+0x5a2>
    return;
 800627c:	46c0      	nop			; (mov r8, r8)
 800627e:	e004      	b.n	800628a <HAL_UART_IRQHandler+0x5a2>
      return;
 8006280:	46c0      	nop			; (mov r8, r8)
 8006282:	e002      	b.n	800628a <HAL_UART_IRQHandler+0x5a2>
      return;
 8006284:	46c0      	nop			; (mov r8, r8)
 8006286:	e000      	b.n	800628a <HAL_UART_IRQHandler+0x5a2>
    return;
 8006288:	46c0      	nop			; (mov r8, r8)
  }

}
 800628a:	46bd      	mov	sp, r7
 800628c:	b02b      	add	sp, #172	; 0xac
 800628e:	bd90      	pop	{r4, r7, pc}
 8006290:	fffffeff 	.word	0xfffffeff
 8006294:	fffffedf 	.word	0xfffffedf

08006298 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b082      	sub	sp, #8
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80062a0:	46c0      	nop			; (mov r8, r8)
 80062a2:	46bd      	mov	sp, r7
 80062a4:	b002      	add	sp, #8
 80062a6:	bd80      	pop	{r7, pc}

080062a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b082      	sub	sp, #8
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80062b0:	46c0      	nop			; (mov r8, r8)
 80062b2:	46bd      	mov	sp, r7
 80062b4:	b002      	add	sp, #8
 80062b6:	bd80      	pop	{r7, pc}

080062b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b082      	sub	sp, #8
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	000a      	movs	r2, r1
 80062c2:	1cbb      	adds	r3, r7, #2
 80062c4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80062c6:	46c0      	nop			; (mov r8, r8)
 80062c8:	46bd      	mov	sp, r7
 80062ca:	b002      	add	sp, #8
 80062cc:	bd80      	pop	{r7, pc}
	...

080062d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b088      	sub	sp, #32
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80062d8:	231e      	movs	r3, #30
 80062da:	18fb      	adds	r3, r7, r3
 80062dc:	2200      	movs	r2, #0
 80062de:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	689a      	ldr	r2, [r3, #8]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	691b      	ldr	r3, [r3, #16]
 80062e8:	431a      	orrs	r2, r3
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	695b      	ldr	r3, [r3, #20]
 80062ee:	431a      	orrs	r2, r3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	69db      	ldr	r3, [r3, #28]
 80062f4:	4313      	orrs	r3, r2
 80062f6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4abe      	ldr	r2, [pc, #760]	; (80065f8 <UART_SetConfig+0x328>)
 8006300:	4013      	ands	r3, r2
 8006302:	0019      	movs	r1, r3
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	697a      	ldr	r2, [r7, #20]
 800630a:	430a      	orrs	r2, r1
 800630c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	4ab9      	ldr	r2, [pc, #740]	; (80065fc <UART_SetConfig+0x32c>)
 8006316:	4013      	ands	r3, r2
 8006318:	0019      	movs	r1, r3
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	68da      	ldr	r2, [r3, #12]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	430a      	orrs	r2, r1
 8006324:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	699b      	ldr	r3, [r3, #24]
 800632a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6a1b      	ldr	r3, [r3, #32]
 8006330:	697a      	ldr	r2, [r7, #20]
 8006332:	4313      	orrs	r3, r2
 8006334:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	4ab0      	ldr	r2, [pc, #704]	; (8006600 <UART_SetConfig+0x330>)
 800633e:	4013      	ands	r3, r2
 8006340:	0019      	movs	r1, r3
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	697a      	ldr	r2, [r7, #20]
 8006348:	430a      	orrs	r2, r1
 800634a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4aac      	ldr	r2, [pc, #688]	; (8006604 <UART_SetConfig+0x334>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d127      	bne.n	80063a6 <UART_SetConfig+0xd6>
 8006356:	4bac      	ldr	r3, [pc, #688]	; (8006608 <UART_SetConfig+0x338>)
 8006358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800635a:	2203      	movs	r2, #3
 800635c:	4013      	ands	r3, r2
 800635e:	2b03      	cmp	r3, #3
 8006360:	d00d      	beq.n	800637e <UART_SetConfig+0xae>
 8006362:	d81b      	bhi.n	800639c <UART_SetConfig+0xcc>
 8006364:	2b02      	cmp	r3, #2
 8006366:	d014      	beq.n	8006392 <UART_SetConfig+0xc2>
 8006368:	d818      	bhi.n	800639c <UART_SetConfig+0xcc>
 800636a:	2b00      	cmp	r3, #0
 800636c:	d002      	beq.n	8006374 <UART_SetConfig+0xa4>
 800636e:	2b01      	cmp	r3, #1
 8006370:	d00a      	beq.n	8006388 <UART_SetConfig+0xb8>
 8006372:	e013      	b.n	800639c <UART_SetConfig+0xcc>
 8006374:	231f      	movs	r3, #31
 8006376:	18fb      	adds	r3, r7, r3
 8006378:	2200      	movs	r2, #0
 800637a:	701a      	strb	r2, [r3, #0]
 800637c:	e0bd      	b.n	80064fa <UART_SetConfig+0x22a>
 800637e:	231f      	movs	r3, #31
 8006380:	18fb      	adds	r3, r7, r3
 8006382:	2202      	movs	r2, #2
 8006384:	701a      	strb	r2, [r3, #0]
 8006386:	e0b8      	b.n	80064fa <UART_SetConfig+0x22a>
 8006388:	231f      	movs	r3, #31
 800638a:	18fb      	adds	r3, r7, r3
 800638c:	2204      	movs	r2, #4
 800638e:	701a      	strb	r2, [r3, #0]
 8006390:	e0b3      	b.n	80064fa <UART_SetConfig+0x22a>
 8006392:	231f      	movs	r3, #31
 8006394:	18fb      	adds	r3, r7, r3
 8006396:	2208      	movs	r2, #8
 8006398:	701a      	strb	r2, [r3, #0]
 800639a:	e0ae      	b.n	80064fa <UART_SetConfig+0x22a>
 800639c:	231f      	movs	r3, #31
 800639e:	18fb      	adds	r3, r7, r3
 80063a0:	2210      	movs	r2, #16
 80063a2:	701a      	strb	r2, [r3, #0]
 80063a4:	e0a9      	b.n	80064fa <UART_SetConfig+0x22a>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a98      	ldr	r2, [pc, #608]	; (800660c <UART_SetConfig+0x33c>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d134      	bne.n	800641a <UART_SetConfig+0x14a>
 80063b0:	4b95      	ldr	r3, [pc, #596]	; (8006608 <UART_SetConfig+0x338>)
 80063b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063b4:	23c0      	movs	r3, #192	; 0xc0
 80063b6:	029b      	lsls	r3, r3, #10
 80063b8:	4013      	ands	r3, r2
 80063ba:	22c0      	movs	r2, #192	; 0xc0
 80063bc:	0292      	lsls	r2, r2, #10
 80063be:	4293      	cmp	r3, r2
 80063c0:	d017      	beq.n	80063f2 <UART_SetConfig+0x122>
 80063c2:	22c0      	movs	r2, #192	; 0xc0
 80063c4:	0292      	lsls	r2, r2, #10
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d822      	bhi.n	8006410 <UART_SetConfig+0x140>
 80063ca:	2280      	movs	r2, #128	; 0x80
 80063cc:	0292      	lsls	r2, r2, #10
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d019      	beq.n	8006406 <UART_SetConfig+0x136>
 80063d2:	2280      	movs	r2, #128	; 0x80
 80063d4:	0292      	lsls	r2, r2, #10
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d81a      	bhi.n	8006410 <UART_SetConfig+0x140>
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d004      	beq.n	80063e8 <UART_SetConfig+0x118>
 80063de:	2280      	movs	r2, #128	; 0x80
 80063e0:	0252      	lsls	r2, r2, #9
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d00a      	beq.n	80063fc <UART_SetConfig+0x12c>
 80063e6:	e013      	b.n	8006410 <UART_SetConfig+0x140>
 80063e8:	231f      	movs	r3, #31
 80063ea:	18fb      	adds	r3, r7, r3
 80063ec:	2200      	movs	r2, #0
 80063ee:	701a      	strb	r2, [r3, #0]
 80063f0:	e083      	b.n	80064fa <UART_SetConfig+0x22a>
 80063f2:	231f      	movs	r3, #31
 80063f4:	18fb      	adds	r3, r7, r3
 80063f6:	2202      	movs	r2, #2
 80063f8:	701a      	strb	r2, [r3, #0]
 80063fa:	e07e      	b.n	80064fa <UART_SetConfig+0x22a>
 80063fc:	231f      	movs	r3, #31
 80063fe:	18fb      	adds	r3, r7, r3
 8006400:	2204      	movs	r2, #4
 8006402:	701a      	strb	r2, [r3, #0]
 8006404:	e079      	b.n	80064fa <UART_SetConfig+0x22a>
 8006406:	231f      	movs	r3, #31
 8006408:	18fb      	adds	r3, r7, r3
 800640a:	2208      	movs	r2, #8
 800640c:	701a      	strb	r2, [r3, #0]
 800640e:	e074      	b.n	80064fa <UART_SetConfig+0x22a>
 8006410:	231f      	movs	r3, #31
 8006412:	18fb      	adds	r3, r7, r3
 8006414:	2210      	movs	r2, #16
 8006416:	701a      	strb	r2, [r3, #0]
 8006418:	e06f      	b.n	80064fa <UART_SetConfig+0x22a>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a7c      	ldr	r2, [pc, #496]	; (8006610 <UART_SetConfig+0x340>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d134      	bne.n	800648e <UART_SetConfig+0x1be>
 8006424:	4b78      	ldr	r3, [pc, #480]	; (8006608 <UART_SetConfig+0x338>)
 8006426:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006428:	23c0      	movs	r3, #192	; 0xc0
 800642a:	031b      	lsls	r3, r3, #12
 800642c:	4013      	ands	r3, r2
 800642e:	22c0      	movs	r2, #192	; 0xc0
 8006430:	0312      	lsls	r2, r2, #12
 8006432:	4293      	cmp	r3, r2
 8006434:	d017      	beq.n	8006466 <UART_SetConfig+0x196>
 8006436:	22c0      	movs	r2, #192	; 0xc0
 8006438:	0312      	lsls	r2, r2, #12
 800643a:	4293      	cmp	r3, r2
 800643c:	d822      	bhi.n	8006484 <UART_SetConfig+0x1b4>
 800643e:	2280      	movs	r2, #128	; 0x80
 8006440:	0312      	lsls	r2, r2, #12
 8006442:	4293      	cmp	r3, r2
 8006444:	d019      	beq.n	800647a <UART_SetConfig+0x1aa>
 8006446:	2280      	movs	r2, #128	; 0x80
 8006448:	0312      	lsls	r2, r2, #12
 800644a:	4293      	cmp	r3, r2
 800644c:	d81a      	bhi.n	8006484 <UART_SetConfig+0x1b4>
 800644e:	2b00      	cmp	r3, #0
 8006450:	d004      	beq.n	800645c <UART_SetConfig+0x18c>
 8006452:	2280      	movs	r2, #128	; 0x80
 8006454:	02d2      	lsls	r2, r2, #11
 8006456:	4293      	cmp	r3, r2
 8006458:	d00a      	beq.n	8006470 <UART_SetConfig+0x1a0>
 800645a:	e013      	b.n	8006484 <UART_SetConfig+0x1b4>
 800645c:	231f      	movs	r3, #31
 800645e:	18fb      	adds	r3, r7, r3
 8006460:	2200      	movs	r2, #0
 8006462:	701a      	strb	r2, [r3, #0]
 8006464:	e049      	b.n	80064fa <UART_SetConfig+0x22a>
 8006466:	231f      	movs	r3, #31
 8006468:	18fb      	adds	r3, r7, r3
 800646a:	2202      	movs	r2, #2
 800646c:	701a      	strb	r2, [r3, #0]
 800646e:	e044      	b.n	80064fa <UART_SetConfig+0x22a>
 8006470:	231f      	movs	r3, #31
 8006472:	18fb      	adds	r3, r7, r3
 8006474:	2204      	movs	r2, #4
 8006476:	701a      	strb	r2, [r3, #0]
 8006478:	e03f      	b.n	80064fa <UART_SetConfig+0x22a>
 800647a:	231f      	movs	r3, #31
 800647c:	18fb      	adds	r3, r7, r3
 800647e:	2208      	movs	r2, #8
 8006480:	701a      	strb	r2, [r3, #0]
 8006482:	e03a      	b.n	80064fa <UART_SetConfig+0x22a>
 8006484:	231f      	movs	r3, #31
 8006486:	18fb      	adds	r3, r7, r3
 8006488:	2210      	movs	r2, #16
 800648a:	701a      	strb	r2, [r3, #0]
 800648c:	e035      	b.n	80064fa <UART_SetConfig+0x22a>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a60      	ldr	r2, [pc, #384]	; (8006614 <UART_SetConfig+0x344>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d104      	bne.n	80064a2 <UART_SetConfig+0x1d2>
 8006498:	231f      	movs	r3, #31
 800649a:	18fb      	adds	r3, r7, r3
 800649c:	2200      	movs	r2, #0
 800649e:	701a      	strb	r2, [r3, #0]
 80064a0:	e02b      	b.n	80064fa <UART_SetConfig+0x22a>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a5c      	ldr	r2, [pc, #368]	; (8006618 <UART_SetConfig+0x348>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d104      	bne.n	80064b6 <UART_SetConfig+0x1e6>
 80064ac:	231f      	movs	r3, #31
 80064ae:	18fb      	adds	r3, r7, r3
 80064b0:	2200      	movs	r2, #0
 80064b2:	701a      	strb	r2, [r3, #0]
 80064b4:	e021      	b.n	80064fa <UART_SetConfig+0x22a>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a58      	ldr	r2, [pc, #352]	; (800661c <UART_SetConfig+0x34c>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d104      	bne.n	80064ca <UART_SetConfig+0x1fa>
 80064c0:	231f      	movs	r3, #31
 80064c2:	18fb      	adds	r3, r7, r3
 80064c4:	2200      	movs	r2, #0
 80064c6:	701a      	strb	r2, [r3, #0]
 80064c8:	e017      	b.n	80064fa <UART_SetConfig+0x22a>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a54      	ldr	r2, [pc, #336]	; (8006620 <UART_SetConfig+0x350>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d104      	bne.n	80064de <UART_SetConfig+0x20e>
 80064d4:	231f      	movs	r3, #31
 80064d6:	18fb      	adds	r3, r7, r3
 80064d8:	2200      	movs	r2, #0
 80064da:	701a      	strb	r2, [r3, #0]
 80064dc:	e00d      	b.n	80064fa <UART_SetConfig+0x22a>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a50      	ldr	r2, [pc, #320]	; (8006624 <UART_SetConfig+0x354>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d104      	bne.n	80064f2 <UART_SetConfig+0x222>
 80064e8:	231f      	movs	r3, #31
 80064ea:	18fb      	adds	r3, r7, r3
 80064ec:	2200      	movs	r2, #0
 80064ee:	701a      	strb	r2, [r3, #0]
 80064f0:	e003      	b.n	80064fa <UART_SetConfig+0x22a>
 80064f2:	231f      	movs	r3, #31
 80064f4:	18fb      	adds	r3, r7, r3
 80064f6:	2210      	movs	r2, #16
 80064f8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	69da      	ldr	r2, [r3, #28]
 80064fe:	2380      	movs	r3, #128	; 0x80
 8006500:	021b      	lsls	r3, r3, #8
 8006502:	429a      	cmp	r2, r3
 8006504:	d15d      	bne.n	80065c2 <UART_SetConfig+0x2f2>
  {
    switch (clocksource)
 8006506:	231f      	movs	r3, #31
 8006508:	18fb      	adds	r3, r7, r3
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	2b08      	cmp	r3, #8
 800650e:	d015      	beq.n	800653c <UART_SetConfig+0x26c>
 8006510:	dc18      	bgt.n	8006544 <UART_SetConfig+0x274>
 8006512:	2b04      	cmp	r3, #4
 8006514:	d00d      	beq.n	8006532 <UART_SetConfig+0x262>
 8006516:	dc15      	bgt.n	8006544 <UART_SetConfig+0x274>
 8006518:	2b00      	cmp	r3, #0
 800651a:	d002      	beq.n	8006522 <UART_SetConfig+0x252>
 800651c:	2b02      	cmp	r3, #2
 800651e:	d005      	beq.n	800652c <UART_SetConfig+0x25c>
 8006520:	e010      	b.n	8006544 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006522:	f7fe fe81 	bl	8005228 <HAL_RCC_GetPCLK1Freq>
 8006526:	0003      	movs	r3, r0
 8006528:	61bb      	str	r3, [r7, #24]
        break;
 800652a:	e012      	b.n	8006552 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800652c:	4b3e      	ldr	r3, [pc, #248]	; (8006628 <UART_SetConfig+0x358>)
 800652e:	61bb      	str	r3, [r7, #24]
        break;
 8006530:	e00f      	b.n	8006552 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006532:	f7fe fdef 	bl	8005114 <HAL_RCC_GetSysClockFreq>
 8006536:	0003      	movs	r3, r0
 8006538:	61bb      	str	r3, [r7, #24]
        break;
 800653a:	e00a      	b.n	8006552 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800653c:	2380      	movs	r3, #128	; 0x80
 800653e:	021b      	lsls	r3, r3, #8
 8006540:	61bb      	str	r3, [r7, #24]
        break;
 8006542:	e006      	b.n	8006552 <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 8006544:	2300      	movs	r3, #0
 8006546:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006548:	231e      	movs	r3, #30
 800654a:	18fb      	adds	r3, r7, r3
 800654c:	2201      	movs	r2, #1
 800654e:	701a      	strb	r2, [r3, #0]
        break;
 8006550:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006552:	69bb      	ldr	r3, [r7, #24]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d100      	bne.n	800655a <UART_SetConfig+0x28a>
 8006558:	e095      	b.n	8006686 <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800655a:	69bb      	ldr	r3, [r7, #24]
 800655c:	005a      	lsls	r2, r3, #1
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	085b      	lsrs	r3, r3, #1
 8006564:	18d2      	adds	r2, r2, r3
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	0019      	movs	r1, r3
 800656c:	0010      	movs	r0, r2
 800656e:	f7f9 fdc9 	bl	8000104 <__udivsi3>
 8006572:	0003      	movs	r3, r0
 8006574:	b29b      	uxth	r3, r3
 8006576:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	2b0f      	cmp	r3, #15
 800657c:	d91c      	bls.n	80065b8 <UART_SetConfig+0x2e8>
 800657e:	693a      	ldr	r2, [r7, #16]
 8006580:	2380      	movs	r3, #128	; 0x80
 8006582:	025b      	lsls	r3, r3, #9
 8006584:	429a      	cmp	r2, r3
 8006586:	d217      	bcs.n	80065b8 <UART_SetConfig+0x2e8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	b29a      	uxth	r2, r3
 800658c:	200e      	movs	r0, #14
 800658e:	183b      	adds	r3, r7, r0
 8006590:	210f      	movs	r1, #15
 8006592:	438a      	bics	r2, r1
 8006594:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	085b      	lsrs	r3, r3, #1
 800659a:	b29b      	uxth	r3, r3
 800659c:	2207      	movs	r2, #7
 800659e:	4013      	ands	r3, r2
 80065a0:	b299      	uxth	r1, r3
 80065a2:	183b      	adds	r3, r7, r0
 80065a4:	183a      	adds	r2, r7, r0
 80065a6:	8812      	ldrh	r2, [r2, #0]
 80065a8:	430a      	orrs	r2, r1
 80065aa:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	183a      	adds	r2, r7, r0
 80065b2:	8812      	ldrh	r2, [r2, #0]
 80065b4:	60da      	str	r2, [r3, #12]
 80065b6:	e066      	b.n	8006686 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 80065b8:	231e      	movs	r3, #30
 80065ba:	18fb      	adds	r3, r7, r3
 80065bc:	2201      	movs	r2, #1
 80065be:	701a      	strb	r2, [r3, #0]
 80065c0:	e061      	b.n	8006686 <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80065c2:	231f      	movs	r3, #31
 80065c4:	18fb      	adds	r3, r7, r3
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	2b08      	cmp	r3, #8
 80065ca:	d02f      	beq.n	800662c <UART_SetConfig+0x35c>
 80065cc:	dc32      	bgt.n	8006634 <UART_SetConfig+0x364>
 80065ce:	2b04      	cmp	r3, #4
 80065d0:	d00d      	beq.n	80065ee <UART_SetConfig+0x31e>
 80065d2:	dc2f      	bgt.n	8006634 <UART_SetConfig+0x364>
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d002      	beq.n	80065de <UART_SetConfig+0x30e>
 80065d8:	2b02      	cmp	r3, #2
 80065da:	d005      	beq.n	80065e8 <UART_SetConfig+0x318>
 80065dc:	e02a      	b.n	8006634 <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065de:	f7fe fe23 	bl	8005228 <HAL_RCC_GetPCLK1Freq>
 80065e2:	0003      	movs	r3, r0
 80065e4:	61bb      	str	r3, [r7, #24]
        break;
 80065e6:	e02c      	b.n	8006642 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065e8:	4b0f      	ldr	r3, [pc, #60]	; (8006628 <UART_SetConfig+0x358>)
 80065ea:	61bb      	str	r3, [r7, #24]
        break;
 80065ec:	e029      	b.n	8006642 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065ee:	f7fe fd91 	bl	8005114 <HAL_RCC_GetSysClockFreq>
 80065f2:	0003      	movs	r3, r0
 80065f4:	61bb      	str	r3, [r7, #24]
        break;
 80065f6:	e024      	b.n	8006642 <UART_SetConfig+0x372>
 80065f8:	efff69f3 	.word	0xefff69f3
 80065fc:	ffffcfff 	.word	0xffffcfff
 8006600:	fffff4ff 	.word	0xfffff4ff
 8006604:	40013800 	.word	0x40013800
 8006608:	40021000 	.word	0x40021000
 800660c:	40004400 	.word	0x40004400
 8006610:	40004800 	.word	0x40004800
 8006614:	40004c00 	.word	0x40004c00
 8006618:	40005000 	.word	0x40005000
 800661c:	40011400 	.word	0x40011400
 8006620:	40011800 	.word	0x40011800
 8006624:	40011c00 	.word	0x40011c00
 8006628:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800662c:	2380      	movs	r3, #128	; 0x80
 800662e:	021b      	lsls	r3, r3, #8
 8006630:	61bb      	str	r3, [r7, #24]
        break;
 8006632:	e006      	b.n	8006642 <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 8006634:	2300      	movs	r3, #0
 8006636:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006638:	231e      	movs	r3, #30
 800663a:	18fb      	adds	r3, r7, r3
 800663c:	2201      	movs	r2, #1
 800663e:	701a      	strb	r2, [r3, #0]
        break;
 8006640:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006642:	69bb      	ldr	r3, [r7, #24]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d01e      	beq.n	8006686 <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	085a      	lsrs	r2, r3, #1
 800664e:	69bb      	ldr	r3, [r7, #24]
 8006650:	18d2      	adds	r2, r2, r3
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	0019      	movs	r1, r3
 8006658:	0010      	movs	r0, r2
 800665a:	f7f9 fd53 	bl	8000104 <__udivsi3>
 800665e:	0003      	movs	r3, r0
 8006660:	b29b      	uxth	r3, r3
 8006662:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	2b0f      	cmp	r3, #15
 8006668:	d909      	bls.n	800667e <UART_SetConfig+0x3ae>
 800666a:	693a      	ldr	r2, [r7, #16]
 800666c:	2380      	movs	r3, #128	; 0x80
 800666e:	025b      	lsls	r3, r3, #9
 8006670:	429a      	cmp	r2, r3
 8006672:	d204      	bcs.n	800667e <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = usartdiv;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	693a      	ldr	r2, [r7, #16]
 800667a:	60da      	str	r2, [r3, #12]
 800667c:	e003      	b.n	8006686 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 800667e:	231e      	movs	r3, #30
 8006680:	18fb      	adds	r3, r7, r3
 8006682:	2201      	movs	r2, #1
 8006684:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006692:	231e      	movs	r3, #30
 8006694:	18fb      	adds	r3, r7, r3
 8006696:	781b      	ldrb	r3, [r3, #0]
}
 8006698:	0018      	movs	r0, r3
 800669a:	46bd      	mov	sp, r7
 800669c:	b008      	add	sp, #32
 800669e:	bd80      	pop	{r7, pc}

080066a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b082      	sub	sp, #8
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ac:	2201      	movs	r2, #1
 80066ae:	4013      	ands	r3, r2
 80066b0:	d00b      	beq.n	80066ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	4a4a      	ldr	r2, [pc, #296]	; (80067e4 <UART_AdvFeatureConfig+0x144>)
 80066ba:	4013      	ands	r3, r2
 80066bc:	0019      	movs	r1, r3
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	430a      	orrs	r2, r1
 80066c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ce:	2202      	movs	r2, #2
 80066d0:	4013      	ands	r3, r2
 80066d2:	d00b      	beq.n	80066ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	4a43      	ldr	r2, [pc, #268]	; (80067e8 <UART_AdvFeatureConfig+0x148>)
 80066dc:	4013      	ands	r3, r2
 80066de:	0019      	movs	r1, r3
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	430a      	orrs	r2, r1
 80066ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f0:	2204      	movs	r2, #4
 80066f2:	4013      	ands	r3, r2
 80066f4:	d00b      	beq.n	800670e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	4a3b      	ldr	r2, [pc, #236]	; (80067ec <UART_AdvFeatureConfig+0x14c>)
 80066fe:	4013      	ands	r3, r2
 8006700:	0019      	movs	r1, r3
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	430a      	orrs	r2, r1
 800670c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006712:	2208      	movs	r2, #8
 8006714:	4013      	ands	r3, r2
 8006716:	d00b      	beq.n	8006730 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	4a34      	ldr	r2, [pc, #208]	; (80067f0 <UART_AdvFeatureConfig+0x150>)
 8006720:	4013      	ands	r3, r2
 8006722:	0019      	movs	r1, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	430a      	orrs	r2, r1
 800672e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006734:	2210      	movs	r2, #16
 8006736:	4013      	ands	r3, r2
 8006738:	d00b      	beq.n	8006752 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	4a2c      	ldr	r2, [pc, #176]	; (80067f4 <UART_AdvFeatureConfig+0x154>)
 8006742:	4013      	ands	r3, r2
 8006744:	0019      	movs	r1, r3
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	430a      	orrs	r2, r1
 8006750:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006756:	2220      	movs	r2, #32
 8006758:	4013      	ands	r3, r2
 800675a:	d00b      	beq.n	8006774 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	4a25      	ldr	r2, [pc, #148]	; (80067f8 <UART_AdvFeatureConfig+0x158>)
 8006764:	4013      	ands	r3, r2
 8006766:	0019      	movs	r1, r3
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	430a      	orrs	r2, r1
 8006772:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006778:	2240      	movs	r2, #64	; 0x40
 800677a:	4013      	ands	r3, r2
 800677c:	d01d      	beq.n	80067ba <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	4a1d      	ldr	r2, [pc, #116]	; (80067fc <UART_AdvFeatureConfig+0x15c>)
 8006786:	4013      	ands	r3, r2
 8006788:	0019      	movs	r1, r3
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	430a      	orrs	r2, r1
 8006794:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800679a:	2380      	movs	r3, #128	; 0x80
 800679c:	035b      	lsls	r3, r3, #13
 800679e:	429a      	cmp	r2, r3
 80067a0:	d10b      	bne.n	80067ba <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	4a15      	ldr	r2, [pc, #84]	; (8006800 <UART_AdvFeatureConfig+0x160>)
 80067aa:	4013      	ands	r3, r2
 80067ac:	0019      	movs	r1, r3
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	430a      	orrs	r2, r1
 80067b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067be:	2280      	movs	r2, #128	; 0x80
 80067c0:	4013      	ands	r3, r2
 80067c2:	d00b      	beq.n	80067dc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	4a0e      	ldr	r2, [pc, #56]	; (8006804 <UART_AdvFeatureConfig+0x164>)
 80067cc:	4013      	ands	r3, r2
 80067ce:	0019      	movs	r1, r3
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	430a      	orrs	r2, r1
 80067da:	605a      	str	r2, [r3, #4]
  }
}
 80067dc:	46c0      	nop			; (mov r8, r8)
 80067de:	46bd      	mov	sp, r7
 80067e0:	b002      	add	sp, #8
 80067e2:	bd80      	pop	{r7, pc}
 80067e4:	fffdffff 	.word	0xfffdffff
 80067e8:	fffeffff 	.word	0xfffeffff
 80067ec:	fffbffff 	.word	0xfffbffff
 80067f0:	ffff7fff 	.word	0xffff7fff
 80067f4:	ffffefff 	.word	0xffffefff
 80067f8:	ffffdfff 	.word	0xffffdfff
 80067fc:	ffefffff 	.word	0xffefffff
 8006800:	ff9fffff 	.word	0xff9fffff
 8006804:	fff7ffff 	.word	0xfff7ffff

08006808 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b086      	sub	sp, #24
 800680c:	af02      	add	r7, sp, #8
 800680e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2280      	movs	r2, #128	; 0x80
 8006814:	2100      	movs	r1, #0
 8006816:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006818:	f7fc f986 	bl	8002b28 <HAL_GetTick>
 800681c:	0003      	movs	r3, r0
 800681e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	2208      	movs	r2, #8
 8006828:	4013      	ands	r3, r2
 800682a:	2b08      	cmp	r3, #8
 800682c:	d10c      	bne.n	8006848 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2280      	movs	r2, #128	; 0x80
 8006832:	0391      	lsls	r1, r2, #14
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	4a17      	ldr	r2, [pc, #92]	; (8006894 <UART_CheckIdleState+0x8c>)
 8006838:	9200      	str	r2, [sp, #0]
 800683a:	2200      	movs	r2, #0
 800683c:	f000 f82c 	bl	8006898 <UART_WaitOnFlagUntilTimeout>
 8006840:	1e03      	subs	r3, r0, #0
 8006842:	d001      	beq.n	8006848 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006844:	2303      	movs	r3, #3
 8006846:	e021      	b.n	800688c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	2204      	movs	r2, #4
 8006850:	4013      	ands	r3, r2
 8006852:	2b04      	cmp	r3, #4
 8006854:	d10c      	bne.n	8006870 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2280      	movs	r2, #128	; 0x80
 800685a:	03d1      	lsls	r1, r2, #15
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	4a0d      	ldr	r2, [pc, #52]	; (8006894 <UART_CheckIdleState+0x8c>)
 8006860:	9200      	str	r2, [sp, #0]
 8006862:	2200      	movs	r2, #0
 8006864:	f000 f818 	bl	8006898 <UART_WaitOnFlagUntilTimeout>
 8006868:	1e03      	subs	r3, r0, #0
 800686a:	d001      	beq.n	8006870 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800686c:	2303      	movs	r3, #3
 800686e:	e00d      	b.n	800688c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2220      	movs	r2, #32
 8006874:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2220      	movs	r2, #32
 800687a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2274      	movs	r2, #116	; 0x74
 8006886:	2100      	movs	r1, #0
 8006888:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800688a:	2300      	movs	r3, #0
}
 800688c:	0018      	movs	r0, r3
 800688e:	46bd      	mov	sp, r7
 8006890:	b004      	add	sp, #16
 8006892:	bd80      	pop	{r7, pc}
 8006894:	01ffffff 	.word	0x01ffffff

08006898 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b094      	sub	sp, #80	; 0x50
 800689c:	af00      	add	r7, sp, #0
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	60b9      	str	r1, [r7, #8]
 80068a2:	603b      	str	r3, [r7, #0]
 80068a4:	1dfb      	adds	r3, r7, #7
 80068a6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068a8:	e0a3      	b.n	80069f2 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80068ac:	3301      	adds	r3, #1
 80068ae:	d100      	bne.n	80068b2 <UART_WaitOnFlagUntilTimeout+0x1a>
 80068b0:	e09f      	b.n	80069f2 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068b2:	f7fc f939 	bl	8002b28 <HAL_GetTick>
 80068b6:	0002      	movs	r2, r0
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	1ad3      	subs	r3, r2, r3
 80068bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80068be:	429a      	cmp	r2, r3
 80068c0:	d302      	bcc.n	80068c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80068c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d13d      	bne.n	8006944 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068c8:	f3ef 8310 	mrs	r3, PRIMASK
 80068cc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80068ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80068d0:	647b      	str	r3, [r7, #68]	; 0x44
 80068d2:	2301      	movs	r3, #1
 80068d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d8:	f383 8810 	msr	PRIMASK, r3
}
 80068dc:	46c0      	nop			; (mov r8, r8)
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	494c      	ldr	r1, [pc, #304]	; (8006a1c <UART_WaitOnFlagUntilTimeout+0x184>)
 80068ea:	400a      	ands	r2, r1
 80068ec:	601a      	str	r2, [r3, #0]
 80068ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068f0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f4:	f383 8810 	msr	PRIMASK, r3
}
 80068f8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068fa:	f3ef 8310 	mrs	r3, PRIMASK
 80068fe:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006902:	643b      	str	r3, [r7, #64]	; 0x40
 8006904:	2301      	movs	r3, #1
 8006906:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800690a:	f383 8810 	msr	PRIMASK, r3
}
 800690e:	46c0      	nop			; (mov r8, r8)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	689a      	ldr	r2, [r3, #8]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	2101      	movs	r1, #1
 800691c:	438a      	bics	r2, r1
 800691e:	609a      	str	r2, [r3, #8]
 8006920:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006922:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006926:	f383 8810 	msr	PRIMASK, r3
}
 800692a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2220      	movs	r2, #32
 8006930:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2220      	movs	r2, #32
 8006936:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2274      	movs	r2, #116	; 0x74
 800693c:	2100      	movs	r1, #0
 800693e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006940:	2303      	movs	r3, #3
 8006942:	e067      	b.n	8006a14 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	2204      	movs	r2, #4
 800694c:	4013      	ands	r3, r2
 800694e:	d050      	beq.n	80069f2 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	69da      	ldr	r2, [r3, #28]
 8006956:	2380      	movs	r3, #128	; 0x80
 8006958:	011b      	lsls	r3, r3, #4
 800695a:	401a      	ands	r2, r3
 800695c:	2380      	movs	r3, #128	; 0x80
 800695e:	011b      	lsls	r3, r3, #4
 8006960:	429a      	cmp	r2, r3
 8006962:	d146      	bne.n	80069f2 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	2280      	movs	r2, #128	; 0x80
 800696a:	0112      	lsls	r2, r2, #4
 800696c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800696e:	f3ef 8310 	mrs	r3, PRIMASK
 8006972:	613b      	str	r3, [r7, #16]
  return(result);
 8006974:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006976:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006978:	2301      	movs	r3, #1
 800697a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	f383 8810 	msr	PRIMASK, r3
}
 8006982:	46c0      	nop			; (mov r8, r8)
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4923      	ldr	r1, [pc, #140]	; (8006a1c <UART_WaitOnFlagUntilTimeout+0x184>)
 8006990:	400a      	ands	r2, r1
 8006992:	601a      	str	r2, [r3, #0]
 8006994:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006996:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006998:	69bb      	ldr	r3, [r7, #24]
 800699a:	f383 8810 	msr	PRIMASK, r3
}
 800699e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069a0:	f3ef 8310 	mrs	r3, PRIMASK
 80069a4:	61fb      	str	r3, [r7, #28]
  return(result);
 80069a6:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80069aa:	2301      	movs	r3, #1
 80069ac:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069ae:	6a3b      	ldr	r3, [r7, #32]
 80069b0:	f383 8810 	msr	PRIMASK, r3
}
 80069b4:	46c0      	nop			; (mov r8, r8)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	689a      	ldr	r2, [r3, #8]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	2101      	movs	r1, #1
 80069c2:	438a      	bics	r2, r1
 80069c4:	609a      	str	r2, [r3, #8]
 80069c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069c8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069cc:	f383 8810 	msr	PRIMASK, r3
}
 80069d0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2220      	movs	r2, #32
 80069d6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2220      	movs	r2, #32
 80069dc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2280      	movs	r2, #128	; 0x80
 80069e2:	2120      	movs	r1, #32
 80069e4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2274      	movs	r2, #116	; 0x74
 80069ea:	2100      	movs	r1, #0
 80069ec:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80069ee:	2303      	movs	r3, #3
 80069f0:	e010      	b.n	8006a14 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	69db      	ldr	r3, [r3, #28]
 80069f8:	68ba      	ldr	r2, [r7, #8]
 80069fa:	4013      	ands	r3, r2
 80069fc:	68ba      	ldr	r2, [r7, #8]
 80069fe:	1ad3      	subs	r3, r2, r3
 8006a00:	425a      	negs	r2, r3
 8006a02:	4153      	adcs	r3, r2
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	001a      	movs	r2, r3
 8006a08:	1dfb      	adds	r3, r7, #7
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d100      	bne.n	8006a12 <UART_WaitOnFlagUntilTimeout+0x17a>
 8006a10:	e74b      	b.n	80068aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a12:	2300      	movs	r3, #0
}
 8006a14:	0018      	movs	r0, r3
 8006a16:	46bd      	mov	sp, r7
 8006a18:	b014      	add	sp, #80	; 0x50
 8006a1a:	bd80      	pop	{r7, pc}
 8006a1c:	fffffe5f 	.word	0xfffffe5f

08006a20 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b08c      	sub	sp, #48	; 0x30
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	60f8      	str	r0, [r7, #12]
 8006a28:	60b9      	str	r1, [r7, #8]
 8006a2a:	1dbb      	adds	r3, r7, #6
 8006a2c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	68ba      	ldr	r2, [r7, #8]
 8006a32:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	1dba      	adds	r2, r7, #6
 8006a38:	2158      	movs	r1, #88	; 0x58
 8006a3a:	8812      	ldrh	r2, [r2, #0]
 8006a3c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	1dba      	adds	r2, r7, #6
 8006a42:	215a      	movs	r1, #90	; 0x5a
 8006a44:	8812      	ldrh	r2, [r2, #0]
 8006a46:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	689a      	ldr	r2, [r3, #8]
 8006a52:	2380      	movs	r3, #128	; 0x80
 8006a54:	015b      	lsls	r3, r3, #5
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d10d      	bne.n	8006a76 <UART_Start_Receive_IT+0x56>
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	691b      	ldr	r3, [r3, #16]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d104      	bne.n	8006a6c <UART_Start_Receive_IT+0x4c>
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	225c      	movs	r2, #92	; 0x5c
 8006a66:	4943      	ldr	r1, [pc, #268]	; (8006b74 <UART_Start_Receive_IT+0x154>)
 8006a68:	5299      	strh	r1, [r3, r2]
 8006a6a:	e02e      	b.n	8006aca <UART_Start_Receive_IT+0xaa>
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	225c      	movs	r2, #92	; 0x5c
 8006a70:	21ff      	movs	r1, #255	; 0xff
 8006a72:	5299      	strh	r1, [r3, r2]
 8006a74:	e029      	b.n	8006aca <UART_Start_Receive_IT+0xaa>
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d10d      	bne.n	8006a9a <UART_Start_Receive_IT+0x7a>
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	691b      	ldr	r3, [r3, #16]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d104      	bne.n	8006a90 <UART_Start_Receive_IT+0x70>
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	225c      	movs	r2, #92	; 0x5c
 8006a8a:	21ff      	movs	r1, #255	; 0xff
 8006a8c:	5299      	strh	r1, [r3, r2]
 8006a8e:	e01c      	b.n	8006aca <UART_Start_Receive_IT+0xaa>
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	225c      	movs	r2, #92	; 0x5c
 8006a94:	217f      	movs	r1, #127	; 0x7f
 8006a96:	5299      	strh	r1, [r3, r2]
 8006a98:	e017      	b.n	8006aca <UART_Start_Receive_IT+0xaa>
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	689a      	ldr	r2, [r3, #8]
 8006a9e:	2380      	movs	r3, #128	; 0x80
 8006aa0:	055b      	lsls	r3, r3, #21
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d10d      	bne.n	8006ac2 <UART_Start_Receive_IT+0xa2>
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d104      	bne.n	8006ab8 <UART_Start_Receive_IT+0x98>
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	225c      	movs	r2, #92	; 0x5c
 8006ab2:	217f      	movs	r1, #127	; 0x7f
 8006ab4:	5299      	strh	r1, [r3, r2]
 8006ab6:	e008      	b.n	8006aca <UART_Start_Receive_IT+0xaa>
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	225c      	movs	r2, #92	; 0x5c
 8006abc:	213f      	movs	r1, #63	; 0x3f
 8006abe:	5299      	strh	r1, [r3, r2]
 8006ac0:	e003      	b.n	8006aca <UART_Start_Receive_IT+0xaa>
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	225c      	movs	r2, #92	; 0x5c
 8006ac6:	2100      	movs	r1, #0
 8006ac8:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2280      	movs	r2, #128	; 0x80
 8006ace:	2100      	movs	r1, #0
 8006ad0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2222      	movs	r2, #34	; 0x22
 8006ad6:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ad8:	f3ef 8310 	mrs	r3, PRIMASK
 8006adc:	61fb      	str	r3, [r7, #28]
  return(result);
 8006ade:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ae6:	6a3b      	ldr	r3, [r7, #32]
 8006ae8:	f383 8810 	msr	PRIMASK, r3
}
 8006aec:	46c0      	nop			; (mov r8, r8)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	689a      	ldr	r2, [r3, #8]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	2101      	movs	r1, #1
 8006afa:	430a      	orrs	r2, r1
 8006afc:	609a      	str	r2, [r3, #8]
 8006afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b00:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b04:	f383 8810 	msr	PRIMASK, r3
}
 8006b08:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	689a      	ldr	r2, [r3, #8]
 8006b0e:	2380      	movs	r3, #128	; 0x80
 8006b10:	015b      	lsls	r3, r3, #5
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d107      	bne.n	8006b26 <UART_Start_Receive_IT+0x106>
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	691b      	ldr	r3, [r3, #16]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d103      	bne.n	8006b26 <UART_Start_Receive_IT+0x106>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	4a15      	ldr	r2, [pc, #84]	; (8006b78 <UART_Start_Receive_IT+0x158>)
 8006b22:	665a      	str	r2, [r3, #100]	; 0x64
 8006b24:	e002      	b.n	8006b2c <UART_Start_Receive_IT+0x10c>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	4a14      	ldr	r2, [pc, #80]	; (8006b7c <UART_Start_Receive_IT+0x15c>)
 8006b2a:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2274      	movs	r2, #116	; 0x74
 8006b30:	2100      	movs	r1, #0
 8006b32:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b34:	f3ef 8310 	mrs	r3, PRIMASK
 8006b38:	613b      	str	r3, [r7, #16]
  return(result);
 8006b3a:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006b3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b3e:	2301      	movs	r3, #1
 8006b40:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	f383 8810 	msr	PRIMASK, r3
}
 8006b48:	46c0      	nop			; (mov r8, r8)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2190      	movs	r1, #144	; 0x90
 8006b56:	0049      	lsls	r1, r1, #1
 8006b58:	430a      	orrs	r2, r1
 8006b5a:	601a      	str	r2, [r3, #0]
 8006b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b5e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b60:	69bb      	ldr	r3, [r7, #24]
 8006b62:	f383 8810 	msr	PRIMASK, r3
}
 8006b66:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 8006b68:	2300      	movs	r3, #0
}
 8006b6a:	0018      	movs	r0, r3
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	b00c      	add	sp, #48	; 0x30
 8006b70:	bd80      	pop	{r7, pc}
 8006b72:	46c0      	nop			; (mov r8, r8)
 8006b74:	000001ff 	.word	0x000001ff
 8006b78:	08006e31 	.word	0x08006e31
 8006b7c:	08006cc9 	.word	0x08006cc9

08006b80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b08e      	sub	sp, #56	; 0x38
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b88:	f3ef 8310 	mrs	r3, PRIMASK
 8006b8c:	617b      	str	r3, [r7, #20]
  return(result);
 8006b8e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b90:	637b      	str	r3, [r7, #52]	; 0x34
 8006b92:	2301      	movs	r3, #1
 8006b94:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b96:	69bb      	ldr	r3, [r7, #24]
 8006b98:	f383 8810 	msr	PRIMASK, r3
}
 8006b9c:	46c0      	nop			; (mov r8, r8)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4925      	ldr	r1, [pc, #148]	; (8006c40 <UART_EndRxTransfer+0xc0>)
 8006baa:	400a      	ands	r2, r1
 8006bac:	601a      	str	r2, [r3, #0]
 8006bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bb0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bb2:	69fb      	ldr	r3, [r7, #28]
 8006bb4:	f383 8810 	msr	PRIMASK, r3
}
 8006bb8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bba:	f3ef 8310 	mrs	r3, PRIMASK
 8006bbe:	623b      	str	r3, [r7, #32]
  return(result);
 8006bc0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bc2:	633b      	str	r3, [r7, #48]	; 0x30
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bca:	f383 8810 	msr	PRIMASK, r3
}
 8006bce:	46c0      	nop			; (mov r8, r8)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	689a      	ldr	r2, [r3, #8]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2101      	movs	r1, #1
 8006bdc:	438a      	bics	r2, r1
 8006bde:	609a      	str	r2, [r3, #8]
 8006be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be6:	f383 8810 	msr	PRIMASK, r3
}
 8006bea:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d118      	bne.n	8006c26 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bf4:	f3ef 8310 	mrs	r3, PRIMASK
 8006bf8:	60bb      	str	r3, [r7, #8]
  return(result);
 8006bfa:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bfe:	2301      	movs	r3, #1
 8006c00:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	f383 8810 	msr	PRIMASK, r3
}
 8006c08:	46c0      	nop			; (mov r8, r8)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	2110      	movs	r1, #16
 8006c16:	438a      	bics	r2, r1
 8006c18:	601a      	str	r2, [r3, #0]
 8006c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c1c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	f383 8810 	msr	PRIMASK, r3
}
 8006c24:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2220      	movs	r2, #32
 8006c2a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2200      	movs	r2, #0
 8006c36:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006c38:	46c0      	nop			; (mov r8, r8)
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	b00e      	add	sp, #56	; 0x38
 8006c3e:	bd80      	pop	{r7, pc}
 8006c40:	fffffedf 	.word	0xfffffedf

08006c44 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b084      	sub	sp, #16
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c50:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	225a      	movs	r2, #90	; 0x5a
 8006c56:	2100      	movs	r1, #0
 8006c58:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2252      	movs	r2, #82	; 0x52
 8006c5e:	2100      	movs	r1, #0
 8006c60:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	0018      	movs	r0, r3
 8006c66:	f7ff fb1f 	bl	80062a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c6a:	46c0      	nop			; (mov r8, r8)
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	b004      	add	sp, #16
 8006c70:	bd80      	pop	{r7, pc}

08006c72 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c72:	b580      	push	{r7, lr}
 8006c74:	b086      	sub	sp, #24
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c7a:	f3ef 8310 	mrs	r3, PRIMASK
 8006c7e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006c80:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c82:	617b      	str	r3, [r7, #20]
 8006c84:	2301      	movs	r3, #1
 8006c86:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f383 8810 	msr	PRIMASK, r3
}
 8006c8e:	46c0      	nop			; (mov r8, r8)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	2140      	movs	r1, #64	; 0x40
 8006c9c:	438a      	bics	r2, r1
 8006c9e:	601a      	str	r2, [r3, #0]
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	f383 8810 	msr	PRIMASK, r3
}
 8006caa:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2220      	movs	r2, #32
 8006cb0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	0018      	movs	r0, r3
 8006cbc:	f7ff faec 	bl	8006298 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006cc0:	46c0      	nop			; (mov r8, r8)
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	b006      	add	sp, #24
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b090      	sub	sp, #64	; 0x40
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006cd0:	203e      	movs	r0, #62	; 0x3e
 8006cd2:	183b      	adds	r3, r7, r0
 8006cd4:	687a      	ldr	r2, [r7, #4]
 8006cd6:	215c      	movs	r1, #92	; 0x5c
 8006cd8:	5a52      	ldrh	r2, [r2, r1]
 8006cda:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ce0:	2b22      	cmp	r3, #34	; 0x22
 8006ce2:	d000      	beq.n	8006ce6 <UART_RxISR_8BIT+0x1e>
 8006ce4:	e095      	b.n	8006e12 <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	213c      	movs	r1, #60	; 0x3c
 8006cec:	187b      	adds	r3, r7, r1
 8006cee:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8006cf0:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006cf2:	187b      	adds	r3, r7, r1
 8006cf4:	881b      	ldrh	r3, [r3, #0]
 8006cf6:	b2da      	uxtb	r2, r3
 8006cf8:	183b      	adds	r3, r7, r0
 8006cfa:	881b      	ldrh	r3, [r3, #0]
 8006cfc:	b2d9      	uxtb	r1, r3
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d02:	400a      	ands	r2, r1
 8006d04:	b2d2      	uxtb	r2, r2
 8006d06:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d0c:	1c5a      	adds	r2, r3, #1
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	225a      	movs	r2, #90	; 0x5a
 8006d16:	5a9b      	ldrh	r3, [r3, r2]
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	3b01      	subs	r3, #1
 8006d1c:	b299      	uxth	r1, r3
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	225a      	movs	r2, #90	; 0x5a
 8006d22:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	225a      	movs	r2, #90	; 0x5a
 8006d28:	5a9b      	ldrh	r3, [r3, r2]
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d178      	bne.n	8006e22 <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d30:	f3ef 8310 	mrs	r3, PRIMASK
 8006d34:	61bb      	str	r3, [r7, #24]
  return(result);
 8006d36:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d38:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d3e:	69fb      	ldr	r3, [r7, #28]
 8006d40:	f383 8810 	msr	PRIMASK, r3
}
 8006d44:	46c0      	nop			; (mov r8, r8)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4936      	ldr	r1, [pc, #216]	; (8006e2c <UART_RxISR_8BIT+0x164>)
 8006d52:	400a      	ands	r2, r1
 8006d54:	601a      	str	r2, [r3, #0]
 8006d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d58:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d5a:	6a3b      	ldr	r3, [r7, #32]
 8006d5c:	f383 8810 	msr	PRIMASK, r3
}
 8006d60:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d62:	f3ef 8310 	mrs	r3, PRIMASK
 8006d66:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d6a:	637b      	str	r3, [r7, #52]	; 0x34
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d72:	f383 8810 	msr	PRIMASK, r3
}
 8006d76:	46c0      	nop			; (mov r8, r8)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	689a      	ldr	r2, [r3, #8]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	2101      	movs	r1, #1
 8006d84:	438a      	bics	r2, r1
 8006d86:	609a      	str	r2, [r3, #8]
 8006d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d8e:	f383 8810 	msr	PRIMASK, r3
}
 8006d92:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2220      	movs	r2, #32
 8006d98:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d12f      	bne.n	8006e08 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2200      	movs	r2, #0
 8006dac:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006dae:	f3ef 8310 	mrs	r3, PRIMASK
 8006db2:	60fb      	str	r3, [r7, #12]
  return(result);
 8006db4:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006db6:	633b      	str	r3, [r7, #48]	; 0x30
 8006db8:	2301      	movs	r3, #1
 8006dba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	f383 8810 	msr	PRIMASK, r3
}
 8006dc2:	46c0      	nop			; (mov r8, r8)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	2110      	movs	r1, #16
 8006dd0:	438a      	bics	r2, r1
 8006dd2:	601a      	str	r2, [r3, #0]
 8006dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	f383 8810 	msr	PRIMASK, r3
}
 8006dde:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	69db      	ldr	r3, [r3, #28]
 8006de6:	2210      	movs	r2, #16
 8006de8:	4013      	ands	r3, r2
 8006dea:	2b10      	cmp	r3, #16
 8006dec:	d103      	bne.n	8006df6 <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	2210      	movs	r2, #16
 8006df4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2258      	movs	r2, #88	; 0x58
 8006dfa:	5a9a      	ldrh	r2, [r3, r2]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	0011      	movs	r1, r2
 8006e00:	0018      	movs	r0, r3
 8006e02:	f7ff fa59 	bl	80062b8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006e06:	e00c      	b.n	8006e22 <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	0018      	movs	r0, r3
 8006e0c:	f7fb fc2e 	bl	800266c <HAL_UART_RxCpltCallback>
}
 8006e10:	e007      	b.n	8006e22 <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	699a      	ldr	r2, [r3, #24]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	2108      	movs	r1, #8
 8006e1e:	430a      	orrs	r2, r1
 8006e20:	619a      	str	r2, [r3, #24]
}
 8006e22:	46c0      	nop			; (mov r8, r8)
 8006e24:	46bd      	mov	sp, r7
 8006e26:	b010      	add	sp, #64	; 0x40
 8006e28:	bd80      	pop	{r7, pc}
 8006e2a:	46c0      	nop			; (mov r8, r8)
 8006e2c:	fffffedf 	.word	0xfffffedf

08006e30 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b090      	sub	sp, #64	; 0x40
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006e38:	203e      	movs	r0, #62	; 0x3e
 8006e3a:	183b      	adds	r3, r7, r0
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	215c      	movs	r1, #92	; 0x5c
 8006e40:	5a52      	ldrh	r2, [r2, r1]
 8006e42:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e48:	2b22      	cmp	r3, #34	; 0x22
 8006e4a:	d000      	beq.n	8006e4e <UART_RxISR_16BIT+0x1e>
 8006e4c:	e095      	b.n	8006f7a <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	213c      	movs	r1, #60	; 0x3c
 8006e54:	187b      	adds	r3, r7, r1
 8006e56:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8006e58:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e5e:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8006e60:	187b      	adds	r3, r7, r1
 8006e62:	183a      	adds	r2, r7, r0
 8006e64:	881b      	ldrh	r3, [r3, #0]
 8006e66:	8812      	ldrh	r2, [r2, #0]
 8006e68:	4013      	ands	r3, r2
 8006e6a:	b29a      	uxth	r2, r3
 8006e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e6e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e74:	1c9a      	adds	r2, r3, #2
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	225a      	movs	r2, #90	; 0x5a
 8006e7e:	5a9b      	ldrh	r3, [r3, r2]
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	3b01      	subs	r3, #1
 8006e84:	b299      	uxth	r1, r3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	225a      	movs	r2, #90	; 0x5a
 8006e8a:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	225a      	movs	r2, #90	; 0x5a
 8006e90:	5a9b      	ldrh	r3, [r3, r2]
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d178      	bne.n	8006f8a <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e98:	f3ef 8310 	mrs	r3, PRIMASK
 8006e9c:	617b      	str	r3, [r7, #20]
  return(result);
 8006e9e:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ea0:	637b      	str	r3, [r7, #52]	; 0x34
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	f383 8810 	msr	PRIMASK, r3
}
 8006eac:	46c0      	nop			; (mov r8, r8)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	681a      	ldr	r2, [r3, #0]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4936      	ldr	r1, [pc, #216]	; (8006f94 <UART_RxISR_16BIT+0x164>)
 8006eba:	400a      	ands	r2, r1
 8006ebc:	601a      	str	r2, [r3, #0]
 8006ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ec0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	f383 8810 	msr	PRIMASK, r3
}
 8006ec8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006eca:	f3ef 8310 	mrs	r3, PRIMASK
 8006ece:	623b      	str	r3, [r7, #32]
  return(result);
 8006ed0:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ed2:	633b      	str	r3, [r7, #48]	; 0x30
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eda:	f383 8810 	msr	PRIMASK, r3
}
 8006ede:	46c0      	nop			; (mov r8, r8)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	689a      	ldr	r2, [r3, #8]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	2101      	movs	r1, #1
 8006eec:	438a      	bics	r2, r1
 8006eee:	609a      	str	r2, [r3, #8]
 8006ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef6:	f383 8810 	msr	PRIMASK, r3
}
 8006efa:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2220      	movs	r2, #32
 8006f00:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d12f      	bne.n	8006f70 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f16:	f3ef 8310 	mrs	r3, PRIMASK
 8006f1a:	60bb      	str	r3, [r7, #8]
  return(result);
 8006f1c:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f20:	2301      	movs	r3, #1
 8006f22:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f383 8810 	msr	PRIMASK, r3
}
 8006f2a:	46c0      	nop			; (mov r8, r8)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	2110      	movs	r1, #16
 8006f38:	438a      	bics	r2, r1
 8006f3a:	601a      	str	r2, [r3, #0]
 8006f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	f383 8810 	msr	PRIMASK, r3
}
 8006f46:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	69db      	ldr	r3, [r3, #28]
 8006f4e:	2210      	movs	r2, #16
 8006f50:	4013      	ands	r3, r2
 8006f52:	2b10      	cmp	r3, #16
 8006f54:	d103      	bne.n	8006f5e <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	2210      	movs	r2, #16
 8006f5c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2258      	movs	r2, #88	; 0x58
 8006f62:	5a9a      	ldrh	r2, [r3, r2]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	0011      	movs	r1, r2
 8006f68:	0018      	movs	r0, r3
 8006f6a:	f7ff f9a5 	bl	80062b8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006f6e:	e00c      	b.n	8006f8a <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	0018      	movs	r0, r3
 8006f74:	f7fb fb7a 	bl	800266c <HAL_UART_RxCpltCallback>
}
 8006f78:	e007      	b.n	8006f8a <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	699a      	ldr	r2, [r3, #24]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	2108      	movs	r1, #8
 8006f86:	430a      	orrs	r2, r1
 8006f88:	619a      	str	r2, [r3, #24]
}
 8006f8a:	46c0      	nop			; (mov r8, r8)
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	b010      	add	sp, #64	; 0x40
 8006f90:	bd80      	pop	{r7, pc}
 8006f92:	46c0      	nop			; (mov r8, r8)
 8006f94:	fffffedf 	.word	0xfffffedf

08006f98 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b082      	sub	sp, #8
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006fa0:	46c0      	nop			; (mov r8, r8)
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	b002      	add	sp, #8
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <__libc_init_array>:
 8006fa8:	b570      	push	{r4, r5, r6, lr}
 8006faa:	2600      	movs	r6, #0
 8006fac:	4d0c      	ldr	r5, [pc, #48]	; (8006fe0 <__libc_init_array+0x38>)
 8006fae:	4c0d      	ldr	r4, [pc, #52]	; (8006fe4 <__libc_init_array+0x3c>)
 8006fb0:	1b64      	subs	r4, r4, r5
 8006fb2:	10a4      	asrs	r4, r4, #2
 8006fb4:	42a6      	cmp	r6, r4
 8006fb6:	d109      	bne.n	8006fcc <__libc_init_array+0x24>
 8006fb8:	2600      	movs	r6, #0
 8006fba:	f000 f82b 	bl	8007014 <_init>
 8006fbe:	4d0a      	ldr	r5, [pc, #40]	; (8006fe8 <__libc_init_array+0x40>)
 8006fc0:	4c0a      	ldr	r4, [pc, #40]	; (8006fec <__libc_init_array+0x44>)
 8006fc2:	1b64      	subs	r4, r4, r5
 8006fc4:	10a4      	asrs	r4, r4, #2
 8006fc6:	42a6      	cmp	r6, r4
 8006fc8:	d105      	bne.n	8006fd6 <__libc_init_array+0x2e>
 8006fca:	bd70      	pop	{r4, r5, r6, pc}
 8006fcc:	00b3      	lsls	r3, r6, #2
 8006fce:	58eb      	ldr	r3, [r5, r3]
 8006fd0:	4798      	blx	r3
 8006fd2:	3601      	adds	r6, #1
 8006fd4:	e7ee      	b.n	8006fb4 <__libc_init_array+0xc>
 8006fd6:	00b3      	lsls	r3, r6, #2
 8006fd8:	58eb      	ldr	r3, [r5, r3]
 8006fda:	4798      	blx	r3
 8006fdc:	3601      	adds	r6, #1
 8006fde:	e7f2      	b.n	8006fc6 <__libc_init_array+0x1e>
 8006fe0:	080070f0 	.word	0x080070f0
 8006fe4:	080070f0 	.word	0x080070f0
 8006fe8:	080070f0 	.word	0x080070f0
 8006fec:	080070f4 	.word	0x080070f4

08006ff0 <memcpy>:
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	b510      	push	{r4, lr}
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d100      	bne.n	8006ffa <memcpy+0xa>
 8006ff8:	bd10      	pop	{r4, pc}
 8006ffa:	5ccc      	ldrb	r4, [r1, r3]
 8006ffc:	54c4      	strb	r4, [r0, r3]
 8006ffe:	3301      	adds	r3, #1
 8007000:	e7f8      	b.n	8006ff4 <memcpy+0x4>

08007002 <memset>:
 8007002:	0003      	movs	r3, r0
 8007004:	1882      	adds	r2, r0, r2
 8007006:	4293      	cmp	r3, r2
 8007008:	d100      	bne.n	800700c <memset+0xa>
 800700a:	4770      	bx	lr
 800700c:	7019      	strb	r1, [r3, #0]
 800700e:	3301      	adds	r3, #1
 8007010:	e7f9      	b.n	8007006 <memset+0x4>
	...

08007014 <_init>:
 8007014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007016:	46c0      	nop			; (mov r8, r8)
 8007018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800701a:	bc08      	pop	{r3}
 800701c:	469e      	mov	lr, r3
 800701e:	4770      	bx	lr

08007020 <_fini>:
 8007020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007022:	46c0      	nop			; (mov r8, r8)
 8007024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007026:	bc08      	pop	{r3}
 8007028:	469e      	mov	lr, r3
 800702a:	4770      	bx	lr
