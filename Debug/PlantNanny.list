
PlantNanny.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c88  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003d44  08003d44  00013d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d7c  08003d7c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003d7c  08003d7c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d7c  08003d7c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d7c  08003d7c  00013d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d80  08003d80  00013d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003d84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  2000000c  08003d90  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08003d90  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d22e  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c1c  00000000  00000000  0002d262  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a58  00000000  00000000  0002ee80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009a0  00000000  00000000  0002f8d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b348  00000000  00000000  00030278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dcbe  00000000  00000000  0004b5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a46bd  00000000  00000000  0005927e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fd93b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002464  00000000  00000000  000fd990  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003d2c 	.word	0x08003d2c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08003d2c 	.word	0x08003d2c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b590      	push	{r4, r7, lr}
 800021e:	b085      	sub	sp, #20
 8000220:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000222:	f000 fc69 	bl	8000af8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000226:	f000 f8f1 	bl	800040c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022a:	f000 fa1f 	bl	800066c <MX_GPIO_Init>
  MX_ADC_Init();
 800022e:	f000 f951 	bl	80004d4 <MX_ADC_Init>
  MX_USART1_UART_Init();
 8000232:	f000 f9eb 	bl	800060c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000236:	f000 f9a9 	bl	800058c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADCEx_Calibration_Start(&hadc);
 800023a:	4b70      	ldr	r3, [pc, #448]	; (80003fc <main+0x1e0>)
 800023c:	0018      	movs	r0, r3
 800023e:	f001 f8ad 	bl	800139c <HAL_ADCEx_Calibration_Start>
  CCS811_begin();
 8000242:	f000 fa85 	bl	8000750 <CCS811_begin>
  SHT30_begin();
 8000246:	f000 fad5 	bl	80007f4 <SHT30_begin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t test = 0;
 800024a:	230f      	movs	r3, #15
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	2200      	movs	r2, #0
 8000250:	701a      	strb	r2, [r3, #0]
  uint8_t toggle = 0;
 8000252:	230e      	movs	r3, #14
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	2200      	movs	r2, #0
 8000258:	701a      	strb	r2, [r3, #0]
  while (1)
  {
//    HAL_WWDG_Refresh(&hwwdg);

    uint16_t co2_value = CCS811_get_eCO2();
 800025a:	230c      	movs	r3, #12
 800025c:	18fc      	adds	r4, r7, r3
 800025e:	f000 faa3 	bl	80007a8 <CCS811_get_eCO2>
 8000262:	0003      	movs	r3, r0
 8000264:	8023      	strh	r3, [r4, #0]
    uint16_t temp = SHT30_get_temp();
 8000266:	230a      	movs	r3, #10
 8000268:	18fc      	adds	r4, r7, r3
 800026a:	f000 fac9 	bl	8000800 <SHT30_get_temp>
 800026e:	0003      	movs	r3, r0
 8000270:	8023      	strh	r3, [r4, #0]
	  HAL_ADC_Start(&hadc);
 8000272:	4b62      	ldr	r3, [pc, #392]	; (80003fc <main+0x1e0>)
 8000274:	0018      	movs	r0, r3
 8000276:	f000 fe07 	bl	8000e88 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc, 1000);
 800027a:	23fa      	movs	r3, #250	; 0xfa
 800027c:	009a      	lsls	r2, r3, #2
 800027e:	4b5f      	ldr	r3, [pc, #380]	; (80003fc <main+0x1e0>)
 8000280:	0011      	movs	r1, r2
 8000282:	0018      	movs	r0, r3
 8000284:	f000 fe54 	bl	8000f30 <HAL_ADC_PollForConversion>
	  uint32_t raw = HAL_ADC_GetValue(&hadc);
 8000288:	4b5c      	ldr	r3, [pc, #368]	; (80003fc <main+0x1e0>)
 800028a:	0018      	movs	r0, r3
 800028c:	f000 fee8 	bl	8001060 <HAL_ADC_GetValue>
 8000290:	0003      	movs	r3, r0
 8000292:	607b      	str	r3, [r7, #4]

	  uint8_t data = raw & 0xff;
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	b2da      	uxtb	r2, r3
 8000298:	1cfb      	adds	r3, r7, #3
 800029a:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit(&huart1, &data, 1, 1000);
 800029c:	23fa      	movs	r3, #250	; 0xfa
 800029e:	009b      	lsls	r3, r3, #2
 80002a0:	1cf9      	adds	r1, r7, #3
 80002a2:	4857      	ldr	r0, [pc, #348]	; (8000400 <main+0x1e4>)
 80002a4:	2201      	movs	r2, #1
 80002a6:	f003 f8c3 	bl	8003430 <HAL_UART_Transmit>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, (test&1)>0);
 80002aa:	240f      	movs	r4, #15
 80002ac:	193b      	adds	r3, r7, r4
 80002ae:	781b      	ldrb	r3, [r3, #0]
 80002b0:	2201      	movs	r2, #1
 80002b2:	4013      	ands	r3, r2
 80002b4:	17da      	asrs	r2, r3, #31
 80002b6:	1ad3      	subs	r3, r2, r3
 80002b8:	0fdb      	lsrs	r3, r3, #31
 80002ba:	b2db      	uxtb	r3, r3
 80002bc:	001a      	movs	r2, r3
 80002be:	4b51      	ldr	r3, [pc, #324]	; (8000404 <main+0x1e8>)
 80002c0:	2140      	movs	r1, #64	; 0x40
 80002c2:	0018      	movs	r0, r3
 80002c4:	f001 fb3e 	bl	8001944 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, (test&2)>0);
 80002c8:	193b      	adds	r3, r7, r4
 80002ca:	781b      	ldrb	r3, [r3, #0]
 80002cc:	2202      	movs	r2, #2
 80002ce:	4013      	ands	r3, r2
 80002d0:	17da      	asrs	r2, r3, #31
 80002d2:	1ad3      	subs	r3, r2, r3
 80002d4:	0fdb      	lsrs	r3, r3, #31
 80002d6:	b2db      	uxtb	r3, r3
 80002d8:	001a      	movs	r2, r3
 80002da:	4b4a      	ldr	r3, [pc, #296]	; (8000404 <main+0x1e8>)
 80002dc:	2180      	movs	r1, #128	; 0x80
 80002de:	0018      	movs	r0, r3
 80002e0:	f001 fb30 	bl	8001944 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, (test&4)>0);
 80002e4:	193b      	adds	r3, r7, r4
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	2204      	movs	r2, #4
 80002ea:	4013      	ands	r3, r2
 80002ec:	17da      	asrs	r2, r3, #31
 80002ee:	1ad3      	subs	r3, r2, r3
 80002f0:	0fdb      	lsrs	r3, r3, #31
 80002f2:	b2db      	uxtb	r3, r3
 80002f4:	001a      	movs	r2, r3
 80002f6:	2380      	movs	r3, #128	; 0x80
 80002f8:	005b      	lsls	r3, r3, #1
 80002fa:	4842      	ldr	r0, [pc, #264]	; (8000404 <main+0x1e8>)
 80002fc:	0019      	movs	r1, r3
 80002fe:	f001 fb21 	bl	8001944 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, (test&8)>0);
 8000302:	193b      	adds	r3, r7, r4
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	2208      	movs	r2, #8
 8000308:	4013      	ands	r3, r2
 800030a:	17da      	asrs	r2, r3, #31
 800030c:	1ad3      	subs	r3, r2, r3
 800030e:	0fdb      	lsrs	r3, r3, #31
 8000310:	b2db      	uxtb	r3, r3
 8000312:	001a      	movs	r2, r3
 8000314:	2380      	movs	r3, #128	; 0x80
 8000316:	009b      	lsls	r3, r3, #2
 8000318:	483a      	ldr	r0, [pc, #232]	; (8000404 <main+0x1e8>)
 800031a:	0019      	movs	r1, r3
 800031c:	f001 fb12 	bl	8001944 <HAL_GPIO_WritePin>

	  if (data < 0xAA)
 8000320:	1cfb      	adds	r3, r7, #3
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	2ba9      	cmp	r3, #169	; 0xa9
 8000326:	d807      	bhi.n	8000338 <main+0x11c>
	  {
	    HAL_GPIO_WritePin(water_GPIO_Port, water_Pin, GPIO_PIN_SET);
 8000328:	2390      	movs	r3, #144	; 0x90
 800032a:	05db      	lsls	r3, r3, #23
 800032c:	2201      	movs	r2, #1
 800032e:	2120      	movs	r1, #32
 8000330:	0018      	movs	r0, r3
 8000332:	f001 fb07 	bl	8001944 <HAL_GPIO_WritePin>
 8000336:	e006      	b.n	8000346 <main+0x12a>
	  }
	  else
	  {
	    HAL_GPIO_WritePin(water_GPIO_Port, water_Pin, GPIO_PIN_RESET);
 8000338:	2390      	movs	r3, #144	; 0x90
 800033a:	05db      	lsls	r3, r3, #23
 800033c:	2200      	movs	r2, #0
 800033e:	2120      	movs	r1, #32
 8000340:	0018      	movs	r0, r3
 8000342:	f001 faff 	bl	8001944 <HAL_GPIO_WritePin>
	  }

	  if (co2_value > 500)
 8000346:	230c      	movs	r3, #12
 8000348:	18fb      	adds	r3, r7, r3
 800034a:	881a      	ldrh	r2, [r3, #0]
 800034c:	23fa      	movs	r3, #250	; 0xfa
 800034e:	005b      	lsls	r3, r3, #1
 8000350:	429a      	cmp	r2, r3
 8000352:	d907      	bls.n	8000364 <main+0x148>
	  {
	    HAL_GPIO_WritePin(air_GPIO_Port, air_Pin, GPIO_PIN_SET);
 8000354:	2390      	movs	r3, #144	; 0x90
 8000356:	05db      	lsls	r3, r3, #23
 8000358:	2201      	movs	r2, #1
 800035a:	2180      	movs	r1, #128	; 0x80
 800035c:	0018      	movs	r0, r3
 800035e:	f001 faf1 	bl	8001944 <HAL_GPIO_WritePin>
 8000362:	e006      	b.n	8000372 <main+0x156>
	  }
	  else
	  {
	    HAL_GPIO_WritePin(air_GPIO_Port, air_Pin, GPIO_PIN_RESET);
 8000364:	2390      	movs	r3, #144	; 0x90
 8000366:	05db      	lsls	r3, r3, #23
 8000368:	2200      	movs	r2, #0
 800036a:	2180      	movs	r1, #128	; 0x80
 800036c:	0018      	movs	r0, r3
 800036e:	f001 fae9 	bl	8001944 <HAL_GPIO_WritePin>
	  }

	  if (temp > 29000)
 8000372:	230a      	movs	r3, #10
 8000374:	18fb      	adds	r3, r7, r3
 8000376:	881b      	ldrh	r3, [r3, #0]
 8000378:	4a23      	ldr	r2, [pc, #140]	; (8000408 <main+0x1ec>)
 800037a:	4293      	cmp	r3, r2
 800037c:	d907      	bls.n	800038e <main+0x172>
    {
      HAL_GPIO_WritePin(heat_GPIO_Port, heat_Pin, GPIO_PIN_SET);
 800037e:	2390      	movs	r3, #144	; 0x90
 8000380:	05db      	lsls	r3, r3, #23
 8000382:	2201      	movs	r2, #1
 8000384:	2110      	movs	r1, #16
 8000386:	0018      	movs	r0, r3
 8000388:	f001 fadc 	bl	8001944 <HAL_GPIO_WritePin>
 800038c:	e006      	b.n	800039c <main+0x180>
    }
    else
    {
      HAL_GPIO_WritePin(heat_GPIO_Port, heat_Pin, GPIO_PIN_RESET);
 800038e:	2390      	movs	r3, #144	; 0x90
 8000390:	05db      	lsls	r3, r3, #23
 8000392:	2200      	movs	r2, #0
 8000394:	2110      	movs	r1, #16
 8000396:	0018      	movs	r0, r3
 8000398:	f001 fad4 	bl	8001944 <HAL_GPIO_WritePin>
    }

	  HAL_Delay(250);
 800039c:	20fa      	movs	r0, #250	; 0xfa
 800039e:	f000 fc0f 	bl	8000bc0 <HAL_Delay>
	  if (toggle) {
 80003a2:	230e      	movs	r3, #14
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d006      	beq.n	80003ba <main+0x19e>
		  test = (test-1);
 80003ac:	220f      	movs	r2, #15
 80003ae:	18bb      	adds	r3, r7, r2
 80003b0:	18ba      	adds	r2, r7, r2
 80003b2:	7812      	ldrb	r2, [r2, #0]
 80003b4:	3a01      	subs	r2, #1
 80003b6:	701a      	strb	r2, [r3, #0]
 80003b8:	e005      	b.n	80003c6 <main+0x1aa>
	  } else {
		  test = (test+1);
 80003ba:	220f      	movs	r2, #15
 80003bc:	18bb      	adds	r3, r7, r2
 80003be:	18ba      	adds	r2, r7, r2
 80003c0:	7812      	ldrb	r2, [r2, #0]
 80003c2:	3201      	adds	r2, #1
 80003c4:	701a      	strb	r2, [r3, #0]
	  }

	  if ((test & 0xF) == 15 || (test & 0xF) == 0) {
 80003c6:	210f      	movs	r1, #15
 80003c8:	187b      	adds	r3, r7, r1
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	220f      	movs	r2, #15
 80003ce:	4013      	ands	r3, r2
 80003d0:	2b0f      	cmp	r3, #15
 80003d2:	d005      	beq.n	80003e0 <main+0x1c4>
 80003d4:	187b      	adds	r3, r7, r1
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	220f      	movs	r2, #15
 80003da:	4013      	ands	r3, r2
 80003dc:	d000      	beq.n	80003e0 <main+0x1c4>
 80003de:	e73c      	b.n	800025a <main+0x3e>
		  toggle ^= 1;
 80003e0:	220e      	movs	r2, #14
 80003e2:	18bb      	adds	r3, r7, r2
 80003e4:	18ba      	adds	r2, r7, r2
 80003e6:	7812      	ldrb	r2, [r2, #0]
 80003e8:	2101      	movs	r1, #1
 80003ea:	404a      	eors	r2, r1
 80003ec:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_TogglePin(light_GPIO_Port, light_Pin);
 80003ee:	2390      	movs	r3, #144	; 0x90
 80003f0:	05db      	lsls	r3, r3, #23
 80003f2:	2140      	movs	r1, #64	; 0x40
 80003f4:	0018      	movs	r0, r3
 80003f6:	f001 fac2 	bl	800197e <HAL_GPIO_TogglePin>
  {
 80003fa:	e72e      	b.n	800025a <main+0x3e>
 80003fc:	200000f8 	.word	0x200000f8
 8000400:	20000074 	.word	0x20000074
 8000404:	48000800 	.word	0x48000800
 8000408:	00007148 	.word	0x00007148

0800040c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800040c:	b590      	push	{r4, r7, lr}
 800040e:	b099      	sub	sp, #100	; 0x64
 8000410:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000412:	242c      	movs	r4, #44	; 0x2c
 8000414:	193b      	adds	r3, r7, r4
 8000416:	0018      	movs	r0, r3
 8000418:	2334      	movs	r3, #52	; 0x34
 800041a:	001a      	movs	r2, r3
 800041c:	2100      	movs	r1, #0
 800041e:	f003 fc7d 	bl	8003d1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000422:	231c      	movs	r3, #28
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	0018      	movs	r0, r3
 8000428:	2310      	movs	r3, #16
 800042a:	001a      	movs	r2, r3
 800042c:	2100      	movs	r1, #0
 800042e:	f003 fc75 	bl	8003d1c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000432:	003b      	movs	r3, r7
 8000434:	0018      	movs	r0, r3
 8000436:	231c      	movs	r3, #28
 8000438:	001a      	movs	r2, r3
 800043a:	2100      	movs	r1, #0
 800043c:	f003 fc6e 	bl	8003d1c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8000440:	0021      	movs	r1, r4
 8000442:	187b      	adds	r3, r7, r1
 8000444:	2232      	movs	r2, #50	; 0x32
 8000446:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000448:	187b      	adds	r3, r7, r1
 800044a:	2201      	movs	r2, #1
 800044c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800044e:	187b      	adds	r3, r7, r1
 8000450:	2201      	movs	r2, #1
 8000452:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000454:	187b      	adds	r3, r7, r1
 8000456:	2201      	movs	r2, #1
 8000458:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800045a:	187b      	adds	r3, r7, r1
 800045c:	2210      	movs	r2, #16
 800045e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000460:	187b      	adds	r3, r7, r1
 8000462:	2210      	movs	r2, #16
 8000464:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000466:	187b      	adds	r3, r7, r1
 8000468:	2200      	movs	r2, #0
 800046a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800046c:	187b      	adds	r3, r7, r1
 800046e:	0018      	movs	r0, r3
 8000470:	f002 f98a 	bl	8002788 <HAL_RCC_OscConfig>
 8000474:	1e03      	subs	r3, r0, #0
 8000476:	d001      	beq.n	800047c <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000478:	f000 f9ec 	bl	8000854 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800047c:	211c      	movs	r1, #28
 800047e:	187b      	adds	r3, r7, r1
 8000480:	2207      	movs	r2, #7
 8000482:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8000484:	187b      	adds	r3, r7, r1
 8000486:	2203      	movs	r2, #3
 8000488:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800048a:	187b      	adds	r3, r7, r1
 800048c:	2200      	movs	r2, #0
 800048e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000490:	187b      	adds	r3, r7, r1
 8000492:	2200      	movs	r2, #0
 8000494:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000496:	187b      	adds	r3, r7, r1
 8000498:	2101      	movs	r1, #1
 800049a:	0018      	movs	r0, r3
 800049c:	f002 fcfa 	bl	8002e94 <HAL_RCC_ClockConfig>
 80004a0:	1e03      	subs	r3, r0, #0
 80004a2:	d001      	beq.n	80004a8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80004a4:	f000 f9d6 	bl	8000854 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 80004a8:	003b      	movs	r3, r7
 80004aa:	2221      	movs	r2, #33	; 0x21
 80004ac:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80004ae:	003b      	movs	r3, r7
 80004b0:	2200      	movs	r2, #0
 80004b2:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80004b4:	003b      	movs	r3, r7
 80004b6:	2200      	movs	r2, #0
 80004b8:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004ba:	003b      	movs	r3, r7
 80004bc:	0018      	movs	r0, r3
 80004be:	f002 fe63 	bl	8003188 <HAL_RCCEx_PeriphCLKConfig>
 80004c2:	1e03      	subs	r3, r0, #0
 80004c4:	d001      	beq.n	80004ca <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80004c6:	f000 f9c5 	bl	8000854 <Error_Handler>
  }
}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	46bd      	mov	sp, r7
 80004ce:	b019      	add	sp, #100	; 0x64
 80004d0:	bd90      	pop	{r4, r7, pc}
	...

080004d4 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b084      	sub	sp, #16
 80004d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004da:	1d3b      	adds	r3, r7, #4
 80004dc:	0018      	movs	r0, r3
 80004de:	230c      	movs	r3, #12
 80004e0:	001a      	movs	r2, r3
 80004e2:	2100      	movs	r1, #0
 80004e4:	f003 fc1a 	bl	8003d1c <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80004e8:	4b26      	ldr	r3, [pc, #152]	; (8000584 <MX_ADC_Init+0xb0>)
 80004ea:	4a27      	ldr	r2, [pc, #156]	; (8000588 <MX_ADC_Init+0xb4>)
 80004ec:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80004ee:	4b25      	ldr	r3, [pc, #148]	; (8000584 <MX_ADC_Init+0xb0>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_8B;
 80004f4:	4b23      	ldr	r3, [pc, #140]	; (8000584 <MX_ADC_Init+0xb0>)
 80004f6:	2210      	movs	r2, #16
 80004f8:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004fa:	4b22      	ldr	r3, [pc, #136]	; (8000584 <MX_ADC_Init+0xb0>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000500:	4b20      	ldr	r3, [pc, #128]	; (8000584 <MX_ADC_Init+0xb0>)
 8000502:	2201      	movs	r2, #1
 8000504:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000506:	4b1f      	ldr	r3, [pc, #124]	; (8000584 <MX_ADC_Init+0xb0>)
 8000508:	2204      	movs	r2, #4
 800050a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800050c:	4b1d      	ldr	r3, [pc, #116]	; (8000584 <MX_ADC_Init+0xb0>)
 800050e:	2200      	movs	r2, #0
 8000510:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000512:	4b1c      	ldr	r3, [pc, #112]	; (8000584 <MX_ADC_Init+0xb0>)
 8000514:	2200      	movs	r2, #0
 8000516:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000518:	4b1a      	ldr	r3, [pc, #104]	; (8000584 <MX_ADC_Init+0xb0>)
 800051a:	2200      	movs	r2, #0
 800051c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800051e:	4b19      	ldr	r3, [pc, #100]	; (8000584 <MX_ADC_Init+0xb0>)
 8000520:	2200      	movs	r2, #0
 8000522:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000524:	4b17      	ldr	r3, [pc, #92]	; (8000584 <MX_ADC_Init+0xb0>)
 8000526:	22c2      	movs	r2, #194	; 0xc2
 8000528:	32ff      	adds	r2, #255	; 0xff
 800052a:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800052c:	4b15      	ldr	r3, [pc, #84]	; (8000584 <MX_ADC_Init+0xb0>)
 800052e:	2200      	movs	r2, #0
 8000530:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000532:	4b14      	ldr	r3, [pc, #80]	; (8000584 <MX_ADC_Init+0xb0>)
 8000534:	2224      	movs	r2, #36	; 0x24
 8000536:	2100      	movs	r1, #0
 8000538:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800053a:	4b12      	ldr	r3, [pc, #72]	; (8000584 <MX_ADC_Init+0xb0>)
 800053c:	2201      	movs	r2, #1
 800053e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000540:	4b10      	ldr	r3, [pc, #64]	; (8000584 <MX_ADC_Init+0xb0>)
 8000542:	0018      	movs	r0, r3
 8000544:	f000 fb60 	bl	8000c08 <HAL_ADC_Init>
 8000548:	1e03      	subs	r3, r0, #0
 800054a:	d001      	beq.n	8000550 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 800054c:	f000 f982 	bl	8000854 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000550:	1d3b      	adds	r3, r7, #4
 8000552:	2200      	movs	r2, #0
 8000554:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000556:	1d3b      	adds	r3, r7, #4
 8000558:	2280      	movs	r2, #128	; 0x80
 800055a:	0152      	lsls	r2, r2, #5
 800055c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800055e:	1d3b      	adds	r3, r7, #4
 8000560:	2280      	movs	r2, #128	; 0x80
 8000562:	0552      	lsls	r2, r2, #21
 8000564:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000566:	1d3a      	adds	r2, r7, #4
 8000568:	4b06      	ldr	r3, [pc, #24]	; (8000584 <MX_ADC_Init+0xb0>)
 800056a:	0011      	movs	r1, r2
 800056c:	0018      	movs	r0, r3
 800056e:	f000 fd83 	bl	8001078 <HAL_ADC_ConfigChannel>
 8000572:	1e03      	subs	r3, r0, #0
 8000574:	d001      	beq.n	800057a <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000576:	f000 f96d 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	46bd      	mov	sp, r7
 800057e:	b004      	add	sp, #16
 8000580:	bd80      	pop	{r7, pc}
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	200000f8 	.word	0x200000f8
 8000588:	40012400 	.word	0x40012400

0800058c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000590:	4b1b      	ldr	r3, [pc, #108]	; (8000600 <MX_I2C1_Init+0x74>)
 8000592:	4a1c      	ldr	r2, [pc, #112]	; (8000604 <MX_I2C1_Init+0x78>)
 8000594:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000596:	4b1a      	ldr	r3, [pc, #104]	; (8000600 <MX_I2C1_Init+0x74>)
 8000598:	4a1b      	ldr	r2, [pc, #108]	; (8000608 <MX_I2C1_Init+0x7c>)
 800059a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800059c:	4b18      	ldr	r3, [pc, #96]	; (8000600 <MX_I2C1_Init+0x74>)
 800059e:	2200      	movs	r2, #0
 80005a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005a2:	4b17      	ldr	r3, [pc, #92]	; (8000600 <MX_I2C1_Init+0x74>)
 80005a4:	2201      	movs	r2, #1
 80005a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005a8:	4b15      	ldr	r3, [pc, #84]	; (8000600 <MX_I2C1_Init+0x74>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005ae:	4b14      	ldr	r3, [pc, #80]	; (8000600 <MX_I2C1_Init+0x74>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005b4:	4b12      	ldr	r3, [pc, #72]	; (8000600 <MX_I2C1_Init+0x74>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005ba:	4b11      	ldr	r3, [pc, #68]	; (8000600 <MX_I2C1_Init+0x74>)
 80005bc:	2200      	movs	r2, #0
 80005be:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005c0:	4b0f      	ldr	r3, [pc, #60]	; (8000600 <MX_I2C1_Init+0x74>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005c6:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <MX_I2C1_Init+0x74>)
 80005c8:	0018      	movs	r0, r3
 80005ca:	f001 f9f3 	bl	80019b4 <HAL_I2C_Init>
 80005ce:	1e03      	subs	r3, r0, #0
 80005d0:	d001      	beq.n	80005d6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80005d2:	f000 f93f 	bl	8000854 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005d6:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <MX_I2C1_Init+0x74>)
 80005d8:	2100      	movs	r1, #0
 80005da:	0018      	movs	r0, r3
 80005dc:	f002 f83c 	bl	8002658 <HAL_I2CEx_ConfigAnalogFilter>
 80005e0:	1e03      	subs	r3, r0, #0
 80005e2:	d001      	beq.n	80005e8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80005e4:	f000 f936 	bl	8000854 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005e8:	4b05      	ldr	r3, [pc, #20]	; (8000600 <MX_I2C1_Init+0x74>)
 80005ea:	2100      	movs	r1, #0
 80005ec:	0018      	movs	r0, r3
 80005ee:	f002 f87f 	bl	80026f0 <HAL_I2CEx_ConfigDigitalFilter>
 80005f2:	1e03      	subs	r3, r0, #0
 80005f4:	d001      	beq.n	80005fa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80005f6:	f000 f92d 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005fa:	46c0      	nop			; (mov r8, r8)
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20000028 	.word	0x20000028
 8000604:	40005400 	.word	0x40005400
 8000608:	2000090e 	.word	0x2000090e

0800060c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000610:	4b14      	ldr	r3, [pc, #80]	; (8000664 <MX_USART1_UART_Init+0x58>)
 8000612:	4a15      	ldr	r2, [pc, #84]	; (8000668 <MX_USART1_UART_Init+0x5c>)
 8000614:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000616:	4b13      	ldr	r3, [pc, #76]	; (8000664 <MX_USART1_UART_Init+0x58>)
 8000618:	2296      	movs	r2, #150	; 0x96
 800061a:	0192      	lsls	r2, r2, #6
 800061c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800061e:	4b11      	ldr	r3, [pc, #68]	; (8000664 <MX_USART1_UART_Init+0x58>)
 8000620:	2200      	movs	r2, #0
 8000622:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000624:	4b0f      	ldr	r3, [pc, #60]	; (8000664 <MX_USART1_UART_Init+0x58>)
 8000626:	2200      	movs	r2, #0
 8000628:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800062a:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <MX_USART1_UART_Init+0x58>)
 800062c:	2200      	movs	r2, #0
 800062e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8000630:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <MX_USART1_UART_Init+0x58>)
 8000632:	2208      	movs	r2, #8
 8000634:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000636:	4b0b      	ldr	r3, [pc, #44]	; (8000664 <MX_USART1_UART_Init+0x58>)
 8000638:	2200      	movs	r2, #0
 800063a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800063c:	4b09      	ldr	r3, [pc, #36]	; (8000664 <MX_USART1_UART_Init+0x58>)
 800063e:	2200      	movs	r2, #0
 8000640:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000642:	4b08      	ldr	r3, [pc, #32]	; (8000664 <MX_USART1_UART_Init+0x58>)
 8000644:	2200      	movs	r2, #0
 8000646:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000648:	4b06      	ldr	r3, [pc, #24]	; (8000664 <MX_USART1_UART_Init+0x58>)
 800064a:	2200      	movs	r2, #0
 800064c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800064e:	4b05      	ldr	r3, [pc, #20]	; (8000664 <MX_USART1_UART_Init+0x58>)
 8000650:	0018      	movs	r0, r3
 8000652:	f002 fe99 	bl	8003388 <HAL_UART_Init>
 8000656:	1e03      	subs	r3, r0, #0
 8000658:	d001      	beq.n	800065e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800065a:	f000 f8fb 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	20000074 	.word	0x20000074
 8000668:	40013800 	.word	0x40013800

0800066c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800066c:	b590      	push	{r4, r7, lr}
 800066e:	b089      	sub	sp, #36	; 0x24
 8000670:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000672:	240c      	movs	r4, #12
 8000674:	193b      	adds	r3, r7, r4
 8000676:	0018      	movs	r0, r3
 8000678:	2314      	movs	r3, #20
 800067a:	001a      	movs	r2, r3
 800067c:	2100      	movs	r1, #0
 800067e:	f003 fb4d 	bl	8003d1c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000682:	4b31      	ldr	r3, [pc, #196]	; (8000748 <MX_GPIO_Init+0xdc>)
 8000684:	695a      	ldr	r2, [r3, #20]
 8000686:	4b30      	ldr	r3, [pc, #192]	; (8000748 <MX_GPIO_Init+0xdc>)
 8000688:	2180      	movs	r1, #128	; 0x80
 800068a:	0289      	lsls	r1, r1, #10
 800068c:	430a      	orrs	r2, r1
 800068e:	615a      	str	r2, [r3, #20]
 8000690:	4b2d      	ldr	r3, [pc, #180]	; (8000748 <MX_GPIO_Init+0xdc>)
 8000692:	695a      	ldr	r2, [r3, #20]
 8000694:	2380      	movs	r3, #128	; 0x80
 8000696:	029b      	lsls	r3, r3, #10
 8000698:	4013      	ands	r3, r2
 800069a:	60bb      	str	r3, [r7, #8]
 800069c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800069e:	4b2a      	ldr	r3, [pc, #168]	; (8000748 <MX_GPIO_Init+0xdc>)
 80006a0:	695a      	ldr	r2, [r3, #20]
 80006a2:	4b29      	ldr	r3, [pc, #164]	; (8000748 <MX_GPIO_Init+0xdc>)
 80006a4:	2180      	movs	r1, #128	; 0x80
 80006a6:	0309      	lsls	r1, r1, #12
 80006a8:	430a      	orrs	r2, r1
 80006aa:	615a      	str	r2, [r3, #20]
 80006ac:	4b26      	ldr	r3, [pc, #152]	; (8000748 <MX_GPIO_Init+0xdc>)
 80006ae:	695a      	ldr	r2, [r3, #20]
 80006b0:	2380      	movs	r3, #128	; 0x80
 80006b2:	031b      	lsls	r3, r3, #12
 80006b4:	4013      	ands	r3, r2
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ba:	4b23      	ldr	r3, [pc, #140]	; (8000748 <MX_GPIO_Init+0xdc>)
 80006bc:	695a      	ldr	r2, [r3, #20]
 80006be:	4b22      	ldr	r3, [pc, #136]	; (8000748 <MX_GPIO_Init+0xdc>)
 80006c0:	2180      	movs	r1, #128	; 0x80
 80006c2:	02c9      	lsls	r1, r1, #11
 80006c4:	430a      	orrs	r2, r1
 80006c6:	615a      	str	r2, [r3, #20]
 80006c8:	4b1f      	ldr	r3, [pc, #124]	; (8000748 <MX_GPIO_Init+0xdc>)
 80006ca:	695a      	ldr	r2, [r3, #20]
 80006cc:	2380      	movs	r3, #128	; 0x80
 80006ce:	02db      	lsls	r3, r3, #11
 80006d0:	4013      	ands	r3, r2
 80006d2:	603b      	str	r3, [r7, #0]
 80006d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, heat_Pin|water_Pin|light_Pin|air_Pin, GPIO_PIN_RESET);
 80006d6:	2390      	movs	r3, #144	; 0x90
 80006d8:	05db      	lsls	r3, r3, #23
 80006da:	2200      	movs	r2, #0
 80006dc:	21f0      	movs	r1, #240	; 0xf0
 80006de:	0018      	movs	r0, r3
 80006e0:	f001 f930 	bl	8001944 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80006e4:	23f0      	movs	r3, #240	; 0xf0
 80006e6:	009b      	lsls	r3, r3, #2
 80006e8:	4818      	ldr	r0, [pc, #96]	; (800074c <MX_GPIO_Init+0xe0>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	0019      	movs	r1, r3
 80006ee:	f001 f929 	bl	8001944 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : heat_Pin water_Pin light_Pin air_Pin */
  GPIO_InitStruct.Pin = heat_Pin|water_Pin|light_Pin|air_Pin;
 80006f2:	193b      	adds	r3, r7, r4
 80006f4:	22f0      	movs	r2, #240	; 0xf0
 80006f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f8:	193b      	adds	r3, r7, r4
 80006fa:	2201      	movs	r2, #1
 80006fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fe:	193b      	adds	r3, r7, r4
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000704:	193b      	adds	r3, r7, r4
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070a:	193a      	adds	r2, r7, r4
 800070c:	2390      	movs	r3, #144	; 0x90
 800070e:	05db      	lsls	r3, r3, #23
 8000710:	0011      	movs	r1, r2
 8000712:	0018      	movs	r0, r3
 8000714:	f000 ff9e 	bl	8001654 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000718:	0021      	movs	r1, r4
 800071a:	187b      	adds	r3, r7, r1
 800071c:	22f0      	movs	r2, #240	; 0xf0
 800071e:	0092      	lsls	r2, r2, #2
 8000720:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000722:	187b      	adds	r3, r7, r1
 8000724:	2201      	movs	r2, #1
 8000726:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	187b      	adds	r3, r7, r1
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072e:	187b      	adds	r3, r7, r1
 8000730:	2200      	movs	r2, #0
 8000732:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000734:	187b      	adds	r3, r7, r1
 8000736:	4a05      	ldr	r2, [pc, #20]	; (800074c <MX_GPIO_Init+0xe0>)
 8000738:	0019      	movs	r1, r3
 800073a:	0010      	movs	r0, r2
 800073c:	f000 ff8a 	bl	8001654 <HAL_GPIO_Init>

}
 8000740:	46c0      	nop			; (mov r8, r8)
 8000742:	46bd      	mov	sp, r7
 8000744:	b009      	add	sp, #36	; 0x24
 8000746:	bd90      	pop	{r4, r7, pc}
 8000748:	40021000 	.word	0x40021000
 800074c:	48000800 	.word	0x48000800

08000750 <CCS811_begin>:

/* USER CODE BEGIN 4 */

static void CCS811_begin(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af04      	add	r7, sp, #16
  uint8_t byte_buffer = CCS811_BOOTLOADER_APP_START;
 8000756:	1dfb      	adds	r3, r7, #7
 8000758:	22f4      	movs	r2, #244	; 0xf4
 800075a:	701a      	strb	r2, [r3, #0]
  if (HAL_OK != HAL_I2C_Master_Transmit(&hi2c1, CCS811_I2C_ADDR << 1, (uint8_t *) &byte_buffer, 1, 1000))
 800075c:	1dfa      	adds	r2, r7, #7
 800075e:	4811      	ldr	r0, [pc, #68]	; (80007a4 <CCS811_begin+0x54>)
 8000760:	23fa      	movs	r3, #250	; 0xfa
 8000762:	009b      	lsls	r3, r3, #2
 8000764:	9300      	str	r3, [sp, #0]
 8000766:	2301      	movs	r3, #1
 8000768:	21b4      	movs	r1, #180	; 0xb4
 800076a:	f001 f9b9 	bl	8001ae0 <HAL_I2C_Master_Transmit>
 800076e:	1e03      	subs	r3, r0, #0
 8000770:	d000      	beq.n	8000774 <CCS811_begin+0x24>
  {
    while (1);
 8000772:	e7fe      	b.n	8000772 <CCS811_begin+0x22>
  }

  byte_buffer = 0b10000;
 8000774:	1dfb      	adds	r3, r7, #7
 8000776:	2210      	movs	r2, #16
 8000778:	701a      	strb	r2, [r3, #0]
  if (HAL_OK != HAL_I2C_Mem_Write(&hi2c1, CCS811_I2C_ADDR << 1, CCS811_REG_MEAS_MODE, 1, &byte_buffer, 1, 1000))
 800077a:	480a      	ldr	r0, [pc, #40]	; (80007a4 <CCS811_begin+0x54>)
 800077c:	23fa      	movs	r3, #250	; 0xfa
 800077e:	009b      	lsls	r3, r3, #2
 8000780:	9302      	str	r3, [sp, #8]
 8000782:	2301      	movs	r3, #1
 8000784:	9301      	str	r3, [sp, #4]
 8000786:	1dfb      	adds	r3, r7, #7
 8000788:	9300      	str	r3, [sp, #0]
 800078a:	2301      	movs	r3, #1
 800078c:	2201      	movs	r2, #1
 800078e:	21b4      	movs	r1, #180	; 0xb4
 8000790:	f001 faae 	bl	8001cf0 <HAL_I2C_Mem_Write>
 8000794:	1e03      	subs	r3, r0, #0
 8000796:	d000      	beq.n	800079a <CCS811_begin+0x4a>
  {
    while (1);
 8000798:	e7fe      	b.n	8000798 <CCS811_begin+0x48>
  }
}
 800079a:	46c0      	nop			; (mov r8, r8)
 800079c:	46bd      	mov	sp, r7
 800079e:	b002      	add	sp, #8
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	46c0      	nop			; (mov r8, r8)
 80007a4:	20000028 	.word	0x20000028

080007a8 <CCS811_get_eCO2>:

static uint16_t CCS811_get_eCO2(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b086      	sub	sp, #24
 80007ac:	af04      	add	r7, sp, #16
  uint8_t result[2] = {0};
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	2200      	movs	r2, #0
 80007b2:	801a      	strh	r2, [r3, #0]
  if (HAL_OK != HAL_I2C_Mem_Read(&hi2c1, CCS811_I2C_ADDR << 1, CCS811_REG_ALG_RESULT_DATA, 1, (uint8_t *) &result, 2, 1000))
 80007b4:	480e      	ldr	r0, [pc, #56]	; (80007f0 <CCS811_get_eCO2+0x48>)
 80007b6:	23fa      	movs	r3, #250	; 0xfa
 80007b8:	009b      	lsls	r3, r3, #2
 80007ba:	9302      	str	r3, [sp, #8]
 80007bc:	2302      	movs	r3, #2
 80007be:	9301      	str	r3, [sp, #4]
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	9300      	str	r3, [sp, #0]
 80007c4:	2301      	movs	r3, #1
 80007c6:	2202      	movs	r2, #2
 80007c8:	21b4      	movs	r1, #180	; 0xb4
 80007ca:	f001 fbbf 	bl	8001f4c <HAL_I2C_Mem_Read>
 80007ce:	1e03      	subs	r3, r0, #0
 80007d0:	d000      	beq.n	80007d4 <CCS811_get_eCO2+0x2c>
    {
      while (1);
 80007d2:	e7fe      	b.n	80007d2 <CCS811_get_eCO2+0x2a>
    }
  return (((uint16_t) result[0] << 8) | (uint16_t) result[1]);
 80007d4:	1d3b      	adds	r3, r7, #4
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	021b      	lsls	r3, r3, #8
 80007da:	b21a      	sxth	r2, r3
 80007dc:	1d3b      	adds	r3, r7, #4
 80007de:	785b      	ldrb	r3, [r3, #1]
 80007e0:	b21b      	sxth	r3, r3
 80007e2:	4313      	orrs	r3, r2
 80007e4:	b21b      	sxth	r3, r3
 80007e6:	b29b      	uxth	r3, r3
}
 80007e8:	0018      	movs	r0, r3
 80007ea:	46bd      	mov	sp, r7
 80007ec:	b002      	add	sp, #8
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20000028 	.word	0x20000028

080007f4 <SHT30_begin>:
  }
  __asm volatile ("nop");
}

static void SHT30_begin(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0

}
 80007f8:	46c0      	nop			; (mov r8, r8)
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
	...

08000800 <SHT30_get_temp>:

static uint16_t SHT30_get_temp(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b086      	sub	sp, #24
 8000804:	af04      	add	r7, sp, #16
  uint8_t recv[6] = {0};
 8000806:	003b      	movs	r3, r7
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	2200      	movs	r2, #0
 800080e:	809a      	strh	r2, [r3, #4]
  if (HAL_OK != HAL_I2C_Mem_Read(&hi2c1, SHT30_I2C_ADDR << 1, SHT30_COMMAND_READ_ONESHOT, 2, recv, 6, 1000))
 8000810:	4a0e      	ldr	r2, [pc, #56]	; (800084c <SHT30_get_temp+0x4c>)
 8000812:	480f      	ldr	r0, [pc, #60]	; (8000850 <SHT30_get_temp+0x50>)
 8000814:	23fa      	movs	r3, #250	; 0xfa
 8000816:	009b      	lsls	r3, r3, #2
 8000818:	9302      	str	r3, [sp, #8]
 800081a:	2306      	movs	r3, #6
 800081c:	9301      	str	r3, [sp, #4]
 800081e:	003b      	movs	r3, r7
 8000820:	9300      	str	r3, [sp, #0]
 8000822:	2302      	movs	r3, #2
 8000824:	2188      	movs	r1, #136	; 0x88
 8000826:	f001 fb91 	bl	8001f4c <HAL_I2C_Mem_Read>
 800082a:	1e03      	subs	r3, r0, #0
 800082c:	d000      	beq.n	8000830 <SHT30_get_temp+0x30>
  {
    while (1);
 800082e:	e7fe      	b.n	800082e <SHT30_get_temp+0x2e>
  }
  return (uint16_t) recv[0] << 8 | recv[1];
 8000830:	003b      	movs	r3, r7
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	021b      	lsls	r3, r3, #8
 8000836:	b21a      	sxth	r2, r3
 8000838:	003b      	movs	r3, r7
 800083a:	785b      	ldrb	r3, [r3, #1]
 800083c:	b21b      	sxth	r3, r3
 800083e:	4313      	orrs	r3, r2
 8000840:	b21b      	sxth	r3, r3
 8000842:	b29b      	uxth	r3, r3
}
 8000844:	0018      	movs	r0, r3
 8000846:	46bd      	mov	sp, r7
 8000848:	b002      	add	sp, #8
 800084a:	bd80      	pop	{r7, pc}
 800084c:	00002c10 	.word	0x00002c10
 8000850:	20000028 	.word	0x20000028

08000854 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000858:	b672      	cpsid	i
}
 800085a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800085c:	e7fe      	b.n	800085c <Error_Handler+0x8>
	...

08000860 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000866:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <HAL_MspInit+0x44>)
 8000868:	699a      	ldr	r2, [r3, #24]
 800086a:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <HAL_MspInit+0x44>)
 800086c:	2101      	movs	r1, #1
 800086e:	430a      	orrs	r2, r1
 8000870:	619a      	str	r2, [r3, #24]
 8000872:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <HAL_MspInit+0x44>)
 8000874:	699b      	ldr	r3, [r3, #24]
 8000876:	2201      	movs	r2, #1
 8000878:	4013      	ands	r3, r2
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800087e:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <HAL_MspInit+0x44>)
 8000880:	69da      	ldr	r2, [r3, #28]
 8000882:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <HAL_MspInit+0x44>)
 8000884:	2180      	movs	r1, #128	; 0x80
 8000886:	0549      	lsls	r1, r1, #21
 8000888:	430a      	orrs	r2, r1
 800088a:	61da      	str	r2, [r3, #28]
 800088c:	4b05      	ldr	r3, [pc, #20]	; (80008a4 <HAL_MspInit+0x44>)
 800088e:	69da      	ldr	r2, [r3, #28]
 8000890:	2380      	movs	r3, #128	; 0x80
 8000892:	055b      	lsls	r3, r3, #21
 8000894:	4013      	ands	r3, r2
 8000896:	603b      	str	r3, [r7, #0]
 8000898:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800089a:	46c0      	nop			; (mov r8, r8)
 800089c:	46bd      	mov	sp, r7
 800089e:	b002      	add	sp, #8
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	46c0      	nop			; (mov r8, r8)
 80008a4:	40021000 	.word	0x40021000

080008a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008a8:	b590      	push	{r4, r7, lr}
 80008aa:	b08b      	sub	sp, #44	; 0x2c
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b0:	2414      	movs	r4, #20
 80008b2:	193b      	adds	r3, r7, r4
 80008b4:	0018      	movs	r0, r3
 80008b6:	2314      	movs	r3, #20
 80008b8:	001a      	movs	r2, r3
 80008ba:	2100      	movs	r1, #0
 80008bc:	f003 fa2e 	bl	8003d1c <memset>
  if(hadc->Instance==ADC1)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a19      	ldr	r2, [pc, #100]	; (800092c <HAL_ADC_MspInit+0x84>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d12b      	bne.n	8000922 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008ca:	4b19      	ldr	r3, [pc, #100]	; (8000930 <HAL_ADC_MspInit+0x88>)
 80008cc:	699a      	ldr	r2, [r3, #24]
 80008ce:	4b18      	ldr	r3, [pc, #96]	; (8000930 <HAL_ADC_MspInit+0x88>)
 80008d0:	2180      	movs	r1, #128	; 0x80
 80008d2:	0089      	lsls	r1, r1, #2
 80008d4:	430a      	orrs	r2, r1
 80008d6:	619a      	str	r2, [r3, #24]
 80008d8:	4b15      	ldr	r3, [pc, #84]	; (8000930 <HAL_ADC_MspInit+0x88>)
 80008da:	699a      	ldr	r2, [r3, #24]
 80008dc:	2380      	movs	r3, #128	; 0x80
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	4013      	ands	r3, r2
 80008e2:	613b      	str	r3, [r7, #16]
 80008e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e6:	4b12      	ldr	r3, [pc, #72]	; (8000930 <HAL_ADC_MspInit+0x88>)
 80008e8:	695a      	ldr	r2, [r3, #20]
 80008ea:	4b11      	ldr	r3, [pc, #68]	; (8000930 <HAL_ADC_MspInit+0x88>)
 80008ec:	2180      	movs	r1, #128	; 0x80
 80008ee:	0289      	lsls	r1, r1, #10
 80008f0:	430a      	orrs	r2, r1
 80008f2:	615a      	str	r2, [r3, #20]
 80008f4:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <HAL_ADC_MspInit+0x88>)
 80008f6:	695a      	ldr	r2, [r3, #20]
 80008f8:	2380      	movs	r3, #128	; 0x80
 80008fa:	029b      	lsls	r3, r3, #10
 80008fc:	4013      	ands	r3, r2
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000902:	193b      	adds	r3, r7, r4
 8000904:	2201      	movs	r2, #1
 8000906:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000908:	193b      	adds	r3, r7, r4
 800090a:	2203      	movs	r2, #3
 800090c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	193b      	adds	r3, r7, r4
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000914:	193a      	adds	r2, r7, r4
 8000916:	2390      	movs	r3, #144	; 0x90
 8000918:	05db      	lsls	r3, r3, #23
 800091a:	0011      	movs	r1, r2
 800091c:	0018      	movs	r0, r3
 800091e:	f000 fe99 	bl	8001654 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000922:	46c0      	nop			; (mov r8, r8)
 8000924:	46bd      	mov	sp, r7
 8000926:	b00b      	add	sp, #44	; 0x2c
 8000928:	bd90      	pop	{r4, r7, pc}
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	40012400 	.word	0x40012400
 8000930:	40021000 	.word	0x40021000

08000934 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000934:	b590      	push	{r4, r7, lr}
 8000936:	b08b      	sub	sp, #44	; 0x2c
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093c:	2414      	movs	r4, #20
 800093e:	193b      	adds	r3, r7, r4
 8000940:	0018      	movs	r0, r3
 8000942:	2314      	movs	r3, #20
 8000944:	001a      	movs	r2, r3
 8000946:	2100      	movs	r1, #0
 8000948:	f003 f9e8 	bl	8003d1c <memset>
  if(hi2c->Instance==I2C1)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a1c      	ldr	r2, [pc, #112]	; (80009c4 <HAL_I2C_MspInit+0x90>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d131      	bne.n	80009ba <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000956:	4b1c      	ldr	r3, [pc, #112]	; (80009c8 <HAL_I2C_MspInit+0x94>)
 8000958:	695a      	ldr	r2, [r3, #20]
 800095a:	4b1b      	ldr	r3, [pc, #108]	; (80009c8 <HAL_I2C_MspInit+0x94>)
 800095c:	2180      	movs	r1, #128	; 0x80
 800095e:	02c9      	lsls	r1, r1, #11
 8000960:	430a      	orrs	r2, r1
 8000962:	615a      	str	r2, [r3, #20]
 8000964:	4b18      	ldr	r3, [pc, #96]	; (80009c8 <HAL_I2C_MspInit+0x94>)
 8000966:	695a      	ldr	r2, [r3, #20]
 8000968:	2380      	movs	r3, #128	; 0x80
 800096a:	02db      	lsls	r3, r3, #11
 800096c:	4013      	ands	r3, r2
 800096e:	613b      	str	r3, [r7, #16]
 8000970:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000972:	0021      	movs	r1, r4
 8000974:	187b      	adds	r3, r7, r1
 8000976:	22c0      	movs	r2, #192	; 0xc0
 8000978:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800097a:	187b      	adds	r3, r7, r1
 800097c:	2212      	movs	r2, #18
 800097e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000980:	187b      	adds	r3, r7, r1
 8000982:	2201      	movs	r2, #1
 8000984:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000986:	187b      	adds	r3, r7, r1
 8000988:	2203      	movs	r2, #3
 800098a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800098c:	187b      	adds	r3, r7, r1
 800098e:	2201      	movs	r2, #1
 8000990:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000992:	187b      	adds	r3, r7, r1
 8000994:	4a0d      	ldr	r2, [pc, #52]	; (80009cc <HAL_I2C_MspInit+0x98>)
 8000996:	0019      	movs	r1, r3
 8000998:	0010      	movs	r0, r2
 800099a:	f000 fe5b 	bl	8001654 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800099e:	4b0a      	ldr	r3, [pc, #40]	; (80009c8 <HAL_I2C_MspInit+0x94>)
 80009a0:	69da      	ldr	r2, [r3, #28]
 80009a2:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <HAL_I2C_MspInit+0x94>)
 80009a4:	2180      	movs	r1, #128	; 0x80
 80009a6:	0389      	lsls	r1, r1, #14
 80009a8:	430a      	orrs	r2, r1
 80009aa:	61da      	str	r2, [r3, #28]
 80009ac:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <HAL_I2C_MspInit+0x94>)
 80009ae:	69da      	ldr	r2, [r3, #28]
 80009b0:	2380      	movs	r3, #128	; 0x80
 80009b2:	039b      	lsls	r3, r3, #14
 80009b4:	4013      	ands	r3, r2
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009ba:	46c0      	nop			; (mov r8, r8)
 80009bc:	46bd      	mov	sp, r7
 80009be:	b00b      	add	sp, #44	; 0x2c
 80009c0:	bd90      	pop	{r4, r7, pc}
 80009c2:	46c0      	nop			; (mov r8, r8)
 80009c4:	40005400 	.word	0x40005400
 80009c8:	40021000 	.word	0x40021000
 80009cc:	48000400 	.word	0x48000400

080009d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009d0:	b590      	push	{r4, r7, lr}
 80009d2:	b08b      	sub	sp, #44	; 0x2c
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d8:	2414      	movs	r4, #20
 80009da:	193b      	adds	r3, r7, r4
 80009dc:	0018      	movs	r0, r3
 80009de:	2314      	movs	r3, #20
 80009e0:	001a      	movs	r2, r3
 80009e2:	2100      	movs	r1, #0
 80009e4:	f003 f99a 	bl	8003d1c <memset>
  if(huart->Instance==USART1)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a1d      	ldr	r2, [pc, #116]	; (8000a64 <HAL_UART_MspInit+0x94>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d133      	bne.n	8000a5a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009f2:	4b1d      	ldr	r3, [pc, #116]	; (8000a68 <HAL_UART_MspInit+0x98>)
 80009f4:	699a      	ldr	r2, [r3, #24]
 80009f6:	4b1c      	ldr	r3, [pc, #112]	; (8000a68 <HAL_UART_MspInit+0x98>)
 80009f8:	2180      	movs	r1, #128	; 0x80
 80009fa:	01c9      	lsls	r1, r1, #7
 80009fc:	430a      	orrs	r2, r1
 80009fe:	619a      	str	r2, [r3, #24]
 8000a00:	4b19      	ldr	r3, [pc, #100]	; (8000a68 <HAL_UART_MspInit+0x98>)
 8000a02:	699a      	ldr	r2, [r3, #24]
 8000a04:	2380      	movs	r3, #128	; 0x80
 8000a06:	01db      	lsls	r3, r3, #7
 8000a08:	4013      	ands	r3, r2
 8000a0a:	613b      	str	r3, [r7, #16]
 8000a0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0e:	4b16      	ldr	r3, [pc, #88]	; (8000a68 <HAL_UART_MspInit+0x98>)
 8000a10:	695a      	ldr	r2, [r3, #20]
 8000a12:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <HAL_UART_MspInit+0x98>)
 8000a14:	2180      	movs	r1, #128	; 0x80
 8000a16:	0289      	lsls	r1, r1, #10
 8000a18:	430a      	orrs	r2, r1
 8000a1a:	615a      	str	r2, [r3, #20]
 8000a1c:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <HAL_UART_MspInit+0x98>)
 8000a1e:	695a      	ldr	r2, [r3, #20]
 8000a20:	2380      	movs	r3, #128	; 0x80
 8000a22:	029b      	lsls	r3, r3, #10
 8000a24:	4013      	ands	r3, r2
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a2a:	193b      	adds	r3, r7, r4
 8000a2c:	22c0      	movs	r2, #192	; 0xc0
 8000a2e:	00d2      	lsls	r2, r2, #3
 8000a30:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a32:	0021      	movs	r1, r4
 8000a34:	187b      	adds	r3, r7, r1
 8000a36:	2202      	movs	r2, #2
 8000a38:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	187b      	adds	r3, r7, r1
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a40:	187b      	adds	r3, r7, r1
 8000a42:	2203      	movs	r2, #3
 8000a44:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000a46:	187b      	adds	r3, r7, r1
 8000a48:	2201      	movs	r2, #1
 8000a4a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4c:	187a      	adds	r2, r7, r1
 8000a4e:	2390      	movs	r3, #144	; 0x90
 8000a50:	05db      	lsls	r3, r3, #23
 8000a52:	0011      	movs	r1, r2
 8000a54:	0018      	movs	r0, r3
 8000a56:	f000 fdfd 	bl	8001654 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a5a:	46c0      	nop			; (mov r8, r8)
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	b00b      	add	sp, #44	; 0x2c
 8000a60:	bd90      	pop	{r4, r7, pc}
 8000a62:	46c0      	nop			; (mov r8, r8)
 8000a64:	40013800 	.word	0x40013800
 8000a68:	40021000 	.word	0x40021000

08000a6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <NMI_Handler+0x4>

08000a72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a76:	e7fe      	b.n	8000a76 <HardFault_Handler+0x4>

08000a78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a7c:	46c0      	nop			; (mov r8, r8)
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a86:	46c0      	nop			; (mov r8, r8)
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a90:	f000 f87a 	bl	8000b88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a94:	46c0      	nop			; (mov r8, r8)
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000aa4:	480d      	ldr	r0, [pc, #52]	; (8000adc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000aa6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aa8:	480d      	ldr	r0, [pc, #52]	; (8000ae0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000aaa:	490e      	ldr	r1, [pc, #56]	; (8000ae4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000aac:	4a0e      	ldr	r2, [pc, #56]	; (8000ae8 <LoopForever+0xe>)
  movs r3, #0
 8000aae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab0:	e002      	b.n	8000ab8 <LoopCopyDataInit>

08000ab2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ab2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ab6:	3304      	adds	r3, #4

08000ab8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ab8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000abc:	d3f9      	bcc.n	8000ab2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000abe:	4a0b      	ldr	r2, [pc, #44]	; (8000aec <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ac0:	4c0b      	ldr	r4, [pc, #44]	; (8000af0 <LoopForever+0x16>)
  movs r3, #0
 8000ac2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac4:	e001      	b.n	8000aca <LoopFillZerobss>

08000ac6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ac6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ac8:	3204      	adds	r2, #4

08000aca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000acc:	d3fb      	bcc.n	8000ac6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000ace:	f7ff ffe4 	bl	8000a9a <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000ad2:	f003 f8ff 	bl	8003cd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ad6:	f7ff fba1 	bl	800021c <main>

08000ada <LoopForever>:

LoopForever:
    b LoopForever
 8000ada:	e7fe      	b.n	8000ada <LoopForever>
  ldr   r0, =_estack
 8000adc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000ae0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ae8:	08003d84 	.word	0x08003d84
  ldr r2, =_sbss
 8000aec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000af0:	2000013c 	.word	0x2000013c

08000af4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000af4:	e7fe      	b.n	8000af4 <ADC1_COMP_IRQHandler>
	...

08000af8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000afc:	4b07      	ldr	r3, [pc, #28]	; (8000b1c <HAL_Init+0x24>)
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <HAL_Init+0x24>)
 8000b02:	2110      	movs	r1, #16
 8000b04:	430a      	orrs	r2, r1
 8000b06:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000b08:	2003      	movs	r0, #3
 8000b0a:	f000 f809 	bl	8000b20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b0e:	f7ff fea7 	bl	8000860 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b12:	2300      	movs	r3, #0
}
 8000b14:	0018      	movs	r0, r3
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	46c0      	nop			; (mov r8, r8)
 8000b1c:	40022000 	.word	0x40022000

08000b20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b20:	b590      	push	{r4, r7, lr}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b28:	4b14      	ldr	r3, [pc, #80]	; (8000b7c <HAL_InitTick+0x5c>)
 8000b2a:	681c      	ldr	r4, [r3, #0]
 8000b2c:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <HAL_InitTick+0x60>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	0019      	movs	r1, r3
 8000b32:	23fa      	movs	r3, #250	; 0xfa
 8000b34:	0098      	lsls	r0, r3, #2
 8000b36:	f7ff fae5 	bl	8000104 <__udivsi3>
 8000b3a:	0003      	movs	r3, r0
 8000b3c:	0019      	movs	r1, r3
 8000b3e:	0020      	movs	r0, r4
 8000b40:	f7ff fae0 	bl	8000104 <__udivsi3>
 8000b44:	0003      	movs	r3, r0
 8000b46:	0018      	movs	r0, r3
 8000b48:	f000 fd77 	bl	800163a <HAL_SYSTICK_Config>
 8000b4c:	1e03      	subs	r3, r0, #0
 8000b4e:	d001      	beq.n	8000b54 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000b50:	2301      	movs	r3, #1
 8000b52:	e00f      	b.n	8000b74 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2b03      	cmp	r3, #3
 8000b58:	d80b      	bhi.n	8000b72 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b5a:	6879      	ldr	r1, [r7, #4]
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	425b      	negs	r3, r3
 8000b60:	2200      	movs	r2, #0
 8000b62:	0018      	movs	r0, r3
 8000b64:	f000 fd54 	bl	8001610 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b68:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <HAL_InitTick+0x64>)
 8000b6a:	687a      	ldr	r2, [r7, #4]
 8000b6c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	e000      	b.n	8000b74 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000b72:	2301      	movs	r3, #1
}
 8000b74:	0018      	movs	r0, r3
 8000b76:	46bd      	mov	sp, r7
 8000b78:	b003      	add	sp, #12
 8000b7a:	bd90      	pop	{r4, r7, pc}
 8000b7c:	20000000 	.word	0x20000000
 8000b80:	20000008 	.word	0x20000008
 8000b84:	20000004 	.word	0x20000004

08000b88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b8c:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <HAL_IncTick+0x1c>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	001a      	movs	r2, r3
 8000b92:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <HAL_IncTick+0x20>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	18d2      	adds	r2, r2, r3
 8000b98:	4b03      	ldr	r3, [pc, #12]	; (8000ba8 <HAL_IncTick+0x20>)
 8000b9a:	601a      	str	r2, [r3, #0]
}
 8000b9c:	46c0      	nop			; (mov r8, r8)
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	46c0      	nop			; (mov r8, r8)
 8000ba4:	20000008 	.word	0x20000008
 8000ba8:	20000138 	.word	0x20000138

08000bac <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb0:	4b02      	ldr	r3, [pc, #8]	; (8000bbc <HAL_GetTick+0x10>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
}
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	46c0      	nop			; (mov r8, r8)
 8000bbc:	20000138 	.word	0x20000138

08000bc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bc8:	f7ff fff0 	bl	8000bac <HAL_GetTick>
 8000bcc:	0003      	movs	r3, r0
 8000bce:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	d005      	beq.n	8000be6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bda:	4b0a      	ldr	r3, [pc, #40]	; (8000c04 <HAL_Delay+0x44>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	001a      	movs	r2, r3
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	189b      	adds	r3, r3, r2
 8000be4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000be6:	46c0      	nop			; (mov r8, r8)
 8000be8:	f7ff ffe0 	bl	8000bac <HAL_GetTick>
 8000bec:	0002      	movs	r2, r0
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	1ad3      	subs	r3, r2, r3
 8000bf2:	68fa      	ldr	r2, [r7, #12]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d8f7      	bhi.n	8000be8 <HAL_Delay+0x28>
  {
  }
}
 8000bf8:	46c0      	nop			; (mov r8, r8)
 8000bfa:	46c0      	nop			; (mov r8, r8)
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	b004      	add	sp, #16
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	46c0      	nop			; (mov r8, r8)
 8000c04:	20000008 	.word	0x20000008

08000c08 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c10:	230f      	movs	r3, #15
 8000c12:	18fb      	adds	r3, r7, r3
 8000c14:	2200      	movs	r2, #0
 8000c16:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d101      	bne.n	8000c26 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
 8000c24:	e125      	b.n	8000e72 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d10a      	bne.n	8000c44 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2200      	movs	r2, #0
 8000c32:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2234      	movs	r2, #52	; 0x34
 8000c38:	2100      	movs	r1, #0
 8000c3a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	0018      	movs	r0, r3
 8000c40:	f7ff fe32 	bl	80008a8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c48:	2210      	movs	r2, #16
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	d000      	beq.n	8000c50 <HAL_ADC_Init+0x48>
 8000c4e:	e103      	b.n	8000e58 <HAL_ADC_Init+0x250>
 8000c50:	230f      	movs	r3, #15
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d000      	beq.n	8000c5c <HAL_ADC_Init+0x54>
 8000c5a:	e0fd      	b.n	8000e58 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	689b      	ldr	r3, [r3, #8]
 8000c62:	2204      	movs	r2, #4
 8000c64:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000c66:	d000      	beq.n	8000c6a <HAL_ADC_Init+0x62>
 8000c68:	e0f6      	b.n	8000e58 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c6e:	4a83      	ldr	r2, [pc, #524]	; (8000e7c <HAL_ADC_Init+0x274>)
 8000c70:	4013      	ands	r3, r2
 8000c72:	2202      	movs	r2, #2
 8000c74:	431a      	orrs	r2, r3
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	689b      	ldr	r3, [r3, #8]
 8000c80:	2203      	movs	r2, #3
 8000c82:	4013      	ands	r3, r2
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d112      	bne.n	8000cae <HAL_ADC_Init+0xa6>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	2201      	movs	r2, #1
 8000c90:	4013      	ands	r3, r2
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d009      	beq.n	8000caa <HAL_ADC_Init+0xa2>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	68da      	ldr	r2, [r3, #12]
 8000c9c:	2380      	movs	r3, #128	; 0x80
 8000c9e:	021b      	lsls	r3, r3, #8
 8000ca0:	401a      	ands	r2, r3
 8000ca2:	2380      	movs	r3, #128	; 0x80
 8000ca4:	021b      	lsls	r3, r3, #8
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	d101      	bne.n	8000cae <HAL_ADC_Init+0xa6>
 8000caa:	2301      	movs	r3, #1
 8000cac:	e000      	b.n	8000cb0 <HAL_ADC_Init+0xa8>
 8000cae:	2300      	movs	r3, #0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d116      	bne.n	8000ce2 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	68db      	ldr	r3, [r3, #12]
 8000cba:	2218      	movs	r2, #24
 8000cbc:	4393      	bics	r3, r2
 8000cbe:	0019      	movs	r1, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	689a      	ldr	r2, [r3, #8]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	430a      	orrs	r2, r1
 8000cca:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	691b      	ldr	r3, [r3, #16]
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	0899      	lsrs	r1, r3, #2
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	685a      	ldr	r2, [r3, #4]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	430a      	orrs	r2, r1
 8000ce0:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	68da      	ldr	r2, [r3, #12]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4964      	ldr	r1, [pc, #400]	; (8000e80 <HAL_ADC_Init+0x278>)
 8000cee:	400a      	ands	r2, r1
 8000cf0:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	7e1b      	ldrb	r3, [r3, #24]
 8000cf6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	7e5b      	ldrb	r3, [r3, #25]
 8000cfc:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000cfe:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	7e9b      	ldrb	r3, [r3, #26]
 8000d04:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000d06:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d002      	beq.n	8000d16 <HAL_ADC_Init+0x10e>
 8000d10:	2380      	movs	r3, #128	; 0x80
 8000d12:	015b      	lsls	r3, r3, #5
 8000d14:	e000      	b.n	8000d18 <HAL_ADC_Init+0x110>
 8000d16:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000d18:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000d1e:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	691b      	ldr	r3, [r3, #16]
 8000d24:	2b02      	cmp	r3, #2
 8000d26:	d101      	bne.n	8000d2c <HAL_ADC_Init+0x124>
 8000d28:	2304      	movs	r3, #4
 8000d2a:	e000      	b.n	8000d2e <HAL_ADC_Init+0x126>
 8000d2c:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000d2e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2124      	movs	r1, #36	; 0x24
 8000d34:	5c5b      	ldrb	r3, [r3, r1]
 8000d36:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000d38:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000d3a:	68ba      	ldr	r2, [r7, #8]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	7edb      	ldrb	r3, [r3, #27]
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d115      	bne.n	8000d74 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	7e9b      	ldrb	r3, [r3, #26]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d105      	bne.n	8000d5c <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	2280      	movs	r2, #128	; 0x80
 8000d54:	0252      	lsls	r2, r2, #9
 8000d56:	4313      	orrs	r3, r2
 8000d58:	60bb      	str	r3, [r7, #8]
 8000d5a:	e00b      	b.n	8000d74 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d60:	2220      	movs	r2, #32
 8000d62:	431a      	orrs	r2, r3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	431a      	orrs	r2, r3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	69da      	ldr	r2, [r3, #28]
 8000d78:	23c2      	movs	r3, #194	; 0xc2
 8000d7a:	33ff      	adds	r3, #255	; 0xff
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d007      	beq.n	8000d90 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	68ba      	ldr	r2, [r7, #8]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	68d9      	ldr	r1, [r3, #12]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	68ba      	ldr	r2, [r7, #8]
 8000d9c:	430a      	orrs	r2, r1
 8000d9e:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000da4:	2380      	movs	r3, #128	; 0x80
 8000da6:	055b      	lsls	r3, r3, #21
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d01b      	beq.n	8000de4 <HAL_ADC_Init+0x1dc>
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d017      	beq.n	8000de4 <HAL_ADC_Init+0x1dc>
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000db8:	2b02      	cmp	r3, #2
 8000dba:	d013      	beq.n	8000de4 <HAL_ADC_Init+0x1dc>
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc0:	2b03      	cmp	r3, #3
 8000dc2:	d00f      	beq.n	8000de4 <HAL_ADC_Init+0x1dc>
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc8:	2b04      	cmp	r3, #4
 8000dca:	d00b      	beq.n	8000de4 <HAL_ADC_Init+0x1dc>
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd0:	2b05      	cmp	r3, #5
 8000dd2:	d007      	beq.n	8000de4 <HAL_ADC_Init+0x1dc>
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd8:	2b06      	cmp	r3, #6
 8000dda:	d003      	beq.n	8000de4 <HAL_ADC_Init+0x1dc>
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000de0:	2b07      	cmp	r3, #7
 8000de2:	d112      	bne.n	8000e0a <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	695a      	ldr	r2, [r3, #20]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	2107      	movs	r1, #7
 8000df0:	438a      	bics	r2, r1
 8000df2:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	6959      	ldr	r1, [r3, #20]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dfe:	2207      	movs	r2, #7
 8000e00:	401a      	ands	r2, r3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	430a      	orrs	r2, r1
 8000e08:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	4a1c      	ldr	r2, [pc, #112]	; (8000e84 <HAL_ADC_Init+0x27c>)
 8000e12:	4013      	ands	r3, r2
 8000e14:	68ba      	ldr	r2, [r7, #8]
 8000e16:	429a      	cmp	r2, r3
 8000e18:	d10b      	bne.n	8000e32 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e24:	2203      	movs	r2, #3
 8000e26:	4393      	bics	r3, r2
 8000e28:	2201      	movs	r2, #1
 8000e2a:	431a      	orrs	r2, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000e30:	e01c      	b.n	8000e6c <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e36:	2212      	movs	r2, #18
 8000e38:	4393      	bics	r3, r2
 8000e3a:	2210      	movs	r2, #16
 8000e3c:	431a      	orrs	r2, r3
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e46:	2201      	movs	r2, #1
 8000e48:	431a      	orrs	r2, r3
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000e4e:	230f      	movs	r3, #15
 8000e50:	18fb      	adds	r3, r7, r3
 8000e52:	2201      	movs	r2, #1
 8000e54:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000e56:	e009      	b.n	8000e6c <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e5c:	2210      	movs	r2, #16
 8000e5e:	431a      	orrs	r2, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8000e64:	230f      	movs	r3, #15
 8000e66:	18fb      	adds	r3, r7, r3
 8000e68:	2201      	movs	r2, #1
 8000e6a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e6c:	230f      	movs	r3, #15
 8000e6e:	18fb      	adds	r3, r7, r3
 8000e70:	781b      	ldrb	r3, [r3, #0]
}
 8000e72:	0018      	movs	r0, r3
 8000e74:	46bd      	mov	sp, r7
 8000e76:	b004      	add	sp, #16
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	46c0      	nop			; (mov r8, r8)
 8000e7c:	fffffefd 	.word	0xfffffefd
 8000e80:	fffe0219 	.word	0xfffe0219
 8000e84:	833fffe7 	.word	0x833fffe7

08000e88 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000e88:	b590      	push	{r4, r7, lr}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e90:	230f      	movs	r3, #15
 8000e92:	18fb      	adds	r3, r7, r3
 8000e94:	2200      	movs	r2, #0
 8000e96:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	689b      	ldr	r3, [r3, #8]
 8000e9e:	2204      	movs	r2, #4
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	d138      	bne.n	8000f16 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2234      	movs	r2, #52	; 0x34
 8000ea8:	5c9b      	ldrb	r3, [r3, r2]
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d101      	bne.n	8000eb2 <HAL_ADC_Start+0x2a>
 8000eae:	2302      	movs	r3, #2
 8000eb0:	e038      	b.n	8000f24 <HAL_ADC_Start+0x9c>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2234      	movs	r2, #52	; 0x34
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	7e5b      	ldrb	r3, [r3, #25]
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d007      	beq.n	8000ed2 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8000ec2:	230f      	movs	r3, #15
 8000ec4:	18fc      	adds	r4, r7, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	0018      	movs	r0, r3
 8000eca:	f000 f9e3 	bl	8001294 <ADC_Enable>
 8000ece:	0003      	movs	r3, r0
 8000ed0:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000ed2:	230f      	movs	r3, #15
 8000ed4:	18fb      	adds	r3, r7, r3
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d120      	bne.n	8000f1e <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ee0:	4a12      	ldr	r2, [pc, #72]	; (8000f2c <HAL_ADC_Start+0xa4>)
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	2280      	movs	r2, #128	; 0x80
 8000ee6:	0052      	lsls	r2, r2, #1
 8000ee8:	431a      	orrs	r2, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2234      	movs	r2, #52	; 0x34
 8000ef8:	2100      	movs	r1, #0
 8000efa:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	221c      	movs	r2, #28
 8000f02:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	689a      	ldr	r2, [r3, #8]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2104      	movs	r1, #4
 8000f10:	430a      	orrs	r2, r1
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	e003      	b.n	8000f1e <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000f16:	230f      	movs	r3, #15
 8000f18:	18fb      	adds	r3, r7, r3
 8000f1a:	2202      	movs	r2, #2
 8000f1c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000f1e:	230f      	movs	r3, #15
 8000f20:	18fb      	adds	r3, r7, r3
 8000f22:	781b      	ldrb	r3, [r3, #0]
}
 8000f24:	0018      	movs	r0, r3
 8000f26:	46bd      	mov	sp, r7
 8000f28:	b005      	add	sp, #20
 8000f2a:	bd90      	pop	{r4, r7, pc}
 8000f2c:	fffff0fe 	.word	0xfffff0fe

08000f30 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	695b      	ldr	r3, [r3, #20]
 8000f3e:	2b08      	cmp	r3, #8
 8000f40:	d102      	bne.n	8000f48 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8000f42:	2308      	movs	r3, #8
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	e014      	b.n	8000f72 <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	68db      	ldr	r3, [r3, #12]
 8000f4e:	2201      	movs	r2, #1
 8000f50:	4013      	ands	r3, r2
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d10b      	bne.n	8000f6e <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f5a:	2220      	movs	r2, #32
 8000f5c:	431a      	orrs	r2, r3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2234      	movs	r2, #52	; 0x34
 8000f66:	2100      	movs	r1, #0
 8000f68:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e071      	b.n	8001052 <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8000f6e:	230c      	movs	r3, #12
 8000f70:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000f72:	f7ff fe1b 	bl	8000bac <HAL_GetTick>
 8000f76:	0003      	movs	r3, r0
 8000f78:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000f7a:	e01f      	b.n	8000fbc <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	d01c      	beq.n	8000fbc <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d007      	beq.n	8000f98 <HAL_ADC_PollForConversion+0x68>
 8000f88:	f7ff fe10 	bl	8000bac <HAL_GetTick>
 8000f8c:	0002      	movs	r2, r0
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	683a      	ldr	r2, [r7, #0]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d211      	bcs.n	8000fbc <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	68fa      	ldr	r2, [r7, #12]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	d10b      	bne.n	8000fbc <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fa8:	2204      	movs	r2, #4
 8000faa:	431a      	orrs	r2, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2234      	movs	r2, #52	; 0x34
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8000fb8:	2303      	movs	r3, #3
 8000fba:	e04a      	b.n	8001052 <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	68fa      	ldr	r2, [r7, #12]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	d0d9      	beq.n	8000f7c <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fcc:	2280      	movs	r2, #128	; 0x80
 8000fce:	0092      	lsls	r2, r2, #2
 8000fd0:	431a      	orrs	r2, r3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	68da      	ldr	r2, [r3, #12]
 8000fdc:	23c0      	movs	r3, #192	; 0xc0
 8000fde:	011b      	lsls	r3, r3, #4
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	d12d      	bne.n	8001040 <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d129      	bne.n	8001040 <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2208      	movs	r2, #8
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	2b08      	cmp	r3, #8
 8000ff8:	d122      	bne.n	8001040 <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	689b      	ldr	r3, [r3, #8]
 8001000:	2204      	movs	r2, #4
 8001002:	4013      	ands	r3, r2
 8001004:	d110      	bne.n	8001028 <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	685a      	ldr	r2, [r3, #4]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	210c      	movs	r1, #12
 8001012:	438a      	bics	r2, r1
 8001014:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800101a:	4a10      	ldr	r2, [pc, #64]	; (800105c <HAL_ADC_PollForConversion+0x12c>)
 800101c:	4013      	ands	r3, r2
 800101e:	2201      	movs	r2, #1
 8001020:	431a      	orrs	r2, r3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	639a      	str	r2, [r3, #56]	; 0x38
 8001026:	e00b      	b.n	8001040 <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800102c:	2220      	movs	r2, #32
 800102e:	431a      	orrs	r2, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001038:	2201      	movs	r2, #1
 800103a:	431a      	orrs	r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	7e1b      	ldrb	r3, [r3, #24]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d103      	bne.n	8001050 <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	220c      	movs	r2, #12
 800104e:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001050:	2300      	movs	r3, #0
}
 8001052:	0018      	movs	r0, r3
 8001054:	46bd      	mov	sp, r7
 8001056:	b004      	add	sp, #16
 8001058:	bd80      	pop	{r7, pc}
 800105a:	46c0      	nop			; (mov r8, r8)
 800105c:	fffffefe 	.word	0xfffffefe

08001060 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800106e:	0018      	movs	r0, r3
 8001070:	46bd      	mov	sp, r7
 8001072:	b002      	add	sp, #8
 8001074:	bd80      	pop	{r7, pc}
	...

08001078 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001082:	230f      	movs	r3, #15
 8001084:	18fb      	adds	r3, r7, r3
 8001086:	2200      	movs	r2, #0
 8001088:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800108a:	2300      	movs	r3, #0
 800108c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001092:	2380      	movs	r3, #128	; 0x80
 8001094:	055b      	lsls	r3, r3, #21
 8001096:	429a      	cmp	r2, r3
 8001098:	d011      	beq.n	80010be <HAL_ADC_ConfigChannel+0x46>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d00d      	beq.n	80010be <HAL_ADC_ConfigChannel+0x46>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d009      	beq.n	80010be <HAL_ADC_ConfigChannel+0x46>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ae:	2b03      	cmp	r3, #3
 80010b0:	d005      	beq.n	80010be <HAL_ADC_ConfigChannel+0x46>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010b6:	2b04      	cmp	r3, #4
 80010b8:	d001      	beq.n	80010be <HAL_ADC_ConfigChannel+0x46>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2234      	movs	r2, #52	; 0x34
 80010c2:	5c9b      	ldrb	r3, [r3, r2]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d101      	bne.n	80010cc <HAL_ADC_ConfigChannel+0x54>
 80010c8:	2302      	movs	r3, #2
 80010ca:	e0d0      	b.n	800126e <HAL_ADC_ConfigChannel+0x1f6>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2234      	movs	r2, #52	; 0x34
 80010d0:	2101      	movs	r1, #1
 80010d2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	2204      	movs	r2, #4
 80010dc:	4013      	ands	r3, r2
 80010de:	d000      	beq.n	80010e2 <HAL_ADC_ConfigChannel+0x6a>
 80010e0:	e0b4      	b.n	800124c <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	4a64      	ldr	r2, [pc, #400]	; (8001278 <HAL_ADC_ConfigChannel+0x200>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d100      	bne.n	80010ee <HAL_ADC_ConfigChannel+0x76>
 80010ec:	e082      	b.n	80011f4 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2201      	movs	r2, #1
 80010fa:	409a      	lsls	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	430a      	orrs	r2, r1
 8001102:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001108:	2380      	movs	r3, #128	; 0x80
 800110a:	055b      	lsls	r3, r3, #21
 800110c:	429a      	cmp	r2, r3
 800110e:	d037      	beq.n	8001180 <HAL_ADC_ConfigChannel+0x108>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001114:	2b01      	cmp	r3, #1
 8001116:	d033      	beq.n	8001180 <HAL_ADC_ConfigChannel+0x108>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800111c:	2b02      	cmp	r3, #2
 800111e:	d02f      	beq.n	8001180 <HAL_ADC_ConfigChannel+0x108>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001124:	2b03      	cmp	r3, #3
 8001126:	d02b      	beq.n	8001180 <HAL_ADC_ConfigChannel+0x108>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800112c:	2b04      	cmp	r3, #4
 800112e:	d027      	beq.n	8001180 <HAL_ADC_ConfigChannel+0x108>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001134:	2b05      	cmp	r3, #5
 8001136:	d023      	beq.n	8001180 <HAL_ADC_ConfigChannel+0x108>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800113c:	2b06      	cmp	r3, #6
 800113e:	d01f      	beq.n	8001180 <HAL_ADC_ConfigChannel+0x108>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001144:	2b07      	cmp	r3, #7
 8001146:	d01b      	beq.n	8001180 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	689a      	ldr	r2, [r3, #8]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	695b      	ldr	r3, [r3, #20]
 8001152:	2107      	movs	r1, #7
 8001154:	400b      	ands	r3, r1
 8001156:	429a      	cmp	r2, r3
 8001158:	d012      	beq.n	8001180 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	695a      	ldr	r2, [r3, #20]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2107      	movs	r1, #7
 8001166:	438a      	bics	r2, r1
 8001168:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	6959      	ldr	r1, [r3, #20]
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	2207      	movs	r2, #7
 8001176:	401a      	ands	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	430a      	orrs	r2, r1
 800117e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2b10      	cmp	r3, #16
 8001186:	d007      	beq.n	8001198 <HAL_ADC_ConfigChannel+0x120>
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2b11      	cmp	r3, #17
 800118e:	d003      	beq.n	8001198 <HAL_ADC_ConfigChannel+0x120>
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2b12      	cmp	r3, #18
 8001196:	d163      	bne.n	8001260 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001198:	4b38      	ldr	r3, [pc, #224]	; (800127c <HAL_ADC_ConfigChannel+0x204>)
 800119a:	6819      	ldr	r1, [r3, #0]
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2b10      	cmp	r3, #16
 80011a2:	d009      	beq.n	80011b8 <HAL_ADC_ConfigChannel+0x140>
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2b11      	cmp	r3, #17
 80011aa:	d102      	bne.n	80011b2 <HAL_ADC_ConfigChannel+0x13a>
 80011ac:	2380      	movs	r3, #128	; 0x80
 80011ae:	03db      	lsls	r3, r3, #15
 80011b0:	e004      	b.n	80011bc <HAL_ADC_ConfigChannel+0x144>
 80011b2:	2380      	movs	r3, #128	; 0x80
 80011b4:	045b      	lsls	r3, r3, #17
 80011b6:	e001      	b.n	80011bc <HAL_ADC_ConfigChannel+0x144>
 80011b8:	2380      	movs	r3, #128	; 0x80
 80011ba:	041b      	lsls	r3, r3, #16
 80011bc:	4a2f      	ldr	r2, [pc, #188]	; (800127c <HAL_ADC_ConfigChannel+0x204>)
 80011be:	430b      	orrs	r3, r1
 80011c0:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	2b10      	cmp	r3, #16
 80011c8:	d14a      	bne.n	8001260 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80011ca:	4b2d      	ldr	r3, [pc, #180]	; (8001280 <HAL_ADC_ConfigChannel+0x208>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	492d      	ldr	r1, [pc, #180]	; (8001284 <HAL_ADC_ConfigChannel+0x20c>)
 80011d0:	0018      	movs	r0, r3
 80011d2:	f7fe ff97 	bl	8000104 <__udivsi3>
 80011d6:	0003      	movs	r3, r0
 80011d8:	001a      	movs	r2, r3
 80011da:	0013      	movs	r3, r2
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	189b      	adds	r3, r3, r2
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011e4:	e002      	b.n	80011ec <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	3b01      	subs	r3, #1
 80011ea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d1f9      	bne.n	80011e6 <HAL_ADC_ConfigChannel+0x16e>
 80011f2:	e035      	b.n	8001260 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	2101      	movs	r1, #1
 8001200:	4099      	lsls	r1, r3
 8001202:	000b      	movs	r3, r1
 8001204:	43d9      	mvns	r1, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	400a      	ands	r2, r1
 800120c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2b10      	cmp	r3, #16
 8001214:	d007      	beq.n	8001226 <HAL_ADC_ConfigChannel+0x1ae>
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2b11      	cmp	r3, #17
 800121c:	d003      	beq.n	8001226 <HAL_ADC_ConfigChannel+0x1ae>
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2b12      	cmp	r3, #18
 8001224:	d11c      	bne.n	8001260 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001226:	4b15      	ldr	r3, [pc, #84]	; (800127c <HAL_ADC_ConfigChannel+0x204>)
 8001228:	6819      	ldr	r1, [r3, #0]
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2b10      	cmp	r3, #16
 8001230:	d007      	beq.n	8001242 <HAL_ADC_ConfigChannel+0x1ca>
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	2b11      	cmp	r3, #17
 8001238:	d101      	bne.n	800123e <HAL_ADC_ConfigChannel+0x1c6>
 800123a:	4b13      	ldr	r3, [pc, #76]	; (8001288 <HAL_ADC_ConfigChannel+0x210>)
 800123c:	e002      	b.n	8001244 <HAL_ADC_ConfigChannel+0x1cc>
 800123e:	4b13      	ldr	r3, [pc, #76]	; (800128c <HAL_ADC_ConfigChannel+0x214>)
 8001240:	e000      	b.n	8001244 <HAL_ADC_ConfigChannel+0x1cc>
 8001242:	4b13      	ldr	r3, [pc, #76]	; (8001290 <HAL_ADC_ConfigChannel+0x218>)
 8001244:	4a0d      	ldr	r2, [pc, #52]	; (800127c <HAL_ADC_ConfigChannel+0x204>)
 8001246:	400b      	ands	r3, r1
 8001248:	6013      	str	r3, [r2, #0]
 800124a:	e009      	b.n	8001260 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001250:	2220      	movs	r2, #32
 8001252:	431a      	orrs	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001258:	230f      	movs	r3, #15
 800125a:	18fb      	adds	r3, r7, r3
 800125c:	2201      	movs	r2, #1
 800125e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2234      	movs	r2, #52	; 0x34
 8001264:	2100      	movs	r1, #0
 8001266:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001268:	230f      	movs	r3, #15
 800126a:	18fb      	adds	r3, r7, r3
 800126c:	781b      	ldrb	r3, [r3, #0]
}
 800126e:	0018      	movs	r0, r3
 8001270:	46bd      	mov	sp, r7
 8001272:	b004      	add	sp, #16
 8001274:	bd80      	pop	{r7, pc}
 8001276:	46c0      	nop			; (mov r8, r8)
 8001278:	00001001 	.word	0x00001001
 800127c:	40012708 	.word	0x40012708
 8001280:	20000000 	.word	0x20000000
 8001284:	000f4240 	.word	0x000f4240
 8001288:	ffbfffff 	.word	0xffbfffff
 800128c:	feffffff 	.word	0xfeffffff
 8001290:	ff7fffff 	.word	0xff7fffff

08001294 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800129c:	2300      	movs	r3, #0
 800129e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80012a0:	2300      	movs	r3, #0
 80012a2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	2203      	movs	r2, #3
 80012ac:	4013      	ands	r3, r2
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d112      	bne.n	80012d8 <ADC_Enable+0x44>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2201      	movs	r2, #1
 80012ba:	4013      	ands	r3, r2
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d009      	beq.n	80012d4 <ADC_Enable+0x40>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	68da      	ldr	r2, [r3, #12]
 80012c6:	2380      	movs	r3, #128	; 0x80
 80012c8:	021b      	lsls	r3, r3, #8
 80012ca:	401a      	ands	r2, r3
 80012cc:	2380      	movs	r3, #128	; 0x80
 80012ce:	021b      	lsls	r3, r3, #8
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d101      	bne.n	80012d8 <ADC_Enable+0x44>
 80012d4:	2301      	movs	r3, #1
 80012d6:	e000      	b.n	80012da <ADC_Enable+0x46>
 80012d8:	2300      	movs	r3, #0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d152      	bne.n	8001384 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	4a2a      	ldr	r2, [pc, #168]	; (8001390 <ADC_Enable+0xfc>)
 80012e6:	4013      	ands	r3, r2
 80012e8:	d00d      	beq.n	8001306 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012ee:	2210      	movs	r2, #16
 80012f0:	431a      	orrs	r2, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012fa:	2201      	movs	r2, #1
 80012fc:	431a      	orrs	r2, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e03f      	b.n	8001386 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	689a      	ldr	r2, [r3, #8]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2101      	movs	r1, #1
 8001312:	430a      	orrs	r2, r1
 8001314:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001316:	4b1f      	ldr	r3, [pc, #124]	; (8001394 <ADC_Enable+0x100>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	491f      	ldr	r1, [pc, #124]	; (8001398 <ADC_Enable+0x104>)
 800131c:	0018      	movs	r0, r3
 800131e:	f7fe fef1 	bl	8000104 <__udivsi3>
 8001322:	0003      	movs	r3, r0
 8001324:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001326:	e002      	b.n	800132e <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	3b01      	subs	r3, #1
 800132c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d1f9      	bne.n	8001328 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001334:	f7ff fc3a 	bl	8000bac <HAL_GetTick>
 8001338:	0003      	movs	r3, r0
 800133a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800133c:	e01b      	b.n	8001376 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800133e:	f7ff fc35 	bl	8000bac <HAL_GetTick>
 8001342:	0002      	movs	r2, r0
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	2b02      	cmp	r3, #2
 800134a:	d914      	bls.n	8001376 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	2201      	movs	r2, #1
 8001354:	4013      	ands	r3, r2
 8001356:	2b01      	cmp	r3, #1
 8001358:	d00d      	beq.n	8001376 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800135e:	2210      	movs	r2, #16
 8001360:	431a      	orrs	r2, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800136a:	2201      	movs	r2, #1
 800136c:	431a      	orrs	r2, r3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e007      	b.n	8001386 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2201      	movs	r2, #1
 800137e:	4013      	ands	r3, r2
 8001380:	2b01      	cmp	r3, #1
 8001382:	d1dc      	bne.n	800133e <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001384:	2300      	movs	r3, #0
}
 8001386:	0018      	movs	r0, r3
 8001388:	46bd      	mov	sp, r7
 800138a:	b004      	add	sp, #16
 800138c:	bd80      	pop	{r7, pc}
 800138e:	46c0      	nop			; (mov r8, r8)
 8001390:	80000017 	.word	0x80000017
 8001394:	20000000 	.word	0x20000000
 8001398:	000f4240 	.word	0x000f4240

0800139c <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013a4:	2317      	movs	r3, #23
 80013a6:	18fb      	adds	r3, r7, r3
 80013a8:	2200      	movs	r2, #0
 80013aa:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 80013ac:	2300      	movs	r3, #0
 80013ae:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 80013b0:	2300      	movs	r3, #0
 80013b2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2234      	movs	r2, #52	; 0x34
 80013b8:	5c9b      	ldrb	r3, [r3, r2]
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d101      	bne.n	80013c2 <HAL_ADCEx_Calibration_Start+0x26>
 80013be:	2302      	movs	r3, #2
 80013c0:	e08d      	b.n	80014de <HAL_ADCEx_Calibration_Start+0x142>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2234      	movs	r2, #52	; 0x34
 80013c6:	2101      	movs	r1, #1
 80013c8:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	2203      	movs	r2, #3
 80013d2:	4013      	ands	r3, r2
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d112      	bne.n	80013fe <HAL_ADCEx_Calibration_Start+0x62>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2201      	movs	r2, #1
 80013e0:	4013      	ands	r3, r2
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d009      	beq.n	80013fa <HAL_ADCEx_Calibration_Start+0x5e>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	68da      	ldr	r2, [r3, #12]
 80013ec:	2380      	movs	r3, #128	; 0x80
 80013ee:	021b      	lsls	r3, r3, #8
 80013f0:	401a      	ands	r2, r3
 80013f2:	2380      	movs	r3, #128	; 0x80
 80013f4:	021b      	lsls	r3, r3, #8
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d101      	bne.n	80013fe <HAL_ADCEx_Calibration_Start+0x62>
 80013fa:	2301      	movs	r3, #1
 80013fc:	e000      	b.n	8001400 <HAL_ADCEx_Calibration_Start+0x64>
 80013fe:	2300      	movs	r3, #0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d15b      	bne.n	80014bc <HAL_ADCEx_Calibration_Start+0x120>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001408:	4a37      	ldr	r2, [pc, #220]	; (80014e8 <HAL_ADCEx_Calibration_Start+0x14c>)
 800140a:	4013      	ands	r3, r2
 800140c:	2202      	movs	r2, #2
 800140e:	431a      	orrs	r2, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	68db      	ldr	r3, [r3, #12]
 800141a:	2203      	movs	r2, #3
 800141c:	4013      	ands	r3, r2
 800141e:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	68da      	ldr	r2, [r3, #12]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2103      	movs	r1, #3
 800142c:	438a      	bics	r2, r1
 800142e:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	689a      	ldr	r2, [r3, #8]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2180      	movs	r1, #128	; 0x80
 800143c:	0609      	lsls	r1, r1, #24
 800143e:	430a      	orrs	r2, r1
 8001440:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8001442:	f7ff fbb3 	bl	8000bac <HAL_GetTick>
 8001446:	0003      	movs	r3, r0
 8001448:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800144a:	e01d      	b.n	8001488 <HAL_ADCEx_Calibration_Start+0xec>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800144c:	f7ff fbae 	bl	8000bac <HAL_GetTick>
 8001450:	0002      	movs	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b02      	cmp	r3, #2
 8001458:	d916      	bls.n	8001488 <HAL_ADCEx_Calibration_Start+0xec>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	0fdb      	lsrs	r3, r3, #31
 8001462:	07da      	lsls	r2, r3, #31
 8001464:	2380      	movs	r3, #128	; 0x80
 8001466:	061b      	lsls	r3, r3, #24
 8001468:	429a      	cmp	r2, r3
 800146a:	d10d      	bne.n	8001488 <HAL_ADCEx_Calibration_Start+0xec>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001470:	2212      	movs	r2, #18
 8001472:	4393      	bics	r3, r2
 8001474:	2210      	movs	r2, #16
 8001476:	431a      	orrs	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	639a      	str	r2, [r3, #56]	; 0x38
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2234      	movs	r2, #52	; 0x34
 8001480:	2100      	movs	r1, #0
 8001482:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e02a      	b.n	80014de <HAL_ADCEx_Calibration_Start+0x142>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	0fdb      	lsrs	r3, r3, #31
 8001490:	07da      	lsls	r2, r3, #31
 8001492:	2380      	movs	r3, #128	; 0x80
 8001494:	061b      	lsls	r3, r3, #24
 8001496:	429a      	cmp	r2, r3
 8001498:	d0d8      	beq.n	800144c <HAL_ADCEx_Calibration_Start+0xb0>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	68d9      	ldr	r1, [r3, #12]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	68fa      	ldr	r2, [r7, #12]
 80014a6:	430a      	orrs	r2, r1
 80014a8:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014ae:	2203      	movs	r2, #3
 80014b0:	4393      	bics	r3, r2
 80014b2:	2201      	movs	r2, #1
 80014b4:	431a      	orrs	r2, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	639a      	str	r2, [r3, #56]	; 0x38
 80014ba:	e009      	b.n	80014d0 <HAL_ADCEx_Calibration_Start+0x134>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014c0:	2220      	movs	r2, #32
 80014c2:	431a      	orrs	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80014c8:	2317      	movs	r3, #23
 80014ca:	18fb      	adds	r3, r7, r3
 80014cc:	2201      	movs	r2, #1
 80014ce:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2234      	movs	r2, #52	; 0x34
 80014d4:	2100      	movs	r1, #0
 80014d6:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80014d8:	2317      	movs	r3, #23
 80014da:	18fb      	adds	r3, r7, r3
 80014dc:	781b      	ldrb	r3, [r3, #0]
}
 80014de:	0018      	movs	r0, r3
 80014e0:	46bd      	mov	sp, r7
 80014e2:	b006      	add	sp, #24
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	46c0      	nop			; (mov r8, r8)
 80014e8:	fffffefd 	.word	0xfffffefd

080014ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014ec:	b590      	push	{r4, r7, lr}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	0002      	movs	r2, r0
 80014f4:	6039      	str	r1, [r7, #0]
 80014f6:	1dfb      	adds	r3, r7, #7
 80014f8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80014fa:	1dfb      	adds	r3, r7, #7
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	2b7f      	cmp	r3, #127	; 0x7f
 8001500:	d828      	bhi.n	8001554 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001502:	4a2f      	ldr	r2, [pc, #188]	; (80015c0 <__NVIC_SetPriority+0xd4>)
 8001504:	1dfb      	adds	r3, r7, #7
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	b25b      	sxtb	r3, r3
 800150a:	089b      	lsrs	r3, r3, #2
 800150c:	33c0      	adds	r3, #192	; 0xc0
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	589b      	ldr	r3, [r3, r2]
 8001512:	1dfa      	adds	r2, r7, #7
 8001514:	7812      	ldrb	r2, [r2, #0]
 8001516:	0011      	movs	r1, r2
 8001518:	2203      	movs	r2, #3
 800151a:	400a      	ands	r2, r1
 800151c:	00d2      	lsls	r2, r2, #3
 800151e:	21ff      	movs	r1, #255	; 0xff
 8001520:	4091      	lsls	r1, r2
 8001522:	000a      	movs	r2, r1
 8001524:	43d2      	mvns	r2, r2
 8001526:	401a      	ands	r2, r3
 8001528:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	019b      	lsls	r3, r3, #6
 800152e:	22ff      	movs	r2, #255	; 0xff
 8001530:	401a      	ands	r2, r3
 8001532:	1dfb      	adds	r3, r7, #7
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	0018      	movs	r0, r3
 8001538:	2303      	movs	r3, #3
 800153a:	4003      	ands	r3, r0
 800153c:	00db      	lsls	r3, r3, #3
 800153e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001540:	481f      	ldr	r0, [pc, #124]	; (80015c0 <__NVIC_SetPriority+0xd4>)
 8001542:	1dfb      	adds	r3, r7, #7
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	b25b      	sxtb	r3, r3
 8001548:	089b      	lsrs	r3, r3, #2
 800154a:	430a      	orrs	r2, r1
 800154c:	33c0      	adds	r3, #192	; 0xc0
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001552:	e031      	b.n	80015b8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001554:	4a1b      	ldr	r2, [pc, #108]	; (80015c4 <__NVIC_SetPriority+0xd8>)
 8001556:	1dfb      	adds	r3, r7, #7
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	0019      	movs	r1, r3
 800155c:	230f      	movs	r3, #15
 800155e:	400b      	ands	r3, r1
 8001560:	3b08      	subs	r3, #8
 8001562:	089b      	lsrs	r3, r3, #2
 8001564:	3306      	adds	r3, #6
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	18d3      	adds	r3, r2, r3
 800156a:	3304      	adds	r3, #4
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	1dfa      	adds	r2, r7, #7
 8001570:	7812      	ldrb	r2, [r2, #0]
 8001572:	0011      	movs	r1, r2
 8001574:	2203      	movs	r2, #3
 8001576:	400a      	ands	r2, r1
 8001578:	00d2      	lsls	r2, r2, #3
 800157a:	21ff      	movs	r1, #255	; 0xff
 800157c:	4091      	lsls	r1, r2
 800157e:	000a      	movs	r2, r1
 8001580:	43d2      	mvns	r2, r2
 8001582:	401a      	ands	r2, r3
 8001584:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	019b      	lsls	r3, r3, #6
 800158a:	22ff      	movs	r2, #255	; 0xff
 800158c:	401a      	ands	r2, r3
 800158e:	1dfb      	adds	r3, r7, #7
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	0018      	movs	r0, r3
 8001594:	2303      	movs	r3, #3
 8001596:	4003      	ands	r3, r0
 8001598:	00db      	lsls	r3, r3, #3
 800159a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800159c:	4809      	ldr	r0, [pc, #36]	; (80015c4 <__NVIC_SetPriority+0xd8>)
 800159e:	1dfb      	adds	r3, r7, #7
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	001c      	movs	r4, r3
 80015a4:	230f      	movs	r3, #15
 80015a6:	4023      	ands	r3, r4
 80015a8:	3b08      	subs	r3, #8
 80015aa:	089b      	lsrs	r3, r3, #2
 80015ac:	430a      	orrs	r2, r1
 80015ae:	3306      	adds	r3, #6
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	18c3      	adds	r3, r0, r3
 80015b4:	3304      	adds	r3, #4
 80015b6:	601a      	str	r2, [r3, #0]
}
 80015b8:	46c0      	nop			; (mov r8, r8)
 80015ba:	46bd      	mov	sp, r7
 80015bc:	b003      	add	sp, #12
 80015be:	bd90      	pop	{r4, r7, pc}
 80015c0:	e000e100 	.word	0xe000e100
 80015c4:	e000ed00 	.word	0xe000ed00

080015c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	1e5a      	subs	r2, r3, #1
 80015d4:	2380      	movs	r3, #128	; 0x80
 80015d6:	045b      	lsls	r3, r3, #17
 80015d8:	429a      	cmp	r2, r3
 80015da:	d301      	bcc.n	80015e0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015dc:	2301      	movs	r3, #1
 80015de:	e010      	b.n	8001602 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015e0:	4b0a      	ldr	r3, [pc, #40]	; (800160c <SysTick_Config+0x44>)
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	3a01      	subs	r2, #1
 80015e6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015e8:	2301      	movs	r3, #1
 80015ea:	425b      	negs	r3, r3
 80015ec:	2103      	movs	r1, #3
 80015ee:	0018      	movs	r0, r3
 80015f0:	f7ff ff7c 	bl	80014ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015f4:	4b05      	ldr	r3, [pc, #20]	; (800160c <SysTick_Config+0x44>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015fa:	4b04      	ldr	r3, [pc, #16]	; (800160c <SysTick_Config+0x44>)
 80015fc:	2207      	movs	r2, #7
 80015fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001600:	2300      	movs	r3, #0
}
 8001602:	0018      	movs	r0, r3
 8001604:	46bd      	mov	sp, r7
 8001606:	b002      	add	sp, #8
 8001608:	bd80      	pop	{r7, pc}
 800160a:	46c0      	nop			; (mov r8, r8)
 800160c:	e000e010 	.word	0xe000e010

08001610 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	60b9      	str	r1, [r7, #8]
 8001618:	607a      	str	r2, [r7, #4]
 800161a:	210f      	movs	r1, #15
 800161c:	187b      	adds	r3, r7, r1
 800161e:	1c02      	adds	r2, r0, #0
 8001620:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001622:	68ba      	ldr	r2, [r7, #8]
 8001624:	187b      	adds	r3, r7, r1
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	b25b      	sxtb	r3, r3
 800162a:	0011      	movs	r1, r2
 800162c:	0018      	movs	r0, r3
 800162e:	f7ff ff5d 	bl	80014ec <__NVIC_SetPriority>
}
 8001632:	46c0      	nop			; (mov r8, r8)
 8001634:	46bd      	mov	sp, r7
 8001636:	b004      	add	sp, #16
 8001638:	bd80      	pop	{r7, pc}

0800163a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b082      	sub	sp, #8
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	0018      	movs	r0, r3
 8001646:	f7ff ffbf 	bl	80015c8 <SysTick_Config>
 800164a:	0003      	movs	r3, r0
}
 800164c:	0018      	movs	r0, r3
 800164e:	46bd      	mov	sp, r7
 8001650:	b002      	add	sp, #8
 8001652:	bd80      	pop	{r7, pc}

08001654 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800165e:	2300      	movs	r3, #0
 8001660:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001662:	e155      	b.n	8001910 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2101      	movs	r1, #1
 800166a:	697a      	ldr	r2, [r7, #20]
 800166c:	4091      	lsls	r1, r2
 800166e:	000a      	movs	r2, r1
 8001670:	4013      	ands	r3, r2
 8001672:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d100      	bne.n	800167c <HAL_GPIO_Init+0x28>
 800167a:	e146      	b.n	800190a <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	2203      	movs	r2, #3
 8001682:	4013      	ands	r3, r2
 8001684:	2b01      	cmp	r3, #1
 8001686:	d005      	beq.n	8001694 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	2203      	movs	r2, #3
 800168e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001690:	2b02      	cmp	r3, #2
 8001692:	d130      	bne.n	80016f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	2203      	movs	r2, #3
 80016a0:	409a      	lsls	r2, r3
 80016a2:	0013      	movs	r3, r2
 80016a4:	43da      	mvns	r2, r3
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	4013      	ands	r3, r2
 80016aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	68da      	ldr	r2, [r3, #12]
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	409a      	lsls	r2, r3
 80016b6:	0013      	movs	r3, r2
 80016b8:	693a      	ldr	r2, [r7, #16]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	693a      	ldr	r2, [r7, #16]
 80016c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016ca:	2201      	movs	r2, #1
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	409a      	lsls	r2, r3
 80016d0:	0013      	movs	r3, r2
 80016d2:	43da      	mvns	r2, r3
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	4013      	ands	r3, r2
 80016d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	091b      	lsrs	r3, r3, #4
 80016e0:	2201      	movs	r2, #1
 80016e2:	401a      	ands	r2, r3
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	409a      	lsls	r2, r3
 80016e8:	0013      	movs	r3, r2
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	2203      	movs	r2, #3
 80016fc:	4013      	ands	r3, r2
 80016fe:	2b03      	cmp	r3, #3
 8001700:	d017      	beq.n	8001732 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	2203      	movs	r2, #3
 800170e:	409a      	lsls	r2, r3
 8001710:	0013      	movs	r3, r2
 8001712:	43da      	mvns	r2, r3
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	4013      	ands	r3, r2
 8001718:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	689a      	ldr	r2, [r3, #8]
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	409a      	lsls	r2, r3
 8001724:	0013      	movs	r3, r2
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	4313      	orrs	r3, r2
 800172a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	2203      	movs	r2, #3
 8001738:	4013      	ands	r3, r2
 800173a:	2b02      	cmp	r3, #2
 800173c:	d123      	bne.n	8001786 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	08da      	lsrs	r2, r3, #3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	3208      	adds	r2, #8
 8001746:	0092      	lsls	r2, r2, #2
 8001748:	58d3      	ldr	r3, [r2, r3]
 800174a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	2207      	movs	r2, #7
 8001750:	4013      	ands	r3, r2
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	220f      	movs	r2, #15
 8001756:	409a      	lsls	r2, r3
 8001758:	0013      	movs	r3, r2
 800175a:	43da      	mvns	r2, r3
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	4013      	ands	r3, r2
 8001760:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	691a      	ldr	r2, [r3, #16]
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	2107      	movs	r1, #7
 800176a:	400b      	ands	r3, r1
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	409a      	lsls	r2, r3
 8001770:	0013      	movs	r3, r2
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	4313      	orrs	r3, r2
 8001776:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	08da      	lsrs	r2, r3, #3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	3208      	adds	r2, #8
 8001780:	0092      	lsls	r2, r2, #2
 8001782:	6939      	ldr	r1, [r7, #16]
 8001784:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	2203      	movs	r2, #3
 8001792:	409a      	lsls	r2, r3
 8001794:	0013      	movs	r3, r2
 8001796:	43da      	mvns	r2, r3
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	4013      	ands	r3, r2
 800179c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	2203      	movs	r2, #3
 80017a4:	401a      	ands	r2, r3
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	409a      	lsls	r2, r3
 80017ac:	0013      	movs	r3, r2
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685a      	ldr	r2, [r3, #4]
 80017be:	23c0      	movs	r3, #192	; 0xc0
 80017c0:	029b      	lsls	r3, r3, #10
 80017c2:	4013      	ands	r3, r2
 80017c4:	d100      	bne.n	80017c8 <HAL_GPIO_Init+0x174>
 80017c6:	e0a0      	b.n	800190a <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017c8:	4b57      	ldr	r3, [pc, #348]	; (8001928 <HAL_GPIO_Init+0x2d4>)
 80017ca:	699a      	ldr	r2, [r3, #24]
 80017cc:	4b56      	ldr	r3, [pc, #344]	; (8001928 <HAL_GPIO_Init+0x2d4>)
 80017ce:	2101      	movs	r1, #1
 80017d0:	430a      	orrs	r2, r1
 80017d2:	619a      	str	r2, [r3, #24]
 80017d4:	4b54      	ldr	r3, [pc, #336]	; (8001928 <HAL_GPIO_Init+0x2d4>)
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	2201      	movs	r2, #1
 80017da:	4013      	ands	r3, r2
 80017dc:	60bb      	str	r3, [r7, #8]
 80017de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017e0:	4a52      	ldr	r2, [pc, #328]	; (800192c <HAL_GPIO_Init+0x2d8>)
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	089b      	lsrs	r3, r3, #2
 80017e6:	3302      	adds	r3, #2
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	589b      	ldr	r3, [r3, r2]
 80017ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	2203      	movs	r2, #3
 80017f2:	4013      	ands	r3, r2
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	220f      	movs	r2, #15
 80017f8:	409a      	lsls	r2, r3
 80017fa:	0013      	movs	r3, r2
 80017fc:	43da      	mvns	r2, r3
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	4013      	ands	r3, r2
 8001802:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	2390      	movs	r3, #144	; 0x90
 8001808:	05db      	lsls	r3, r3, #23
 800180a:	429a      	cmp	r2, r3
 800180c:	d019      	beq.n	8001842 <HAL_GPIO_Init+0x1ee>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a47      	ldr	r2, [pc, #284]	; (8001930 <HAL_GPIO_Init+0x2dc>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d013      	beq.n	800183e <HAL_GPIO_Init+0x1ea>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a46      	ldr	r2, [pc, #280]	; (8001934 <HAL_GPIO_Init+0x2e0>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d00d      	beq.n	800183a <HAL_GPIO_Init+0x1e6>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a45      	ldr	r2, [pc, #276]	; (8001938 <HAL_GPIO_Init+0x2e4>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d007      	beq.n	8001836 <HAL_GPIO_Init+0x1e2>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a44      	ldr	r2, [pc, #272]	; (800193c <HAL_GPIO_Init+0x2e8>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d101      	bne.n	8001832 <HAL_GPIO_Init+0x1de>
 800182e:	2304      	movs	r3, #4
 8001830:	e008      	b.n	8001844 <HAL_GPIO_Init+0x1f0>
 8001832:	2305      	movs	r3, #5
 8001834:	e006      	b.n	8001844 <HAL_GPIO_Init+0x1f0>
 8001836:	2303      	movs	r3, #3
 8001838:	e004      	b.n	8001844 <HAL_GPIO_Init+0x1f0>
 800183a:	2302      	movs	r3, #2
 800183c:	e002      	b.n	8001844 <HAL_GPIO_Init+0x1f0>
 800183e:	2301      	movs	r3, #1
 8001840:	e000      	b.n	8001844 <HAL_GPIO_Init+0x1f0>
 8001842:	2300      	movs	r3, #0
 8001844:	697a      	ldr	r2, [r7, #20]
 8001846:	2103      	movs	r1, #3
 8001848:	400a      	ands	r2, r1
 800184a:	0092      	lsls	r2, r2, #2
 800184c:	4093      	lsls	r3, r2
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	4313      	orrs	r3, r2
 8001852:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001854:	4935      	ldr	r1, [pc, #212]	; (800192c <HAL_GPIO_Init+0x2d8>)
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	089b      	lsrs	r3, r3, #2
 800185a:	3302      	adds	r3, #2
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001862:	4b37      	ldr	r3, [pc, #220]	; (8001940 <HAL_GPIO_Init+0x2ec>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	43da      	mvns	r2, r3
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	4013      	ands	r3, r2
 8001870:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685a      	ldr	r2, [r3, #4]
 8001876:	2380      	movs	r3, #128	; 0x80
 8001878:	025b      	lsls	r3, r3, #9
 800187a:	4013      	ands	r3, r2
 800187c:	d003      	beq.n	8001886 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	4313      	orrs	r3, r2
 8001884:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001886:	4b2e      	ldr	r3, [pc, #184]	; (8001940 <HAL_GPIO_Init+0x2ec>)
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800188c:	4b2c      	ldr	r3, [pc, #176]	; (8001940 <HAL_GPIO_Init+0x2ec>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	43da      	mvns	r2, r3
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	4013      	ands	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685a      	ldr	r2, [r3, #4]
 80018a0:	2380      	movs	r3, #128	; 0x80
 80018a2:	029b      	lsls	r3, r3, #10
 80018a4:	4013      	ands	r3, r2
 80018a6:	d003      	beq.n	80018b0 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80018b0:	4b23      	ldr	r3, [pc, #140]	; (8001940 <HAL_GPIO_Init+0x2ec>)
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018b6:	4b22      	ldr	r3, [pc, #136]	; (8001940 <HAL_GPIO_Init+0x2ec>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	43da      	mvns	r2, r3
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	4013      	ands	r3, r2
 80018c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685a      	ldr	r2, [r3, #4]
 80018ca:	2380      	movs	r3, #128	; 0x80
 80018cc:	035b      	lsls	r3, r3, #13
 80018ce:	4013      	ands	r3, r2
 80018d0:	d003      	beq.n	80018da <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80018da:	4b19      	ldr	r3, [pc, #100]	; (8001940 <HAL_GPIO_Init+0x2ec>)
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80018e0:	4b17      	ldr	r3, [pc, #92]	; (8001940 <HAL_GPIO_Init+0x2ec>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	43da      	mvns	r2, r3
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	4013      	ands	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685a      	ldr	r2, [r3, #4]
 80018f4:	2380      	movs	r3, #128	; 0x80
 80018f6:	039b      	lsls	r3, r3, #14
 80018f8:	4013      	ands	r3, r2
 80018fa:	d003      	beq.n	8001904 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	4313      	orrs	r3, r2
 8001902:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001904:	4b0e      	ldr	r3, [pc, #56]	; (8001940 <HAL_GPIO_Init+0x2ec>)
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	3301      	adds	r3, #1
 800190e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	40da      	lsrs	r2, r3
 8001918:	1e13      	subs	r3, r2, #0
 800191a:	d000      	beq.n	800191e <HAL_GPIO_Init+0x2ca>
 800191c:	e6a2      	b.n	8001664 <HAL_GPIO_Init+0x10>
  } 
}
 800191e:	46c0      	nop			; (mov r8, r8)
 8001920:	46c0      	nop			; (mov r8, r8)
 8001922:	46bd      	mov	sp, r7
 8001924:	b006      	add	sp, #24
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40021000 	.word	0x40021000
 800192c:	40010000 	.word	0x40010000
 8001930:	48000400 	.word	0x48000400
 8001934:	48000800 	.word	0x48000800
 8001938:	48000c00 	.word	0x48000c00
 800193c:	48001000 	.word	0x48001000
 8001940:	40010400 	.word	0x40010400

08001944 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	0008      	movs	r0, r1
 800194e:	0011      	movs	r1, r2
 8001950:	1cbb      	adds	r3, r7, #2
 8001952:	1c02      	adds	r2, r0, #0
 8001954:	801a      	strh	r2, [r3, #0]
 8001956:	1c7b      	adds	r3, r7, #1
 8001958:	1c0a      	adds	r2, r1, #0
 800195a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800195c:	1c7b      	adds	r3, r7, #1
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d004      	beq.n	800196e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001964:	1cbb      	adds	r3, r7, #2
 8001966:	881a      	ldrh	r2, [r3, #0]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800196c:	e003      	b.n	8001976 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800196e:	1cbb      	adds	r3, r7, #2
 8001970:	881a      	ldrh	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001976:	46c0      	nop			; (mov r8, r8)
 8001978:	46bd      	mov	sp, r7
 800197a:	b002      	add	sp, #8
 800197c:	bd80      	pop	{r7, pc}

0800197e <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b084      	sub	sp, #16
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
 8001986:	000a      	movs	r2, r1
 8001988:	1cbb      	adds	r3, r7, #2
 800198a:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	695b      	ldr	r3, [r3, #20]
 8001990:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001992:	1cbb      	adds	r3, r7, #2
 8001994:	881b      	ldrh	r3, [r3, #0]
 8001996:	68fa      	ldr	r2, [r7, #12]
 8001998:	4013      	ands	r3, r2
 800199a:	041a      	lsls	r2, r3, #16
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	43db      	mvns	r3, r3
 80019a0:	1cb9      	adds	r1, r7, #2
 80019a2:	8809      	ldrh	r1, [r1, #0]
 80019a4:	400b      	ands	r3, r1
 80019a6:	431a      	orrs	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	619a      	str	r2, [r3, #24]
}
 80019ac:	46c0      	nop			; (mov r8, r8)
 80019ae:	46bd      	mov	sp, r7
 80019b0:	b004      	add	sp, #16
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d101      	bne.n	80019c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e082      	b.n	8001acc <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2241      	movs	r2, #65	; 0x41
 80019ca:	5c9b      	ldrb	r3, [r3, r2]
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d107      	bne.n	80019e2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2240      	movs	r2, #64	; 0x40
 80019d6:	2100      	movs	r1, #0
 80019d8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	0018      	movs	r0, r3
 80019de:	f7fe ffa9 	bl	8000934 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2241      	movs	r2, #65	; 0x41
 80019e6:	2124      	movs	r1, #36	; 0x24
 80019e8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2101      	movs	r1, #1
 80019f6:	438a      	bics	r2, r1
 80019f8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685a      	ldr	r2, [r3, #4]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4934      	ldr	r1, [pc, #208]	; (8001ad4 <HAL_I2C_Init+0x120>)
 8001a04:	400a      	ands	r2, r1
 8001a06:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	689a      	ldr	r2, [r3, #8]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4931      	ldr	r1, [pc, #196]	; (8001ad8 <HAL_I2C_Init+0x124>)
 8001a14:	400a      	ands	r2, r1
 8001a16:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d108      	bne.n	8001a32 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689a      	ldr	r2, [r3, #8]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2180      	movs	r1, #128	; 0x80
 8001a2a:	0209      	lsls	r1, r1, #8
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	609a      	str	r2, [r3, #8]
 8001a30:	e007      	b.n	8001a42 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	689a      	ldr	r2, [r3, #8]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2184      	movs	r1, #132	; 0x84
 8001a3c:	0209      	lsls	r1, r1, #8
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d104      	bne.n	8001a54 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2280      	movs	r2, #128	; 0x80
 8001a50:	0112      	lsls	r2, r2, #4
 8001a52:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	685a      	ldr	r2, [r3, #4]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	491f      	ldr	r1, [pc, #124]	; (8001adc <HAL_I2C_Init+0x128>)
 8001a60:	430a      	orrs	r2, r1
 8001a62:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	68da      	ldr	r2, [r3, #12]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	491a      	ldr	r1, [pc, #104]	; (8001ad8 <HAL_I2C_Init+0x124>)
 8001a70:	400a      	ands	r2, r1
 8001a72:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	691a      	ldr	r2, [r3, #16]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	695b      	ldr	r3, [r3, #20]
 8001a7c:	431a      	orrs	r2, r3
 8001a7e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	69d9      	ldr	r1, [r3, #28]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a1a      	ldr	r2, [r3, #32]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2101      	movs	r1, #1
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2241      	movs	r2, #65	; 0x41
 8001ab8:	2120      	movs	r1, #32
 8001aba:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2242      	movs	r2, #66	; 0x42
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	0018      	movs	r0, r3
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	b002      	add	sp, #8
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	f0ffffff 	.word	0xf0ffffff
 8001ad8:	ffff7fff 	.word	0xffff7fff
 8001adc:	02008000 	.word	0x02008000

08001ae0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001ae0:	b590      	push	{r4, r7, lr}
 8001ae2:	b089      	sub	sp, #36	; 0x24
 8001ae4:	af02      	add	r7, sp, #8
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	0008      	movs	r0, r1
 8001aea:	607a      	str	r2, [r7, #4]
 8001aec:	0019      	movs	r1, r3
 8001aee:	230a      	movs	r3, #10
 8001af0:	18fb      	adds	r3, r7, r3
 8001af2:	1c02      	adds	r2, r0, #0
 8001af4:	801a      	strh	r2, [r3, #0]
 8001af6:	2308      	movs	r3, #8
 8001af8:	18fb      	adds	r3, r7, r3
 8001afa:	1c0a      	adds	r2, r1, #0
 8001afc:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2241      	movs	r2, #65	; 0x41
 8001b02:	5c9b      	ldrb	r3, [r3, r2]
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2b20      	cmp	r3, #32
 8001b08:	d000      	beq.n	8001b0c <HAL_I2C_Master_Transmit+0x2c>
 8001b0a:	e0e7      	b.n	8001cdc <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2240      	movs	r2, #64	; 0x40
 8001b10:	5c9b      	ldrb	r3, [r3, r2]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d101      	bne.n	8001b1a <HAL_I2C_Master_Transmit+0x3a>
 8001b16:	2302      	movs	r3, #2
 8001b18:	e0e1      	b.n	8001cde <HAL_I2C_Master_Transmit+0x1fe>
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2240      	movs	r2, #64	; 0x40
 8001b1e:	2101      	movs	r1, #1
 8001b20:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001b22:	f7ff f843 	bl	8000bac <HAL_GetTick>
 8001b26:	0003      	movs	r3, r0
 8001b28:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001b2a:	2380      	movs	r3, #128	; 0x80
 8001b2c:	0219      	lsls	r1, r3, #8
 8001b2e:	68f8      	ldr	r0, [r7, #12]
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	2319      	movs	r3, #25
 8001b36:	2201      	movs	r2, #1
 8001b38:	f000 fc24 	bl	8002384 <I2C_WaitOnFlagUntilTimeout>
 8001b3c:	1e03      	subs	r3, r0, #0
 8001b3e:	d001      	beq.n	8001b44 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e0cc      	b.n	8001cde <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2241      	movs	r2, #65	; 0x41
 8001b48:	2121      	movs	r1, #33	; 0x21
 8001b4a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2242      	movs	r2, #66	; 0x42
 8001b50:	2110      	movs	r1, #16
 8001b52:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2200      	movs	r2, #0
 8001b58:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2208      	movs	r2, #8
 8001b64:	18ba      	adds	r2, r7, r2
 8001b66:	8812      	ldrh	r2, [r2, #0]
 8001b68:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	2bff      	cmp	r3, #255	; 0xff
 8001b78:	d911      	bls.n	8001b9e <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	22ff      	movs	r2, #255	; 0xff
 8001b7e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b84:	b2da      	uxtb	r2, r3
 8001b86:	2380      	movs	r3, #128	; 0x80
 8001b88:	045c      	lsls	r4, r3, #17
 8001b8a:	230a      	movs	r3, #10
 8001b8c:	18fb      	adds	r3, r7, r3
 8001b8e:	8819      	ldrh	r1, [r3, #0]
 8001b90:	68f8      	ldr	r0, [r7, #12]
 8001b92:	4b55      	ldr	r3, [pc, #340]	; (8001ce8 <HAL_I2C_Master_Transmit+0x208>)
 8001b94:	9300      	str	r3, [sp, #0]
 8001b96:	0023      	movs	r3, r4
 8001b98:	f000 fd28 	bl	80025ec <I2C_TransferConfig>
 8001b9c:	e075      	b.n	8001c8a <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ba2:	b29a      	uxth	r2, r3
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bac:	b2da      	uxtb	r2, r3
 8001bae:	2380      	movs	r3, #128	; 0x80
 8001bb0:	049c      	lsls	r4, r3, #18
 8001bb2:	230a      	movs	r3, #10
 8001bb4:	18fb      	adds	r3, r7, r3
 8001bb6:	8819      	ldrh	r1, [r3, #0]
 8001bb8:	68f8      	ldr	r0, [r7, #12]
 8001bba:	4b4b      	ldr	r3, [pc, #300]	; (8001ce8 <HAL_I2C_Master_Transmit+0x208>)
 8001bbc:	9300      	str	r3, [sp, #0]
 8001bbe:	0023      	movs	r3, r4
 8001bc0:	f000 fd14 	bl	80025ec <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001bc4:	e061      	b.n	8001c8a <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bc6:	697a      	ldr	r2, [r7, #20]
 8001bc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	0018      	movs	r0, r3
 8001bce:	f000 fc18 	bl	8002402 <I2C_WaitOnTXISFlagUntilTimeout>
 8001bd2:	1e03      	subs	r3, r0, #0
 8001bd4:	d001      	beq.n	8001bda <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e081      	b.n	8001cde <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bde:	781a      	ldrb	r2, [r3, #0]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bea:	1c5a      	adds	r2, r3, #1
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	b29a      	uxth	r2, r3
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c02:	3b01      	subs	r3, #1
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d03a      	beq.n	8001c8a <HAL_I2C_Master_Transmit+0x1aa>
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d136      	bne.n	8001c8a <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001c1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c1e:	68f8      	ldr	r0, [r7, #12]
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	9300      	str	r3, [sp, #0]
 8001c24:	0013      	movs	r3, r2
 8001c26:	2200      	movs	r2, #0
 8001c28:	2180      	movs	r1, #128	; 0x80
 8001c2a:	f000 fbab 	bl	8002384 <I2C_WaitOnFlagUntilTimeout>
 8001c2e:	1e03      	subs	r3, r0, #0
 8001c30:	d001      	beq.n	8001c36 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e053      	b.n	8001cde <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	2bff      	cmp	r3, #255	; 0xff
 8001c3e:	d911      	bls.n	8001c64 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	22ff      	movs	r2, #255	; 0xff
 8001c44:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c4a:	b2da      	uxtb	r2, r3
 8001c4c:	2380      	movs	r3, #128	; 0x80
 8001c4e:	045c      	lsls	r4, r3, #17
 8001c50:	230a      	movs	r3, #10
 8001c52:	18fb      	adds	r3, r7, r3
 8001c54:	8819      	ldrh	r1, [r3, #0]
 8001c56:	68f8      	ldr	r0, [r7, #12]
 8001c58:	2300      	movs	r3, #0
 8001c5a:	9300      	str	r3, [sp, #0]
 8001c5c:	0023      	movs	r3, r4
 8001c5e:	f000 fcc5 	bl	80025ec <I2C_TransferConfig>
 8001c62:	e012      	b.n	8001c8a <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c68:	b29a      	uxth	r2, r3
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c72:	b2da      	uxtb	r2, r3
 8001c74:	2380      	movs	r3, #128	; 0x80
 8001c76:	049c      	lsls	r4, r3, #18
 8001c78:	230a      	movs	r3, #10
 8001c7a:	18fb      	adds	r3, r7, r3
 8001c7c:	8819      	ldrh	r1, [r3, #0]
 8001c7e:	68f8      	ldr	r0, [r7, #12]
 8001c80:	2300      	movs	r3, #0
 8001c82:	9300      	str	r3, [sp, #0]
 8001c84:	0023      	movs	r3, r4
 8001c86:	f000 fcb1 	bl	80025ec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d198      	bne.n	8001bc6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c94:	697a      	ldr	r2, [r7, #20]
 8001c96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	0018      	movs	r0, r3
 8001c9c:	f000 fbf0 	bl	8002480 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001ca0:	1e03      	subs	r3, r0, #0
 8001ca2:	d001      	beq.n	8001ca8 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e01a      	b.n	8001cde <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2220      	movs	r2, #32
 8001cae:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	685a      	ldr	r2, [r3, #4]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	490c      	ldr	r1, [pc, #48]	; (8001cec <HAL_I2C_Master_Transmit+0x20c>)
 8001cbc:	400a      	ands	r2, r1
 8001cbe:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2241      	movs	r2, #65	; 0x41
 8001cc4:	2120      	movs	r1, #32
 8001cc6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2242      	movs	r2, #66	; 0x42
 8001ccc:	2100      	movs	r1, #0
 8001cce:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2240      	movs	r2, #64	; 0x40
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	e000      	b.n	8001cde <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8001cdc:	2302      	movs	r3, #2
  }
}
 8001cde:	0018      	movs	r0, r3
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	b007      	add	sp, #28
 8001ce4:	bd90      	pop	{r4, r7, pc}
 8001ce6:	46c0      	nop			; (mov r8, r8)
 8001ce8:	80002000 	.word	0x80002000
 8001cec:	fe00e800 	.word	0xfe00e800

08001cf0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cf0:	b590      	push	{r4, r7, lr}
 8001cf2:	b089      	sub	sp, #36	; 0x24
 8001cf4:	af02      	add	r7, sp, #8
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	000c      	movs	r4, r1
 8001cfa:	0010      	movs	r0, r2
 8001cfc:	0019      	movs	r1, r3
 8001cfe:	230a      	movs	r3, #10
 8001d00:	18fb      	adds	r3, r7, r3
 8001d02:	1c22      	adds	r2, r4, #0
 8001d04:	801a      	strh	r2, [r3, #0]
 8001d06:	2308      	movs	r3, #8
 8001d08:	18fb      	adds	r3, r7, r3
 8001d0a:	1c02      	adds	r2, r0, #0
 8001d0c:	801a      	strh	r2, [r3, #0]
 8001d0e:	1dbb      	adds	r3, r7, #6
 8001d10:	1c0a      	adds	r2, r1, #0
 8001d12:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2241      	movs	r2, #65	; 0x41
 8001d18:	5c9b      	ldrb	r3, [r3, r2]
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	2b20      	cmp	r3, #32
 8001d1e:	d000      	beq.n	8001d22 <HAL_I2C_Mem_Write+0x32>
 8001d20:	e10c      	b.n	8001f3c <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d004      	beq.n	8001d32 <HAL_I2C_Mem_Write+0x42>
 8001d28:	232c      	movs	r3, #44	; 0x2c
 8001d2a:	18fb      	adds	r3, r7, r3
 8001d2c:	881b      	ldrh	r3, [r3, #0]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d105      	bne.n	8001d3e <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2280      	movs	r2, #128	; 0x80
 8001d36:	0092      	lsls	r2, r2, #2
 8001d38:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e0ff      	b.n	8001f3e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2240      	movs	r2, #64	; 0x40
 8001d42:	5c9b      	ldrb	r3, [r3, r2]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d101      	bne.n	8001d4c <HAL_I2C_Mem_Write+0x5c>
 8001d48:	2302      	movs	r3, #2
 8001d4a:	e0f8      	b.n	8001f3e <HAL_I2C_Mem_Write+0x24e>
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2240      	movs	r2, #64	; 0x40
 8001d50:	2101      	movs	r1, #1
 8001d52:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001d54:	f7fe ff2a 	bl	8000bac <HAL_GetTick>
 8001d58:	0003      	movs	r3, r0
 8001d5a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001d5c:	2380      	movs	r3, #128	; 0x80
 8001d5e:	0219      	lsls	r1, r3, #8
 8001d60:	68f8      	ldr	r0, [r7, #12]
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	9300      	str	r3, [sp, #0]
 8001d66:	2319      	movs	r3, #25
 8001d68:	2201      	movs	r2, #1
 8001d6a:	f000 fb0b 	bl	8002384 <I2C_WaitOnFlagUntilTimeout>
 8001d6e:	1e03      	subs	r3, r0, #0
 8001d70:	d001      	beq.n	8001d76 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e0e3      	b.n	8001f3e <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2241      	movs	r2, #65	; 0x41
 8001d7a:	2121      	movs	r1, #33	; 0x21
 8001d7c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2242      	movs	r2, #66	; 0x42
 8001d82:	2140      	movs	r1, #64	; 0x40
 8001d84:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d90:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	222c      	movs	r2, #44	; 0x2c
 8001d96:	18ba      	adds	r2, r7, r2
 8001d98:	8812      	ldrh	r2, [r2, #0]
 8001d9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001da2:	1dbb      	adds	r3, r7, #6
 8001da4:	881c      	ldrh	r4, [r3, #0]
 8001da6:	2308      	movs	r3, #8
 8001da8:	18fb      	adds	r3, r7, r3
 8001daa:	881a      	ldrh	r2, [r3, #0]
 8001dac:	230a      	movs	r3, #10
 8001dae:	18fb      	adds	r3, r7, r3
 8001db0:	8819      	ldrh	r1, [r3, #0]
 8001db2:	68f8      	ldr	r0, [r7, #12]
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	9301      	str	r3, [sp, #4]
 8001db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dba:	9300      	str	r3, [sp, #0]
 8001dbc:	0023      	movs	r3, r4
 8001dbe:	f000 f9f9 	bl	80021b4 <I2C_RequestMemoryWrite>
 8001dc2:	1e03      	subs	r3, r0, #0
 8001dc4:	d005      	beq.n	8001dd2 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2240      	movs	r2, #64	; 0x40
 8001dca:	2100      	movs	r1, #0
 8001dcc:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e0b5      	b.n	8001f3e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	2bff      	cmp	r3, #255	; 0xff
 8001dda:	d911      	bls.n	8001e00 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	22ff      	movs	r2, #255	; 0xff
 8001de0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001de6:	b2da      	uxtb	r2, r3
 8001de8:	2380      	movs	r3, #128	; 0x80
 8001dea:	045c      	lsls	r4, r3, #17
 8001dec:	230a      	movs	r3, #10
 8001dee:	18fb      	adds	r3, r7, r3
 8001df0:	8819      	ldrh	r1, [r3, #0]
 8001df2:	68f8      	ldr	r0, [r7, #12]
 8001df4:	2300      	movs	r3, #0
 8001df6:	9300      	str	r3, [sp, #0]
 8001df8:	0023      	movs	r3, r4
 8001dfa:	f000 fbf7 	bl	80025ec <I2C_TransferConfig>
 8001dfe:	e012      	b.n	8001e26 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e04:	b29a      	uxth	r2, r3
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e0e:	b2da      	uxtb	r2, r3
 8001e10:	2380      	movs	r3, #128	; 0x80
 8001e12:	049c      	lsls	r4, r3, #18
 8001e14:	230a      	movs	r3, #10
 8001e16:	18fb      	adds	r3, r7, r3
 8001e18:	8819      	ldrh	r1, [r3, #0]
 8001e1a:	68f8      	ldr	r0, [r7, #12]
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	9300      	str	r3, [sp, #0]
 8001e20:	0023      	movs	r3, r4
 8001e22:	f000 fbe3 	bl	80025ec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e26:	697a      	ldr	r2, [r7, #20]
 8001e28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	0018      	movs	r0, r3
 8001e2e:	f000 fae8 	bl	8002402 <I2C_WaitOnTXISFlagUntilTimeout>
 8001e32:	1e03      	subs	r3, r0, #0
 8001e34:	d001      	beq.n	8001e3a <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e081      	b.n	8001f3e <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3e:	781a      	ldrb	r2, [r3, #0]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4a:	1c5a      	adds	r2, r3, #1
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	3b01      	subs	r3, #1
 8001e58:	b29a      	uxth	r2, r3
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e62:	3b01      	subs	r3, #1
 8001e64:	b29a      	uxth	r2, r3
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d03a      	beq.n	8001eea <HAL_I2C_Mem_Write+0x1fa>
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d136      	bne.n	8001eea <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001e7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e7e:	68f8      	ldr	r0, [r7, #12]
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	9300      	str	r3, [sp, #0]
 8001e84:	0013      	movs	r3, r2
 8001e86:	2200      	movs	r2, #0
 8001e88:	2180      	movs	r1, #128	; 0x80
 8001e8a:	f000 fa7b 	bl	8002384 <I2C_WaitOnFlagUntilTimeout>
 8001e8e:	1e03      	subs	r3, r0, #0
 8001e90:	d001      	beq.n	8001e96 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e053      	b.n	8001f3e <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	2bff      	cmp	r3, #255	; 0xff
 8001e9e:	d911      	bls.n	8001ec4 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	22ff      	movs	r2, #255	; 0xff
 8001ea4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eaa:	b2da      	uxtb	r2, r3
 8001eac:	2380      	movs	r3, #128	; 0x80
 8001eae:	045c      	lsls	r4, r3, #17
 8001eb0:	230a      	movs	r3, #10
 8001eb2:	18fb      	adds	r3, r7, r3
 8001eb4:	8819      	ldrh	r1, [r3, #0]
 8001eb6:	68f8      	ldr	r0, [r7, #12]
 8001eb8:	2300      	movs	r3, #0
 8001eba:	9300      	str	r3, [sp, #0]
 8001ebc:	0023      	movs	r3, r4
 8001ebe:	f000 fb95 	bl	80025ec <I2C_TransferConfig>
 8001ec2:	e012      	b.n	8001eea <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ed2:	b2da      	uxtb	r2, r3
 8001ed4:	2380      	movs	r3, #128	; 0x80
 8001ed6:	049c      	lsls	r4, r3, #18
 8001ed8:	230a      	movs	r3, #10
 8001eda:	18fb      	adds	r3, r7, r3
 8001edc:	8819      	ldrh	r1, [r3, #0]
 8001ede:	68f8      	ldr	r0, [r7, #12]
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	9300      	str	r3, [sp, #0]
 8001ee4:	0023      	movs	r3, r4
 8001ee6:	f000 fb81 	bl	80025ec <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d198      	bne.n	8001e26 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ef4:	697a      	ldr	r2, [r7, #20]
 8001ef6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	0018      	movs	r0, r3
 8001efc:	f000 fac0 	bl	8002480 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f00:	1e03      	subs	r3, r0, #0
 8001f02:	d001      	beq.n	8001f08 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e01a      	b.n	8001f3e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2220      	movs	r2, #32
 8001f0e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	685a      	ldr	r2, [r3, #4]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	490b      	ldr	r1, [pc, #44]	; (8001f48 <HAL_I2C_Mem_Write+0x258>)
 8001f1c:	400a      	ands	r2, r1
 8001f1e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2241      	movs	r2, #65	; 0x41
 8001f24:	2120      	movs	r1, #32
 8001f26:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2242      	movs	r2, #66	; 0x42
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2240      	movs	r2, #64	; 0x40
 8001f34:	2100      	movs	r1, #0
 8001f36:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	e000      	b.n	8001f3e <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8001f3c:	2302      	movs	r3, #2
  }
}
 8001f3e:	0018      	movs	r0, r3
 8001f40:	46bd      	mov	sp, r7
 8001f42:	b007      	add	sp, #28
 8001f44:	bd90      	pop	{r4, r7, pc}
 8001f46:	46c0      	nop			; (mov r8, r8)
 8001f48:	fe00e800 	.word	0xfe00e800

08001f4c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f4c:	b590      	push	{r4, r7, lr}
 8001f4e:	b089      	sub	sp, #36	; 0x24
 8001f50:	af02      	add	r7, sp, #8
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	000c      	movs	r4, r1
 8001f56:	0010      	movs	r0, r2
 8001f58:	0019      	movs	r1, r3
 8001f5a:	230a      	movs	r3, #10
 8001f5c:	18fb      	adds	r3, r7, r3
 8001f5e:	1c22      	adds	r2, r4, #0
 8001f60:	801a      	strh	r2, [r3, #0]
 8001f62:	2308      	movs	r3, #8
 8001f64:	18fb      	adds	r3, r7, r3
 8001f66:	1c02      	adds	r2, r0, #0
 8001f68:	801a      	strh	r2, [r3, #0]
 8001f6a:	1dbb      	adds	r3, r7, #6
 8001f6c:	1c0a      	adds	r2, r1, #0
 8001f6e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2241      	movs	r2, #65	; 0x41
 8001f74:	5c9b      	ldrb	r3, [r3, r2]
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	2b20      	cmp	r3, #32
 8001f7a:	d000      	beq.n	8001f7e <HAL_I2C_Mem_Read+0x32>
 8001f7c:	e110      	b.n	80021a0 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d004      	beq.n	8001f8e <HAL_I2C_Mem_Read+0x42>
 8001f84:	232c      	movs	r3, #44	; 0x2c
 8001f86:	18fb      	adds	r3, r7, r3
 8001f88:	881b      	ldrh	r3, [r3, #0]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d105      	bne.n	8001f9a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2280      	movs	r2, #128	; 0x80
 8001f92:	0092      	lsls	r2, r2, #2
 8001f94:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e103      	b.n	80021a2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2240      	movs	r2, #64	; 0x40
 8001f9e:	5c9b      	ldrb	r3, [r3, r2]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d101      	bne.n	8001fa8 <HAL_I2C_Mem_Read+0x5c>
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	e0fc      	b.n	80021a2 <HAL_I2C_Mem_Read+0x256>
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2240      	movs	r2, #64	; 0x40
 8001fac:	2101      	movs	r1, #1
 8001fae:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001fb0:	f7fe fdfc 	bl	8000bac <HAL_GetTick>
 8001fb4:	0003      	movs	r3, r0
 8001fb6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001fb8:	2380      	movs	r3, #128	; 0x80
 8001fba:	0219      	lsls	r1, r3, #8
 8001fbc:	68f8      	ldr	r0, [r7, #12]
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	9300      	str	r3, [sp, #0]
 8001fc2:	2319      	movs	r3, #25
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	f000 f9dd 	bl	8002384 <I2C_WaitOnFlagUntilTimeout>
 8001fca:	1e03      	subs	r3, r0, #0
 8001fcc:	d001      	beq.n	8001fd2 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e0e7      	b.n	80021a2 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2241      	movs	r2, #65	; 0x41
 8001fd6:	2122      	movs	r1, #34	; 0x22
 8001fd8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2242      	movs	r2, #66	; 0x42
 8001fde:	2140      	movs	r1, #64	; 0x40
 8001fe0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001fec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	222c      	movs	r2, #44	; 0x2c
 8001ff2:	18ba      	adds	r2, r7, r2
 8001ff4:	8812      	ldrh	r2, [r2, #0]
 8001ff6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ffe:	1dbb      	adds	r3, r7, #6
 8002000:	881c      	ldrh	r4, [r3, #0]
 8002002:	2308      	movs	r3, #8
 8002004:	18fb      	adds	r3, r7, r3
 8002006:	881a      	ldrh	r2, [r3, #0]
 8002008:	230a      	movs	r3, #10
 800200a:	18fb      	adds	r3, r7, r3
 800200c:	8819      	ldrh	r1, [r3, #0]
 800200e:	68f8      	ldr	r0, [r7, #12]
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	9301      	str	r3, [sp, #4]
 8002014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002016:	9300      	str	r3, [sp, #0]
 8002018:	0023      	movs	r3, r4
 800201a:	f000 f92f 	bl	800227c <I2C_RequestMemoryRead>
 800201e:	1e03      	subs	r3, r0, #0
 8002020:	d005      	beq.n	800202e <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2240      	movs	r2, #64	; 0x40
 8002026:	2100      	movs	r1, #0
 8002028:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e0b9      	b.n	80021a2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002032:	b29b      	uxth	r3, r3
 8002034:	2bff      	cmp	r3, #255	; 0xff
 8002036:	d911      	bls.n	800205c <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	22ff      	movs	r2, #255	; 0xff
 800203c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002042:	b2da      	uxtb	r2, r3
 8002044:	2380      	movs	r3, #128	; 0x80
 8002046:	045c      	lsls	r4, r3, #17
 8002048:	230a      	movs	r3, #10
 800204a:	18fb      	adds	r3, r7, r3
 800204c:	8819      	ldrh	r1, [r3, #0]
 800204e:	68f8      	ldr	r0, [r7, #12]
 8002050:	4b56      	ldr	r3, [pc, #344]	; (80021ac <HAL_I2C_Mem_Read+0x260>)
 8002052:	9300      	str	r3, [sp, #0]
 8002054:	0023      	movs	r3, r4
 8002056:	f000 fac9 	bl	80025ec <I2C_TransferConfig>
 800205a:	e012      	b.n	8002082 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002060:	b29a      	uxth	r2, r3
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800206a:	b2da      	uxtb	r2, r3
 800206c:	2380      	movs	r3, #128	; 0x80
 800206e:	049c      	lsls	r4, r3, #18
 8002070:	230a      	movs	r3, #10
 8002072:	18fb      	adds	r3, r7, r3
 8002074:	8819      	ldrh	r1, [r3, #0]
 8002076:	68f8      	ldr	r0, [r7, #12]
 8002078:	4b4c      	ldr	r3, [pc, #304]	; (80021ac <HAL_I2C_Mem_Read+0x260>)
 800207a:	9300      	str	r3, [sp, #0]
 800207c:	0023      	movs	r3, r4
 800207e:	f000 fab5 	bl	80025ec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002082:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002084:	68f8      	ldr	r0, [r7, #12]
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	0013      	movs	r3, r2
 800208c:	2200      	movs	r2, #0
 800208e:	2104      	movs	r1, #4
 8002090:	f000 f978 	bl	8002384 <I2C_WaitOnFlagUntilTimeout>
 8002094:	1e03      	subs	r3, r0, #0
 8002096:	d001      	beq.n	800209c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e082      	b.n	80021a2 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a6:	b2d2      	uxtb	r2, r2
 80020a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ae:	1c5a      	adds	r2, r3, #1
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020b8:	3b01      	subs	r3, #1
 80020ba:	b29a      	uxth	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	3b01      	subs	r3, #1
 80020c8:	b29a      	uxth	r2, r3
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d03a      	beq.n	800214e <HAL_I2C_Mem_Read+0x202>
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d136      	bne.n	800214e <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80020e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020e2:	68f8      	ldr	r0, [r7, #12]
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	9300      	str	r3, [sp, #0]
 80020e8:	0013      	movs	r3, r2
 80020ea:	2200      	movs	r2, #0
 80020ec:	2180      	movs	r1, #128	; 0x80
 80020ee:	f000 f949 	bl	8002384 <I2C_WaitOnFlagUntilTimeout>
 80020f2:	1e03      	subs	r3, r0, #0
 80020f4:	d001      	beq.n	80020fa <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e053      	b.n	80021a2 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020fe:	b29b      	uxth	r3, r3
 8002100:	2bff      	cmp	r3, #255	; 0xff
 8002102:	d911      	bls.n	8002128 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	22ff      	movs	r2, #255	; 0xff
 8002108:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800210e:	b2da      	uxtb	r2, r3
 8002110:	2380      	movs	r3, #128	; 0x80
 8002112:	045c      	lsls	r4, r3, #17
 8002114:	230a      	movs	r3, #10
 8002116:	18fb      	adds	r3, r7, r3
 8002118:	8819      	ldrh	r1, [r3, #0]
 800211a:	68f8      	ldr	r0, [r7, #12]
 800211c:	2300      	movs	r3, #0
 800211e:	9300      	str	r3, [sp, #0]
 8002120:	0023      	movs	r3, r4
 8002122:	f000 fa63 	bl	80025ec <I2C_TransferConfig>
 8002126:	e012      	b.n	800214e <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800212c:	b29a      	uxth	r2, r3
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002136:	b2da      	uxtb	r2, r3
 8002138:	2380      	movs	r3, #128	; 0x80
 800213a:	049c      	lsls	r4, r3, #18
 800213c:	230a      	movs	r3, #10
 800213e:	18fb      	adds	r3, r7, r3
 8002140:	8819      	ldrh	r1, [r3, #0]
 8002142:	68f8      	ldr	r0, [r7, #12]
 8002144:	2300      	movs	r3, #0
 8002146:	9300      	str	r3, [sp, #0]
 8002148:	0023      	movs	r3, r4
 800214a:	f000 fa4f 	bl	80025ec <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002152:	b29b      	uxth	r3, r3
 8002154:	2b00      	cmp	r3, #0
 8002156:	d194      	bne.n	8002082 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002158:	697a      	ldr	r2, [r7, #20]
 800215a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	0018      	movs	r0, r3
 8002160:	f000 f98e 	bl	8002480 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002164:	1e03      	subs	r3, r0, #0
 8002166:	d001      	beq.n	800216c <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e01a      	b.n	80021a2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2220      	movs	r2, #32
 8002172:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	685a      	ldr	r2, [r3, #4]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	490c      	ldr	r1, [pc, #48]	; (80021b0 <HAL_I2C_Mem_Read+0x264>)
 8002180:	400a      	ands	r2, r1
 8002182:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2241      	movs	r2, #65	; 0x41
 8002188:	2120      	movs	r1, #32
 800218a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2242      	movs	r2, #66	; 0x42
 8002190:	2100      	movs	r1, #0
 8002192:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2240      	movs	r2, #64	; 0x40
 8002198:	2100      	movs	r1, #0
 800219a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800219c:	2300      	movs	r3, #0
 800219e:	e000      	b.n	80021a2 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80021a0:	2302      	movs	r3, #2
  }
}
 80021a2:	0018      	movs	r0, r3
 80021a4:	46bd      	mov	sp, r7
 80021a6:	b007      	add	sp, #28
 80021a8:	bd90      	pop	{r4, r7, pc}
 80021aa:	46c0      	nop			; (mov r8, r8)
 80021ac:	80002400 	.word	0x80002400
 80021b0:	fe00e800 	.word	0xfe00e800

080021b4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80021b4:	b5b0      	push	{r4, r5, r7, lr}
 80021b6:	b086      	sub	sp, #24
 80021b8:	af02      	add	r7, sp, #8
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	000c      	movs	r4, r1
 80021be:	0010      	movs	r0, r2
 80021c0:	0019      	movs	r1, r3
 80021c2:	250a      	movs	r5, #10
 80021c4:	197b      	adds	r3, r7, r5
 80021c6:	1c22      	adds	r2, r4, #0
 80021c8:	801a      	strh	r2, [r3, #0]
 80021ca:	2308      	movs	r3, #8
 80021cc:	18fb      	adds	r3, r7, r3
 80021ce:	1c02      	adds	r2, r0, #0
 80021d0:	801a      	strh	r2, [r3, #0]
 80021d2:	1dbb      	adds	r3, r7, #6
 80021d4:	1c0a      	adds	r2, r1, #0
 80021d6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80021d8:	1dbb      	adds	r3, r7, #6
 80021da:	881b      	ldrh	r3, [r3, #0]
 80021dc:	b2da      	uxtb	r2, r3
 80021de:	2380      	movs	r3, #128	; 0x80
 80021e0:	045c      	lsls	r4, r3, #17
 80021e2:	197b      	adds	r3, r7, r5
 80021e4:	8819      	ldrh	r1, [r3, #0]
 80021e6:	68f8      	ldr	r0, [r7, #12]
 80021e8:	4b23      	ldr	r3, [pc, #140]	; (8002278 <I2C_RequestMemoryWrite+0xc4>)
 80021ea:	9300      	str	r3, [sp, #0]
 80021ec:	0023      	movs	r3, r4
 80021ee:	f000 f9fd 	bl	80025ec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021f4:	6a39      	ldr	r1, [r7, #32]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	0018      	movs	r0, r3
 80021fa:	f000 f902 	bl	8002402 <I2C_WaitOnTXISFlagUntilTimeout>
 80021fe:	1e03      	subs	r3, r0, #0
 8002200:	d001      	beq.n	8002206 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e033      	b.n	800226e <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002206:	1dbb      	adds	r3, r7, #6
 8002208:	881b      	ldrh	r3, [r3, #0]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d107      	bne.n	800221e <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800220e:	2308      	movs	r3, #8
 8002210:	18fb      	adds	r3, r7, r3
 8002212:	881b      	ldrh	r3, [r3, #0]
 8002214:	b2da      	uxtb	r2, r3
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	629a      	str	r2, [r3, #40]	; 0x28
 800221c:	e019      	b.n	8002252 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800221e:	2308      	movs	r3, #8
 8002220:	18fb      	adds	r3, r7, r3
 8002222:	881b      	ldrh	r3, [r3, #0]
 8002224:	0a1b      	lsrs	r3, r3, #8
 8002226:	b29b      	uxth	r3, r3
 8002228:	b2da      	uxtb	r2, r3
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002232:	6a39      	ldr	r1, [r7, #32]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	0018      	movs	r0, r3
 8002238:	f000 f8e3 	bl	8002402 <I2C_WaitOnTXISFlagUntilTimeout>
 800223c:	1e03      	subs	r3, r0, #0
 800223e:	d001      	beq.n	8002244 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e014      	b.n	800226e <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002244:	2308      	movs	r3, #8
 8002246:	18fb      	adds	r3, r7, r3
 8002248:	881b      	ldrh	r3, [r3, #0]
 800224a:	b2da      	uxtb	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002252:	6a3a      	ldr	r2, [r7, #32]
 8002254:	68f8      	ldr	r0, [r7, #12]
 8002256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002258:	9300      	str	r3, [sp, #0]
 800225a:	0013      	movs	r3, r2
 800225c:	2200      	movs	r2, #0
 800225e:	2180      	movs	r1, #128	; 0x80
 8002260:	f000 f890 	bl	8002384 <I2C_WaitOnFlagUntilTimeout>
 8002264:	1e03      	subs	r3, r0, #0
 8002266:	d001      	beq.n	800226c <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e000      	b.n	800226e <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	0018      	movs	r0, r3
 8002270:	46bd      	mov	sp, r7
 8002272:	b004      	add	sp, #16
 8002274:	bdb0      	pop	{r4, r5, r7, pc}
 8002276:	46c0      	nop			; (mov r8, r8)
 8002278:	80002000 	.word	0x80002000

0800227c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800227c:	b5b0      	push	{r4, r5, r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af02      	add	r7, sp, #8
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	000c      	movs	r4, r1
 8002286:	0010      	movs	r0, r2
 8002288:	0019      	movs	r1, r3
 800228a:	250a      	movs	r5, #10
 800228c:	197b      	adds	r3, r7, r5
 800228e:	1c22      	adds	r2, r4, #0
 8002290:	801a      	strh	r2, [r3, #0]
 8002292:	2308      	movs	r3, #8
 8002294:	18fb      	adds	r3, r7, r3
 8002296:	1c02      	adds	r2, r0, #0
 8002298:	801a      	strh	r2, [r3, #0]
 800229a:	1dbb      	adds	r3, r7, #6
 800229c:	1c0a      	adds	r2, r1, #0
 800229e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80022a0:	1dbb      	adds	r3, r7, #6
 80022a2:	881b      	ldrh	r3, [r3, #0]
 80022a4:	b2da      	uxtb	r2, r3
 80022a6:	197b      	adds	r3, r7, r5
 80022a8:	8819      	ldrh	r1, [r3, #0]
 80022aa:	68f8      	ldr	r0, [r7, #12]
 80022ac:	4b23      	ldr	r3, [pc, #140]	; (800233c <I2C_RequestMemoryRead+0xc0>)
 80022ae:	9300      	str	r3, [sp, #0]
 80022b0:	2300      	movs	r3, #0
 80022b2:	f000 f99b 	bl	80025ec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022b8:	6a39      	ldr	r1, [r7, #32]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	0018      	movs	r0, r3
 80022be:	f000 f8a0 	bl	8002402 <I2C_WaitOnTXISFlagUntilTimeout>
 80022c2:	1e03      	subs	r3, r0, #0
 80022c4:	d001      	beq.n	80022ca <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e033      	b.n	8002332 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80022ca:	1dbb      	adds	r3, r7, #6
 80022cc:	881b      	ldrh	r3, [r3, #0]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d107      	bne.n	80022e2 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80022d2:	2308      	movs	r3, #8
 80022d4:	18fb      	adds	r3, r7, r3
 80022d6:	881b      	ldrh	r3, [r3, #0]
 80022d8:	b2da      	uxtb	r2, r3
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	629a      	str	r2, [r3, #40]	; 0x28
 80022e0:	e019      	b.n	8002316 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80022e2:	2308      	movs	r3, #8
 80022e4:	18fb      	adds	r3, r7, r3
 80022e6:	881b      	ldrh	r3, [r3, #0]
 80022e8:	0a1b      	lsrs	r3, r3, #8
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	b2da      	uxtb	r2, r3
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022f6:	6a39      	ldr	r1, [r7, #32]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	0018      	movs	r0, r3
 80022fc:	f000 f881 	bl	8002402 <I2C_WaitOnTXISFlagUntilTimeout>
 8002300:	1e03      	subs	r3, r0, #0
 8002302:	d001      	beq.n	8002308 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e014      	b.n	8002332 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002308:	2308      	movs	r3, #8
 800230a:	18fb      	adds	r3, r7, r3
 800230c:	881b      	ldrh	r3, [r3, #0]
 800230e:	b2da      	uxtb	r2, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002316:	6a3a      	ldr	r2, [r7, #32]
 8002318:	68f8      	ldr	r0, [r7, #12]
 800231a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231c:	9300      	str	r3, [sp, #0]
 800231e:	0013      	movs	r3, r2
 8002320:	2200      	movs	r2, #0
 8002322:	2140      	movs	r1, #64	; 0x40
 8002324:	f000 f82e 	bl	8002384 <I2C_WaitOnFlagUntilTimeout>
 8002328:	1e03      	subs	r3, r0, #0
 800232a:	d001      	beq.n	8002330 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e000      	b.n	8002332 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	0018      	movs	r0, r3
 8002334:	46bd      	mov	sp, r7
 8002336:	b004      	add	sp, #16
 8002338:	bdb0      	pop	{r4, r5, r7, pc}
 800233a:	46c0      	nop			; (mov r8, r8)
 800233c:	80002000 	.word	0x80002000

08002340 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	699b      	ldr	r3, [r3, #24]
 800234e:	2202      	movs	r2, #2
 8002350:	4013      	ands	r3, r2
 8002352:	2b02      	cmp	r3, #2
 8002354:	d103      	bne.n	800235e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2200      	movs	r2, #0
 800235c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	2201      	movs	r2, #1
 8002366:	4013      	ands	r3, r2
 8002368:	2b01      	cmp	r3, #1
 800236a:	d007      	beq.n	800237c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	699a      	ldr	r2, [r3, #24]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2101      	movs	r1, #1
 8002378:	430a      	orrs	r2, r1
 800237a:	619a      	str	r2, [r3, #24]
  }
}
 800237c:	46c0      	nop			; (mov r8, r8)
 800237e:	46bd      	mov	sp, r7
 8002380:	b002      	add	sp, #8
 8002382:	bd80      	pop	{r7, pc}

08002384 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	603b      	str	r3, [r7, #0]
 8002390:	1dfb      	adds	r3, r7, #7
 8002392:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002394:	e021      	b.n	80023da <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	3301      	adds	r3, #1
 800239a:	d01e      	beq.n	80023da <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800239c:	f7fe fc06 	bl	8000bac <HAL_GetTick>
 80023a0:	0002      	movs	r2, r0
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	683a      	ldr	r2, [r7, #0]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d302      	bcc.n	80023b2 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d113      	bne.n	80023da <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b6:	2220      	movs	r2, #32
 80023b8:	431a      	orrs	r2, r3
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2241      	movs	r2, #65	; 0x41
 80023c2:	2120      	movs	r1, #32
 80023c4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2242      	movs	r2, #66	; 0x42
 80023ca:	2100      	movs	r1, #0
 80023cc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2240      	movs	r2, #64	; 0x40
 80023d2:	2100      	movs	r1, #0
 80023d4:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e00f      	b.n	80023fa <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	68ba      	ldr	r2, [r7, #8]
 80023e2:	4013      	ands	r3, r2
 80023e4:	68ba      	ldr	r2, [r7, #8]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	425a      	negs	r2, r3
 80023ea:	4153      	adcs	r3, r2
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	001a      	movs	r2, r3
 80023f0:	1dfb      	adds	r3, r7, #7
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d0ce      	beq.n	8002396 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	0018      	movs	r0, r3
 80023fc:	46bd      	mov	sp, r7
 80023fe:	b004      	add	sp, #16
 8002400:	bd80      	pop	{r7, pc}

08002402 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b084      	sub	sp, #16
 8002406:	af00      	add	r7, sp, #0
 8002408:	60f8      	str	r0, [r7, #12]
 800240a:	60b9      	str	r1, [r7, #8]
 800240c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800240e:	e02b      	b.n	8002468 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	68b9      	ldr	r1, [r7, #8]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	0018      	movs	r0, r3
 8002418:	f000 f86e 	bl	80024f8 <I2C_IsAcknowledgeFailed>
 800241c:	1e03      	subs	r3, r0, #0
 800241e:	d001      	beq.n	8002424 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e029      	b.n	8002478 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	3301      	adds	r3, #1
 8002428:	d01e      	beq.n	8002468 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800242a:	f7fe fbbf 	bl	8000bac <HAL_GetTick>
 800242e:	0002      	movs	r2, r0
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	68ba      	ldr	r2, [r7, #8]
 8002436:	429a      	cmp	r2, r3
 8002438:	d302      	bcc.n	8002440 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d113      	bne.n	8002468 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002444:	2220      	movs	r2, #32
 8002446:	431a      	orrs	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2241      	movs	r2, #65	; 0x41
 8002450:	2120      	movs	r1, #32
 8002452:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2242      	movs	r2, #66	; 0x42
 8002458:	2100      	movs	r1, #0
 800245a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2240      	movs	r2, #64	; 0x40
 8002460:	2100      	movs	r1, #0
 8002462:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e007      	b.n	8002478 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	2202      	movs	r2, #2
 8002470:	4013      	ands	r3, r2
 8002472:	2b02      	cmp	r3, #2
 8002474:	d1cc      	bne.n	8002410 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002476:	2300      	movs	r3, #0
}
 8002478:	0018      	movs	r0, r3
 800247a:	46bd      	mov	sp, r7
 800247c:	b004      	add	sp, #16
 800247e:	bd80      	pop	{r7, pc}

08002480 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800248c:	e028      	b.n	80024e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	68b9      	ldr	r1, [r7, #8]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	0018      	movs	r0, r3
 8002496:	f000 f82f 	bl	80024f8 <I2C_IsAcknowledgeFailed>
 800249a:	1e03      	subs	r3, r0, #0
 800249c:	d001      	beq.n	80024a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e026      	b.n	80024f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024a2:	f7fe fb83 	bl	8000bac <HAL_GetTick>
 80024a6:	0002      	movs	r2, r0
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	68ba      	ldr	r2, [r7, #8]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d302      	bcc.n	80024b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d113      	bne.n	80024e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024bc:	2220      	movs	r2, #32
 80024be:	431a      	orrs	r2, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2241      	movs	r2, #65	; 0x41
 80024c8:	2120      	movs	r1, #32
 80024ca:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2242      	movs	r2, #66	; 0x42
 80024d0:	2100      	movs	r1, #0
 80024d2:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2240      	movs	r2, #64	; 0x40
 80024d8:	2100      	movs	r1, #0
 80024da:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e007      	b.n	80024f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	2220      	movs	r2, #32
 80024e8:	4013      	ands	r3, r2
 80024ea:	2b20      	cmp	r3, #32
 80024ec:	d1cf      	bne.n	800248e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80024ee:	2300      	movs	r3, #0
}
 80024f0:	0018      	movs	r0, r3
 80024f2:	46bd      	mov	sp, r7
 80024f4:	b004      	add	sp, #16
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	2210      	movs	r2, #16
 800250c:	4013      	ands	r3, r2
 800250e:	2b10      	cmp	r3, #16
 8002510:	d164      	bne.n	80025dc <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	685a      	ldr	r2, [r3, #4]
 8002518:	2380      	movs	r3, #128	; 0x80
 800251a:	049b      	lsls	r3, r3, #18
 800251c:	401a      	ands	r2, r3
 800251e:	2380      	movs	r3, #128	; 0x80
 8002520:	049b      	lsls	r3, r3, #18
 8002522:	429a      	cmp	r2, r3
 8002524:	d02b      	beq.n	800257e <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	685a      	ldr	r2, [r3, #4]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2180      	movs	r1, #128	; 0x80
 8002532:	01c9      	lsls	r1, r1, #7
 8002534:	430a      	orrs	r2, r1
 8002536:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002538:	e021      	b.n	800257e <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	3301      	adds	r3, #1
 800253e:	d01e      	beq.n	800257e <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002540:	f7fe fb34 	bl	8000bac <HAL_GetTick>
 8002544:	0002      	movs	r2, r0
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	68ba      	ldr	r2, [r7, #8]
 800254c:	429a      	cmp	r2, r3
 800254e:	d302      	bcc.n	8002556 <I2C_IsAcknowledgeFailed+0x5e>
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d113      	bne.n	800257e <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255a:	2220      	movs	r2, #32
 800255c:	431a      	orrs	r2, r3
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2241      	movs	r2, #65	; 0x41
 8002566:	2120      	movs	r1, #32
 8002568:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2242      	movs	r2, #66	; 0x42
 800256e:	2100      	movs	r1, #0
 8002570:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2240      	movs	r2, #64	; 0x40
 8002576:	2100      	movs	r1, #0
 8002578:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e02f      	b.n	80025de <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	2220      	movs	r2, #32
 8002586:	4013      	ands	r3, r2
 8002588:	2b20      	cmp	r3, #32
 800258a:	d1d6      	bne.n	800253a <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2210      	movs	r2, #16
 8002592:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2220      	movs	r2, #32
 800259a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	0018      	movs	r0, r3
 80025a0:	f7ff fece 	bl	8002340 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	685a      	ldr	r2, [r3, #4]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	490e      	ldr	r1, [pc, #56]	; (80025e8 <I2C_IsAcknowledgeFailed+0xf0>)
 80025b0:	400a      	ands	r2, r1
 80025b2:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b8:	2204      	movs	r2, #4
 80025ba:	431a      	orrs	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2241      	movs	r2, #65	; 0x41
 80025c4:	2120      	movs	r1, #32
 80025c6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2242      	movs	r2, #66	; 0x42
 80025cc:	2100      	movs	r1, #0
 80025ce:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2240      	movs	r2, #64	; 0x40
 80025d4:	2100      	movs	r1, #0
 80025d6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e000      	b.n	80025de <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	0018      	movs	r0, r3
 80025e0:	46bd      	mov	sp, r7
 80025e2:	b004      	add	sp, #16
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	46c0      	nop			; (mov r8, r8)
 80025e8:	fe00e800 	.word	0xfe00e800

080025ec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80025ec:	b590      	push	{r4, r7, lr}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	0008      	movs	r0, r1
 80025f6:	0011      	movs	r1, r2
 80025f8:	607b      	str	r3, [r7, #4]
 80025fa:	240a      	movs	r4, #10
 80025fc:	193b      	adds	r3, r7, r4
 80025fe:	1c02      	adds	r2, r0, #0
 8002600:	801a      	strh	r2, [r3, #0]
 8002602:	2009      	movs	r0, #9
 8002604:	183b      	adds	r3, r7, r0
 8002606:	1c0a      	adds	r2, r1, #0
 8002608:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	6a3a      	ldr	r2, [r7, #32]
 8002612:	0d51      	lsrs	r1, r2, #21
 8002614:	2280      	movs	r2, #128	; 0x80
 8002616:	00d2      	lsls	r2, r2, #3
 8002618:	400a      	ands	r2, r1
 800261a:	490e      	ldr	r1, [pc, #56]	; (8002654 <I2C_TransferConfig+0x68>)
 800261c:	430a      	orrs	r2, r1
 800261e:	43d2      	mvns	r2, r2
 8002620:	401a      	ands	r2, r3
 8002622:	0011      	movs	r1, r2
 8002624:	193b      	adds	r3, r7, r4
 8002626:	881b      	ldrh	r3, [r3, #0]
 8002628:	059b      	lsls	r3, r3, #22
 800262a:	0d9a      	lsrs	r2, r3, #22
 800262c:	183b      	adds	r3, r7, r0
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	0418      	lsls	r0, r3, #16
 8002632:	23ff      	movs	r3, #255	; 0xff
 8002634:	041b      	lsls	r3, r3, #16
 8002636:	4003      	ands	r3, r0
 8002638:	431a      	orrs	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	431a      	orrs	r2, r3
 800263e:	6a3b      	ldr	r3, [r7, #32]
 8002640:	431a      	orrs	r2, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	430a      	orrs	r2, r1
 8002648:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800264a:	46c0      	nop			; (mov r8, r8)
 800264c:	46bd      	mov	sp, r7
 800264e:	b005      	add	sp, #20
 8002650:	bd90      	pop	{r4, r7, pc}
 8002652:	46c0      	nop			; (mov r8, r8)
 8002654:	03ff63ff 	.word	0x03ff63ff

08002658 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2241      	movs	r2, #65	; 0x41
 8002666:	5c9b      	ldrb	r3, [r3, r2]
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b20      	cmp	r3, #32
 800266c:	d138      	bne.n	80026e0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2240      	movs	r2, #64	; 0x40
 8002672:	5c9b      	ldrb	r3, [r3, r2]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d101      	bne.n	800267c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002678:	2302      	movs	r3, #2
 800267a:	e032      	b.n	80026e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2240      	movs	r2, #64	; 0x40
 8002680:	2101      	movs	r1, #1
 8002682:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2241      	movs	r2, #65	; 0x41
 8002688:	2124      	movs	r1, #36	; 0x24
 800268a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2101      	movs	r1, #1
 8002698:	438a      	bics	r2, r1
 800269a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4911      	ldr	r1, [pc, #68]	; (80026ec <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80026a8:	400a      	ands	r2, r1
 80026aa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	6819      	ldr	r1, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	683a      	ldr	r2, [r7, #0]
 80026b8:	430a      	orrs	r2, r1
 80026ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2101      	movs	r1, #1
 80026c8:	430a      	orrs	r2, r1
 80026ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2241      	movs	r2, #65	; 0x41
 80026d0:	2120      	movs	r1, #32
 80026d2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2240      	movs	r2, #64	; 0x40
 80026d8:	2100      	movs	r1, #0
 80026da:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80026dc:	2300      	movs	r3, #0
 80026de:	e000      	b.n	80026e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80026e0:	2302      	movs	r3, #2
  }
}
 80026e2:	0018      	movs	r0, r3
 80026e4:	46bd      	mov	sp, r7
 80026e6:	b002      	add	sp, #8
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	46c0      	nop			; (mov r8, r8)
 80026ec:	ffffefff 	.word	0xffffefff

080026f0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2241      	movs	r2, #65	; 0x41
 80026fe:	5c9b      	ldrb	r3, [r3, r2]
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2b20      	cmp	r3, #32
 8002704:	d139      	bne.n	800277a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2240      	movs	r2, #64	; 0x40
 800270a:	5c9b      	ldrb	r3, [r3, r2]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d101      	bne.n	8002714 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002710:	2302      	movs	r3, #2
 8002712:	e033      	b.n	800277c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2240      	movs	r2, #64	; 0x40
 8002718:	2101      	movs	r1, #1
 800271a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2241      	movs	r2, #65	; 0x41
 8002720:	2124      	movs	r1, #36	; 0x24
 8002722:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2101      	movs	r1, #1
 8002730:	438a      	bics	r2, r1
 8002732:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	4a11      	ldr	r2, [pc, #68]	; (8002784 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002740:	4013      	ands	r3, r2
 8002742:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	021b      	lsls	r3, r3, #8
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	4313      	orrs	r3, r2
 800274c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2101      	movs	r1, #1
 8002762:	430a      	orrs	r2, r1
 8002764:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2241      	movs	r2, #65	; 0x41
 800276a:	2120      	movs	r1, #32
 800276c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2240      	movs	r2, #64	; 0x40
 8002772:	2100      	movs	r1, #0
 8002774:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002776:	2300      	movs	r3, #0
 8002778:	e000      	b.n	800277c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800277a:	2302      	movs	r3, #2
  }
}
 800277c:	0018      	movs	r0, r3
 800277e:	46bd      	mov	sp, r7
 8002780:	b004      	add	sp, #16
 8002782:	bd80      	pop	{r7, pc}
 8002784:	fffff0ff 	.word	0xfffff0ff

08002788 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b088      	sub	sp, #32
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d102      	bne.n	800279c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	f000 fb76 	bl	8002e88 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2201      	movs	r2, #1
 80027a2:	4013      	ands	r3, r2
 80027a4:	d100      	bne.n	80027a8 <HAL_RCC_OscConfig+0x20>
 80027a6:	e08e      	b.n	80028c6 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80027a8:	4bc5      	ldr	r3, [pc, #788]	; (8002ac0 <HAL_RCC_OscConfig+0x338>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	220c      	movs	r2, #12
 80027ae:	4013      	ands	r3, r2
 80027b0:	2b04      	cmp	r3, #4
 80027b2:	d00e      	beq.n	80027d2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027b4:	4bc2      	ldr	r3, [pc, #776]	; (8002ac0 <HAL_RCC_OscConfig+0x338>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	220c      	movs	r2, #12
 80027ba:	4013      	ands	r3, r2
 80027bc:	2b08      	cmp	r3, #8
 80027be:	d117      	bne.n	80027f0 <HAL_RCC_OscConfig+0x68>
 80027c0:	4bbf      	ldr	r3, [pc, #764]	; (8002ac0 <HAL_RCC_OscConfig+0x338>)
 80027c2:	685a      	ldr	r2, [r3, #4]
 80027c4:	23c0      	movs	r3, #192	; 0xc0
 80027c6:	025b      	lsls	r3, r3, #9
 80027c8:	401a      	ands	r2, r3
 80027ca:	2380      	movs	r3, #128	; 0x80
 80027cc:	025b      	lsls	r3, r3, #9
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d10e      	bne.n	80027f0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027d2:	4bbb      	ldr	r3, [pc, #748]	; (8002ac0 <HAL_RCC_OscConfig+0x338>)
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	2380      	movs	r3, #128	; 0x80
 80027d8:	029b      	lsls	r3, r3, #10
 80027da:	4013      	ands	r3, r2
 80027dc:	d100      	bne.n	80027e0 <HAL_RCC_OscConfig+0x58>
 80027de:	e071      	b.n	80028c4 <HAL_RCC_OscConfig+0x13c>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d000      	beq.n	80027ea <HAL_RCC_OscConfig+0x62>
 80027e8:	e06c      	b.n	80028c4 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	f000 fb4c 	bl	8002e88 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d107      	bne.n	8002808 <HAL_RCC_OscConfig+0x80>
 80027f8:	4bb1      	ldr	r3, [pc, #708]	; (8002ac0 <HAL_RCC_OscConfig+0x338>)
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	4bb0      	ldr	r3, [pc, #704]	; (8002ac0 <HAL_RCC_OscConfig+0x338>)
 80027fe:	2180      	movs	r1, #128	; 0x80
 8002800:	0249      	lsls	r1, r1, #9
 8002802:	430a      	orrs	r2, r1
 8002804:	601a      	str	r2, [r3, #0]
 8002806:	e02f      	b.n	8002868 <HAL_RCC_OscConfig+0xe0>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d10c      	bne.n	800282a <HAL_RCC_OscConfig+0xa2>
 8002810:	4bab      	ldr	r3, [pc, #684]	; (8002ac0 <HAL_RCC_OscConfig+0x338>)
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	4baa      	ldr	r3, [pc, #680]	; (8002ac0 <HAL_RCC_OscConfig+0x338>)
 8002816:	49ab      	ldr	r1, [pc, #684]	; (8002ac4 <HAL_RCC_OscConfig+0x33c>)
 8002818:	400a      	ands	r2, r1
 800281a:	601a      	str	r2, [r3, #0]
 800281c:	4ba8      	ldr	r3, [pc, #672]	; (8002ac0 <HAL_RCC_OscConfig+0x338>)
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	4ba7      	ldr	r3, [pc, #668]	; (8002ac0 <HAL_RCC_OscConfig+0x338>)
 8002822:	49a9      	ldr	r1, [pc, #676]	; (8002ac8 <HAL_RCC_OscConfig+0x340>)
 8002824:	400a      	ands	r2, r1
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	e01e      	b.n	8002868 <HAL_RCC_OscConfig+0xe0>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	2b05      	cmp	r3, #5
 8002830:	d10e      	bne.n	8002850 <HAL_RCC_OscConfig+0xc8>
 8002832:	4ba3      	ldr	r3, [pc, #652]	; (8002ac0 <HAL_RCC_OscConfig+0x338>)
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	4ba2      	ldr	r3, [pc, #648]	; (8002ac0 <HAL_RCC_OscConfig+0x338>)
 8002838:	2180      	movs	r1, #128	; 0x80
 800283a:	02c9      	lsls	r1, r1, #11
 800283c:	430a      	orrs	r2, r1
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	4b9f      	ldr	r3, [pc, #636]	; (8002ac0 <HAL_RCC_OscConfig+0x338>)
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	4b9e      	ldr	r3, [pc, #632]	; (8002ac0 <HAL_RCC_OscConfig+0x338>)
 8002846:	2180      	movs	r1, #128	; 0x80
 8002848:	0249      	lsls	r1, r1, #9
 800284a:	430a      	orrs	r2, r1
 800284c:	601a      	str	r2, [r3, #0]
 800284e:	e00b      	b.n	8002868 <HAL_RCC_OscConfig+0xe0>
 8002850:	4b9b      	ldr	r3, [pc, #620]	; (8002ac0 <HAL_RCC_OscConfig+0x338>)
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	4b9a      	ldr	r3, [pc, #616]	; (8002ac0 <HAL_RCC_OscConfig+0x338>)
 8002856:	499b      	ldr	r1, [pc, #620]	; (8002ac4 <HAL_RCC_OscConfig+0x33c>)
 8002858:	400a      	ands	r2, r1
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	4b98      	ldr	r3, [pc, #608]	; (8002ac0 <HAL_RCC_OscConfig+0x338>)
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	4b97      	ldr	r3, [pc, #604]	; (8002ac0 <HAL_RCC_OscConfig+0x338>)
 8002862:	4999      	ldr	r1, [pc, #612]	; (8002ac8 <HAL_RCC_OscConfig+0x340>)
 8002864:	400a      	ands	r2, r1
 8002866:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d014      	beq.n	800289a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002870:	f7fe f99c 	bl	8000bac <HAL_GetTick>
 8002874:	0003      	movs	r3, r0
 8002876:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002878:	e008      	b.n	800288c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800287a:	f7fe f997 	bl	8000bac <HAL_GetTick>
 800287e:	0002      	movs	r2, r0
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	2b64      	cmp	r3, #100	; 0x64
 8002886:	d901      	bls.n	800288c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e2fd      	b.n	8002e88 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800288c:	4b8c      	ldr	r3, [pc, #560]	; (8002ac0 <HAL_RCC_OscConfig+0x338>)
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	2380      	movs	r3, #128	; 0x80
 8002892:	029b      	lsls	r3, r3, #10
 8002894:	4013      	ands	r3, r2
 8002896:	d0f0      	beq.n	800287a <HAL_RCC_OscConfig+0xf2>
 8002898:	e015      	b.n	80028c6 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800289a:	f7fe f987 	bl	8000bac <HAL_GetTick>
 800289e:	0003      	movs	r3, r0
 80028a0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028a2:	e008      	b.n	80028b6 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028a4:	f7fe f982 	bl	8000bac <HAL_GetTick>
 80028a8:	0002      	movs	r2, r0
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b64      	cmp	r3, #100	; 0x64
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e2e8      	b.n	8002e88 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028b6:	4b82      	ldr	r3, [pc, #520]	; (8002ac0 <HAL_RCC_OscConfig+0x338>)
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	2380      	movs	r3, #128	; 0x80
 80028bc:	029b      	lsls	r3, r3, #10
 80028be:	4013      	ands	r3, r2
 80028c0:	d1f0      	bne.n	80028a4 <HAL_RCC_OscConfig+0x11c>
 80028c2:	e000      	b.n	80028c6 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028c4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2202      	movs	r2, #2
 80028cc:	4013      	ands	r3, r2
 80028ce:	d100      	bne.n	80028d2 <HAL_RCC_OscConfig+0x14a>
 80028d0:	e06c      	b.n	80029ac <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80028d2:	4b7b      	ldr	r3, [pc, #492]	; (8002ac0 <HAL_RCC_OscConfig+0x338>)
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	220c      	movs	r2, #12
 80028d8:	4013      	ands	r3, r2
 80028da:	d00e      	beq.n	80028fa <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80028dc:	4b78      	ldr	r3, [pc, #480]	; (8002ac0 <HAL_RCC_OscConfig+0x338>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	220c      	movs	r2, #12
 80028e2:	4013      	ands	r3, r2
 80028e4:	2b08      	cmp	r3, #8
 80028e6:	d11f      	bne.n	8002928 <HAL_RCC_OscConfig+0x1a0>
 80028e8:	4b75      	ldr	r3, [pc, #468]	; (8002ac0 <HAL_RCC_OscConfig+0x338>)
 80028ea:	685a      	ldr	r2, [r3, #4]
 80028ec:	23c0      	movs	r3, #192	; 0xc0
 80028ee:	025b      	lsls	r3, r3, #9
 80028f0:	401a      	ands	r2, r3
 80028f2:	2380      	movs	r3, #128	; 0x80
 80028f4:	021b      	lsls	r3, r3, #8
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d116      	bne.n	8002928 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028fa:	4b71      	ldr	r3, [pc, #452]	; (8002ac0 <HAL_RCC_OscConfig+0x338>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2202      	movs	r2, #2
 8002900:	4013      	ands	r3, r2
 8002902:	d005      	beq.n	8002910 <HAL_RCC_OscConfig+0x188>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	2b01      	cmp	r3, #1
 800290a:	d001      	beq.n	8002910 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e2bb      	b.n	8002e88 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002910:	4b6b      	ldr	r3, [pc, #428]	; (8002ac0 <HAL_RCC_OscConfig+0x338>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	22f8      	movs	r2, #248	; 0xf8
 8002916:	4393      	bics	r3, r2
 8002918:	0019      	movs	r1, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	00da      	lsls	r2, r3, #3
 8002920:	4b67      	ldr	r3, [pc, #412]	; (8002ac0 <HAL_RCC_OscConfig+0x338>)
 8002922:	430a      	orrs	r2, r1
 8002924:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002926:	e041      	b.n	80029ac <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d024      	beq.n	800297a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002930:	4b63      	ldr	r3, [pc, #396]	; (8002ac0 <HAL_RCC_OscConfig+0x338>)
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	4b62      	ldr	r3, [pc, #392]	; (8002ac0 <HAL_RCC_OscConfig+0x338>)
 8002936:	2101      	movs	r1, #1
 8002938:	430a      	orrs	r2, r1
 800293a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800293c:	f7fe f936 	bl	8000bac <HAL_GetTick>
 8002940:	0003      	movs	r3, r0
 8002942:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002944:	e008      	b.n	8002958 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002946:	f7fe f931 	bl	8000bac <HAL_GetTick>
 800294a:	0002      	movs	r2, r0
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d901      	bls.n	8002958 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e297      	b.n	8002e88 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002958:	4b59      	ldr	r3, [pc, #356]	; (8002ac0 <HAL_RCC_OscConfig+0x338>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2202      	movs	r2, #2
 800295e:	4013      	ands	r3, r2
 8002960:	d0f1      	beq.n	8002946 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002962:	4b57      	ldr	r3, [pc, #348]	; (8002ac0 <HAL_RCC_OscConfig+0x338>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	22f8      	movs	r2, #248	; 0xf8
 8002968:	4393      	bics	r3, r2
 800296a:	0019      	movs	r1, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	00da      	lsls	r2, r3, #3
 8002972:	4b53      	ldr	r3, [pc, #332]	; (8002ac0 <HAL_RCC_OscConfig+0x338>)
 8002974:	430a      	orrs	r2, r1
 8002976:	601a      	str	r2, [r3, #0]
 8002978:	e018      	b.n	80029ac <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800297a:	4b51      	ldr	r3, [pc, #324]	; (8002ac0 <HAL_RCC_OscConfig+0x338>)
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	4b50      	ldr	r3, [pc, #320]	; (8002ac0 <HAL_RCC_OscConfig+0x338>)
 8002980:	2101      	movs	r1, #1
 8002982:	438a      	bics	r2, r1
 8002984:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002986:	f7fe f911 	bl	8000bac <HAL_GetTick>
 800298a:	0003      	movs	r3, r0
 800298c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800298e:	e008      	b.n	80029a2 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002990:	f7fe f90c 	bl	8000bac <HAL_GetTick>
 8002994:	0002      	movs	r2, r0
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e272      	b.n	8002e88 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029a2:	4b47      	ldr	r3, [pc, #284]	; (8002ac0 <HAL_RCC_OscConfig+0x338>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2202      	movs	r2, #2
 80029a8:	4013      	ands	r3, r2
 80029aa:	d1f1      	bne.n	8002990 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2208      	movs	r2, #8
 80029b2:	4013      	ands	r3, r2
 80029b4:	d036      	beq.n	8002a24 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	69db      	ldr	r3, [r3, #28]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d019      	beq.n	80029f2 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029be:	4b40      	ldr	r3, [pc, #256]	; (8002ac0 <HAL_RCC_OscConfig+0x338>)
 80029c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029c2:	4b3f      	ldr	r3, [pc, #252]	; (8002ac0 <HAL_RCC_OscConfig+0x338>)
 80029c4:	2101      	movs	r1, #1
 80029c6:	430a      	orrs	r2, r1
 80029c8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ca:	f7fe f8ef 	bl	8000bac <HAL_GetTick>
 80029ce:	0003      	movs	r3, r0
 80029d0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029d2:	e008      	b.n	80029e6 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029d4:	f7fe f8ea 	bl	8000bac <HAL_GetTick>
 80029d8:	0002      	movs	r2, r0
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e250      	b.n	8002e88 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029e6:	4b36      	ldr	r3, [pc, #216]	; (8002ac0 <HAL_RCC_OscConfig+0x338>)
 80029e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ea:	2202      	movs	r2, #2
 80029ec:	4013      	ands	r3, r2
 80029ee:	d0f1      	beq.n	80029d4 <HAL_RCC_OscConfig+0x24c>
 80029f0:	e018      	b.n	8002a24 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029f2:	4b33      	ldr	r3, [pc, #204]	; (8002ac0 <HAL_RCC_OscConfig+0x338>)
 80029f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029f6:	4b32      	ldr	r3, [pc, #200]	; (8002ac0 <HAL_RCC_OscConfig+0x338>)
 80029f8:	2101      	movs	r1, #1
 80029fa:	438a      	bics	r2, r1
 80029fc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029fe:	f7fe f8d5 	bl	8000bac <HAL_GetTick>
 8002a02:	0003      	movs	r3, r0
 8002a04:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a06:	e008      	b.n	8002a1a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a08:	f7fe f8d0 	bl	8000bac <HAL_GetTick>
 8002a0c:	0002      	movs	r2, r0
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e236      	b.n	8002e88 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a1a:	4b29      	ldr	r3, [pc, #164]	; (8002ac0 <HAL_RCC_OscConfig+0x338>)
 8002a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1e:	2202      	movs	r2, #2
 8002a20:	4013      	ands	r3, r2
 8002a22:	d1f1      	bne.n	8002a08 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2204      	movs	r2, #4
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	d100      	bne.n	8002a30 <HAL_RCC_OscConfig+0x2a8>
 8002a2e:	e0b5      	b.n	8002b9c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a30:	201f      	movs	r0, #31
 8002a32:	183b      	adds	r3, r7, r0
 8002a34:	2200      	movs	r2, #0
 8002a36:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a38:	4b21      	ldr	r3, [pc, #132]	; (8002ac0 <HAL_RCC_OscConfig+0x338>)
 8002a3a:	69da      	ldr	r2, [r3, #28]
 8002a3c:	2380      	movs	r3, #128	; 0x80
 8002a3e:	055b      	lsls	r3, r3, #21
 8002a40:	4013      	ands	r3, r2
 8002a42:	d110      	bne.n	8002a66 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a44:	4b1e      	ldr	r3, [pc, #120]	; (8002ac0 <HAL_RCC_OscConfig+0x338>)
 8002a46:	69da      	ldr	r2, [r3, #28]
 8002a48:	4b1d      	ldr	r3, [pc, #116]	; (8002ac0 <HAL_RCC_OscConfig+0x338>)
 8002a4a:	2180      	movs	r1, #128	; 0x80
 8002a4c:	0549      	lsls	r1, r1, #21
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	61da      	str	r2, [r3, #28]
 8002a52:	4b1b      	ldr	r3, [pc, #108]	; (8002ac0 <HAL_RCC_OscConfig+0x338>)
 8002a54:	69da      	ldr	r2, [r3, #28]
 8002a56:	2380      	movs	r3, #128	; 0x80
 8002a58:	055b      	lsls	r3, r3, #21
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	60fb      	str	r3, [r7, #12]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002a60:	183b      	adds	r3, r7, r0
 8002a62:	2201      	movs	r2, #1
 8002a64:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a66:	4b19      	ldr	r3, [pc, #100]	; (8002acc <HAL_RCC_OscConfig+0x344>)
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	2380      	movs	r3, #128	; 0x80
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	4013      	ands	r3, r2
 8002a70:	d11a      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a72:	4b16      	ldr	r3, [pc, #88]	; (8002acc <HAL_RCC_OscConfig+0x344>)
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	4b15      	ldr	r3, [pc, #84]	; (8002acc <HAL_RCC_OscConfig+0x344>)
 8002a78:	2180      	movs	r1, #128	; 0x80
 8002a7a:	0049      	lsls	r1, r1, #1
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a80:	f7fe f894 	bl	8000bac <HAL_GetTick>
 8002a84:	0003      	movs	r3, r0
 8002a86:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a88:	e008      	b.n	8002a9c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a8a:	f7fe f88f 	bl	8000bac <HAL_GetTick>
 8002a8e:	0002      	movs	r2, r0
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b64      	cmp	r3, #100	; 0x64
 8002a96:	d901      	bls.n	8002a9c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e1f5      	b.n	8002e88 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a9c:	4b0b      	ldr	r3, [pc, #44]	; (8002acc <HAL_RCC_OscConfig+0x344>)
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	2380      	movs	r3, #128	; 0x80
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	d0f0      	beq.n	8002a8a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d10f      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x348>
 8002ab0:	4b03      	ldr	r3, [pc, #12]	; (8002ac0 <HAL_RCC_OscConfig+0x338>)
 8002ab2:	6a1a      	ldr	r2, [r3, #32]
 8002ab4:	4b02      	ldr	r3, [pc, #8]	; (8002ac0 <HAL_RCC_OscConfig+0x338>)
 8002ab6:	2101      	movs	r1, #1
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	621a      	str	r2, [r3, #32]
 8002abc:	e036      	b.n	8002b2c <HAL_RCC_OscConfig+0x3a4>
 8002abe:	46c0      	nop			; (mov r8, r8)
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	fffeffff 	.word	0xfffeffff
 8002ac8:	fffbffff 	.word	0xfffbffff
 8002acc:	40007000 	.word	0x40007000
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d10c      	bne.n	8002af2 <HAL_RCC_OscConfig+0x36a>
 8002ad8:	4bca      	ldr	r3, [pc, #808]	; (8002e04 <HAL_RCC_OscConfig+0x67c>)
 8002ada:	6a1a      	ldr	r2, [r3, #32]
 8002adc:	4bc9      	ldr	r3, [pc, #804]	; (8002e04 <HAL_RCC_OscConfig+0x67c>)
 8002ade:	2101      	movs	r1, #1
 8002ae0:	438a      	bics	r2, r1
 8002ae2:	621a      	str	r2, [r3, #32]
 8002ae4:	4bc7      	ldr	r3, [pc, #796]	; (8002e04 <HAL_RCC_OscConfig+0x67c>)
 8002ae6:	6a1a      	ldr	r2, [r3, #32]
 8002ae8:	4bc6      	ldr	r3, [pc, #792]	; (8002e04 <HAL_RCC_OscConfig+0x67c>)
 8002aea:	2104      	movs	r1, #4
 8002aec:	438a      	bics	r2, r1
 8002aee:	621a      	str	r2, [r3, #32]
 8002af0:	e01c      	b.n	8002b2c <HAL_RCC_OscConfig+0x3a4>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	2b05      	cmp	r3, #5
 8002af8:	d10c      	bne.n	8002b14 <HAL_RCC_OscConfig+0x38c>
 8002afa:	4bc2      	ldr	r3, [pc, #776]	; (8002e04 <HAL_RCC_OscConfig+0x67c>)
 8002afc:	6a1a      	ldr	r2, [r3, #32]
 8002afe:	4bc1      	ldr	r3, [pc, #772]	; (8002e04 <HAL_RCC_OscConfig+0x67c>)
 8002b00:	2104      	movs	r1, #4
 8002b02:	430a      	orrs	r2, r1
 8002b04:	621a      	str	r2, [r3, #32]
 8002b06:	4bbf      	ldr	r3, [pc, #764]	; (8002e04 <HAL_RCC_OscConfig+0x67c>)
 8002b08:	6a1a      	ldr	r2, [r3, #32]
 8002b0a:	4bbe      	ldr	r3, [pc, #760]	; (8002e04 <HAL_RCC_OscConfig+0x67c>)
 8002b0c:	2101      	movs	r1, #1
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	621a      	str	r2, [r3, #32]
 8002b12:	e00b      	b.n	8002b2c <HAL_RCC_OscConfig+0x3a4>
 8002b14:	4bbb      	ldr	r3, [pc, #748]	; (8002e04 <HAL_RCC_OscConfig+0x67c>)
 8002b16:	6a1a      	ldr	r2, [r3, #32]
 8002b18:	4bba      	ldr	r3, [pc, #744]	; (8002e04 <HAL_RCC_OscConfig+0x67c>)
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	438a      	bics	r2, r1
 8002b1e:	621a      	str	r2, [r3, #32]
 8002b20:	4bb8      	ldr	r3, [pc, #736]	; (8002e04 <HAL_RCC_OscConfig+0x67c>)
 8002b22:	6a1a      	ldr	r2, [r3, #32]
 8002b24:	4bb7      	ldr	r3, [pc, #732]	; (8002e04 <HAL_RCC_OscConfig+0x67c>)
 8002b26:	2104      	movs	r1, #4
 8002b28:	438a      	bics	r2, r1
 8002b2a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d014      	beq.n	8002b5e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b34:	f7fe f83a 	bl	8000bac <HAL_GetTick>
 8002b38:	0003      	movs	r3, r0
 8002b3a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b3c:	e009      	b.n	8002b52 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b3e:	f7fe f835 	bl	8000bac <HAL_GetTick>
 8002b42:	0002      	movs	r2, r0
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	4aaf      	ldr	r2, [pc, #700]	; (8002e08 <HAL_RCC_OscConfig+0x680>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e19a      	b.n	8002e88 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b52:	4bac      	ldr	r3, [pc, #688]	; (8002e04 <HAL_RCC_OscConfig+0x67c>)
 8002b54:	6a1b      	ldr	r3, [r3, #32]
 8002b56:	2202      	movs	r2, #2
 8002b58:	4013      	ands	r3, r2
 8002b5a:	d0f0      	beq.n	8002b3e <HAL_RCC_OscConfig+0x3b6>
 8002b5c:	e013      	b.n	8002b86 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b5e:	f7fe f825 	bl	8000bac <HAL_GetTick>
 8002b62:	0003      	movs	r3, r0
 8002b64:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b66:	e009      	b.n	8002b7c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b68:	f7fe f820 	bl	8000bac <HAL_GetTick>
 8002b6c:	0002      	movs	r2, r0
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	4aa5      	ldr	r2, [pc, #660]	; (8002e08 <HAL_RCC_OscConfig+0x680>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d901      	bls.n	8002b7c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e185      	b.n	8002e88 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b7c:	4ba1      	ldr	r3, [pc, #644]	; (8002e04 <HAL_RCC_OscConfig+0x67c>)
 8002b7e:	6a1b      	ldr	r3, [r3, #32]
 8002b80:	2202      	movs	r2, #2
 8002b82:	4013      	ands	r3, r2
 8002b84:	d1f0      	bne.n	8002b68 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b86:	231f      	movs	r3, #31
 8002b88:	18fb      	adds	r3, r7, r3
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d105      	bne.n	8002b9c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b90:	4b9c      	ldr	r3, [pc, #624]	; (8002e04 <HAL_RCC_OscConfig+0x67c>)
 8002b92:	69da      	ldr	r2, [r3, #28]
 8002b94:	4b9b      	ldr	r3, [pc, #620]	; (8002e04 <HAL_RCC_OscConfig+0x67c>)
 8002b96:	499d      	ldr	r1, [pc, #628]	; (8002e0c <HAL_RCC_OscConfig+0x684>)
 8002b98:	400a      	ands	r2, r1
 8002b9a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2210      	movs	r2, #16
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	d063      	beq.n	8002c6e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d12a      	bne.n	8002c04 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002bae:	4b95      	ldr	r3, [pc, #596]	; (8002e04 <HAL_RCC_OscConfig+0x67c>)
 8002bb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bb2:	4b94      	ldr	r3, [pc, #592]	; (8002e04 <HAL_RCC_OscConfig+0x67c>)
 8002bb4:	2104      	movs	r1, #4
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002bba:	4b92      	ldr	r3, [pc, #584]	; (8002e04 <HAL_RCC_OscConfig+0x67c>)
 8002bbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bbe:	4b91      	ldr	r3, [pc, #580]	; (8002e04 <HAL_RCC_OscConfig+0x67c>)
 8002bc0:	2101      	movs	r1, #1
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bc6:	f7fd fff1 	bl	8000bac <HAL_GetTick>
 8002bca:	0003      	movs	r3, r0
 8002bcc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002bce:	e008      	b.n	8002be2 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002bd0:	f7fd ffec 	bl	8000bac <HAL_GetTick>
 8002bd4:	0002      	movs	r2, r0
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e152      	b.n	8002e88 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002be2:	4b88      	ldr	r3, [pc, #544]	; (8002e04 <HAL_RCC_OscConfig+0x67c>)
 8002be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002be6:	2202      	movs	r2, #2
 8002be8:	4013      	ands	r3, r2
 8002bea:	d0f1      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002bec:	4b85      	ldr	r3, [pc, #532]	; (8002e04 <HAL_RCC_OscConfig+0x67c>)
 8002bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bf0:	22f8      	movs	r2, #248	; 0xf8
 8002bf2:	4393      	bics	r3, r2
 8002bf4:	0019      	movs	r1, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	00da      	lsls	r2, r3, #3
 8002bfc:	4b81      	ldr	r3, [pc, #516]	; (8002e04 <HAL_RCC_OscConfig+0x67c>)
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	635a      	str	r2, [r3, #52]	; 0x34
 8002c02:	e034      	b.n	8002c6e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	695b      	ldr	r3, [r3, #20]
 8002c08:	3305      	adds	r3, #5
 8002c0a:	d111      	bne.n	8002c30 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002c0c:	4b7d      	ldr	r3, [pc, #500]	; (8002e04 <HAL_RCC_OscConfig+0x67c>)
 8002c0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c10:	4b7c      	ldr	r3, [pc, #496]	; (8002e04 <HAL_RCC_OscConfig+0x67c>)
 8002c12:	2104      	movs	r1, #4
 8002c14:	438a      	bics	r2, r1
 8002c16:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002c18:	4b7a      	ldr	r3, [pc, #488]	; (8002e04 <HAL_RCC_OscConfig+0x67c>)
 8002c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c1c:	22f8      	movs	r2, #248	; 0xf8
 8002c1e:	4393      	bics	r3, r2
 8002c20:	0019      	movs	r1, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	00da      	lsls	r2, r3, #3
 8002c28:	4b76      	ldr	r3, [pc, #472]	; (8002e04 <HAL_RCC_OscConfig+0x67c>)
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	635a      	str	r2, [r3, #52]	; 0x34
 8002c2e:	e01e      	b.n	8002c6e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002c30:	4b74      	ldr	r3, [pc, #464]	; (8002e04 <HAL_RCC_OscConfig+0x67c>)
 8002c32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c34:	4b73      	ldr	r3, [pc, #460]	; (8002e04 <HAL_RCC_OscConfig+0x67c>)
 8002c36:	2104      	movs	r1, #4
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002c3c:	4b71      	ldr	r3, [pc, #452]	; (8002e04 <HAL_RCC_OscConfig+0x67c>)
 8002c3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c40:	4b70      	ldr	r3, [pc, #448]	; (8002e04 <HAL_RCC_OscConfig+0x67c>)
 8002c42:	2101      	movs	r1, #1
 8002c44:	438a      	bics	r2, r1
 8002c46:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c48:	f7fd ffb0 	bl	8000bac <HAL_GetTick>
 8002c4c:	0003      	movs	r3, r0
 8002c4e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002c50:	e008      	b.n	8002c64 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002c52:	f7fd ffab 	bl	8000bac <HAL_GetTick>
 8002c56:	0002      	movs	r2, r0
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d901      	bls.n	8002c64 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e111      	b.n	8002e88 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002c64:	4b67      	ldr	r3, [pc, #412]	; (8002e04 <HAL_RCC_OscConfig+0x67c>)
 8002c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c68:	2202      	movs	r2, #2
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	d1f1      	bne.n	8002c52 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2220      	movs	r2, #32
 8002c74:	4013      	ands	r3, r2
 8002c76:	d05c      	beq.n	8002d32 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002c78:	4b62      	ldr	r3, [pc, #392]	; (8002e04 <HAL_RCC_OscConfig+0x67c>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	220c      	movs	r2, #12
 8002c7e:	4013      	ands	r3, r2
 8002c80:	2b0c      	cmp	r3, #12
 8002c82:	d00e      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002c84:	4b5f      	ldr	r3, [pc, #380]	; (8002e04 <HAL_RCC_OscConfig+0x67c>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	220c      	movs	r2, #12
 8002c8a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002c8c:	2b08      	cmp	r3, #8
 8002c8e:	d114      	bne.n	8002cba <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002c90:	4b5c      	ldr	r3, [pc, #368]	; (8002e04 <HAL_RCC_OscConfig+0x67c>)
 8002c92:	685a      	ldr	r2, [r3, #4]
 8002c94:	23c0      	movs	r3, #192	; 0xc0
 8002c96:	025b      	lsls	r3, r3, #9
 8002c98:	401a      	ands	r2, r3
 8002c9a:	23c0      	movs	r3, #192	; 0xc0
 8002c9c:	025b      	lsls	r3, r3, #9
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d10b      	bne.n	8002cba <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002ca2:	4b58      	ldr	r3, [pc, #352]	; (8002e04 <HAL_RCC_OscConfig+0x67c>)
 8002ca4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ca6:	2380      	movs	r3, #128	; 0x80
 8002ca8:	025b      	lsls	r3, r3, #9
 8002caa:	4013      	ands	r3, r2
 8002cac:	d040      	beq.n	8002d30 <HAL_RCC_OscConfig+0x5a8>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d03c      	beq.n	8002d30 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e0e6      	b.n	8002e88 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a1b      	ldr	r3, [r3, #32]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d01b      	beq.n	8002cfa <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002cc2:	4b50      	ldr	r3, [pc, #320]	; (8002e04 <HAL_RCC_OscConfig+0x67c>)
 8002cc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cc6:	4b4f      	ldr	r3, [pc, #316]	; (8002e04 <HAL_RCC_OscConfig+0x67c>)
 8002cc8:	2180      	movs	r1, #128	; 0x80
 8002cca:	0249      	lsls	r1, r1, #9
 8002ccc:	430a      	orrs	r2, r1
 8002cce:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd0:	f7fd ff6c 	bl	8000bac <HAL_GetTick>
 8002cd4:	0003      	movs	r3, r0
 8002cd6:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002cd8:	e008      	b.n	8002cec <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002cda:	f7fd ff67 	bl	8000bac <HAL_GetTick>
 8002cde:	0002      	movs	r2, r0
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d901      	bls.n	8002cec <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e0cd      	b.n	8002e88 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002cec:	4b45      	ldr	r3, [pc, #276]	; (8002e04 <HAL_RCC_OscConfig+0x67c>)
 8002cee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cf0:	2380      	movs	r3, #128	; 0x80
 8002cf2:	025b      	lsls	r3, r3, #9
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	d0f0      	beq.n	8002cda <HAL_RCC_OscConfig+0x552>
 8002cf8:	e01b      	b.n	8002d32 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002cfa:	4b42      	ldr	r3, [pc, #264]	; (8002e04 <HAL_RCC_OscConfig+0x67c>)
 8002cfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cfe:	4b41      	ldr	r3, [pc, #260]	; (8002e04 <HAL_RCC_OscConfig+0x67c>)
 8002d00:	4943      	ldr	r1, [pc, #268]	; (8002e10 <HAL_RCC_OscConfig+0x688>)
 8002d02:	400a      	ands	r2, r1
 8002d04:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d06:	f7fd ff51 	bl	8000bac <HAL_GetTick>
 8002d0a:	0003      	movs	r3, r0
 8002d0c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002d0e:	e008      	b.n	8002d22 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d10:	f7fd ff4c 	bl	8000bac <HAL_GetTick>
 8002d14:	0002      	movs	r2, r0
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e0b2      	b.n	8002e88 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002d22:	4b38      	ldr	r3, [pc, #224]	; (8002e04 <HAL_RCC_OscConfig+0x67c>)
 8002d24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d26:	2380      	movs	r3, #128	; 0x80
 8002d28:	025b      	lsls	r3, r3, #9
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	d1f0      	bne.n	8002d10 <HAL_RCC_OscConfig+0x588>
 8002d2e:	e000      	b.n	8002d32 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002d30:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d100      	bne.n	8002d3c <HAL_RCC_OscConfig+0x5b4>
 8002d3a:	e0a4      	b.n	8002e86 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d3c:	4b31      	ldr	r3, [pc, #196]	; (8002e04 <HAL_RCC_OscConfig+0x67c>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	220c      	movs	r2, #12
 8002d42:	4013      	ands	r3, r2
 8002d44:	2b08      	cmp	r3, #8
 8002d46:	d100      	bne.n	8002d4a <HAL_RCC_OscConfig+0x5c2>
 8002d48:	e078      	b.n	8002e3c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d14c      	bne.n	8002dec <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d52:	4b2c      	ldr	r3, [pc, #176]	; (8002e04 <HAL_RCC_OscConfig+0x67c>)
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	4b2b      	ldr	r3, [pc, #172]	; (8002e04 <HAL_RCC_OscConfig+0x67c>)
 8002d58:	492e      	ldr	r1, [pc, #184]	; (8002e14 <HAL_RCC_OscConfig+0x68c>)
 8002d5a:	400a      	ands	r2, r1
 8002d5c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d5e:	f7fd ff25 	bl	8000bac <HAL_GetTick>
 8002d62:	0003      	movs	r3, r0
 8002d64:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d68:	f7fd ff20 	bl	8000bac <HAL_GetTick>
 8002d6c:	0002      	movs	r2, r0
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e086      	b.n	8002e88 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d7a:	4b22      	ldr	r3, [pc, #136]	; (8002e04 <HAL_RCC_OscConfig+0x67c>)
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	2380      	movs	r3, #128	; 0x80
 8002d80:	049b      	lsls	r3, r3, #18
 8002d82:	4013      	ands	r3, r2
 8002d84:	d1f0      	bne.n	8002d68 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d86:	4b1f      	ldr	r3, [pc, #124]	; (8002e04 <HAL_RCC_OscConfig+0x67c>)
 8002d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8a:	220f      	movs	r2, #15
 8002d8c:	4393      	bics	r3, r2
 8002d8e:	0019      	movs	r1, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d94:	4b1b      	ldr	r3, [pc, #108]	; (8002e04 <HAL_RCC_OscConfig+0x67c>)
 8002d96:	430a      	orrs	r2, r1
 8002d98:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d9a:	4b1a      	ldr	r3, [pc, #104]	; (8002e04 <HAL_RCC_OscConfig+0x67c>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	4a1e      	ldr	r2, [pc, #120]	; (8002e18 <HAL_RCC_OscConfig+0x690>)
 8002da0:	4013      	ands	r3, r2
 8002da2:	0019      	movs	r1, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dac:	431a      	orrs	r2, r3
 8002dae:	4b15      	ldr	r3, [pc, #84]	; (8002e04 <HAL_RCC_OscConfig+0x67c>)
 8002db0:	430a      	orrs	r2, r1
 8002db2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002db4:	4b13      	ldr	r3, [pc, #76]	; (8002e04 <HAL_RCC_OscConfig+0x67c>)
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	4b12      	ldr	r3, [pc, #72]	; (8002e04 <HAL_RCC_OscConfig+0x67c>)
 8002dba:	2180      	movs	r1, #128	; 0x80
 8002dbc:	0449      	lsls	r1, r1, #17
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc2:	f7fd fef3 	bl	8000bac <HAL_GetTick>
 8002dc6:	0003      	movs	r3, r0
 8002dc8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dca:	e008      	b.n	8002dde <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dcc:	f7fd feee 	bl	8000bac <HAL_GetTick>
 8002dd0:	0002      	movs	r2, r0
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e054      	b.n	8002e88 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dde:	4b09      	ldr	r3, [pc, #36]	; (8002e04 <HAL_RCC_OscConfig+0x67c>)
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	2380      	movs	r3, #128	; 0x80
 8002de4:	049b      	lsls	r3, r3, #18
 8002de6:	4013      	ands	r3, r2
 8002de8:	d0f0      	beq.n	8002dcc <HAL_RCC_OscConfig+0x644>
 8002dea:	e04c      	b.n	8002e86 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dec:	4b05      	ldr	r3, [pc, #20]	; (8002e04 <HAL_RCC_OscConfig+0x67c>)
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	4b04      	ldr	r3, [pc, #16]	; (8002e04 <HAL_RCC_OscConfig+0x67c>)
 8002df2:	4908      	ldr	r1, [pc, #32]	; (8002e14 <HAL_RCC_OscConfig+0x68c>)
 8002df4:	400a      	ands	r2, r1
 8002df6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df8:	f7fd fed8 	bl	8000bac <HAL_GetTick>
 8002dfc:	0003      	movs	r3, r0
 8002dfe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e00:	e015      	b.n	8002e2e <HAL_RCC_OscConfig+0x6a6>
 8002e02:	46c0      	nop			; (mov r8, r8)
 8002e04:	40021000 	.word	0x40021000
 8002e08:	00001388 	.word	0x00001388
 8002e0c:	efffffff 	.word	0xefffffff
 8002e10:	fffeffff 	.word	0xfffeffff
 8002e14:	feffffff 	.word	0xfeffffff
 8002e18:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e1c:	f7fd fec6 	bl	8000bac <HAL_GetTick>
 8002e20:	0002      	movs	r2, r0
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e02c      	b.n	8002e88 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e2e:	4b18      	ldr	r3, [pc, #96]	; (8002e90 <HAL_RCC_OscConfig+0x708>)
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	2380      	movs	r3, #128	; 0x80
 8002e34:	049b      	lsls	r3, r3, #18
 8002e36:	4013      	ands	r3, r2
 8002e38:	d1f0      	bne.n	8002e1c <HAL_RCC_OscConfig+0x694>
 8002e3a:	e024      	b.n	8002e86 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d101      	bne.n	8002e48 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e01f      	b.n	8002e88 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002e48:	4b11      	ldr	r3, [pc, #68]	; (8002e90 <HAL_RCC_OscConfig+0x708>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002e4e:	4b10      	ldr	r3, [pc, #64]	; (8002e90 <HAL_RCC_OscConfig+0x708>)
 8002e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e52:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e54:	697a      	ldr	r2, [r7, #20]
 8002e56:	23c0      	movs	r3, #192	; 0xc0
 8002e58:	025b      	lsls	r3, r3, #9
 8002e5a:	401a      	ands	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d10e      	bne.n	8002e82 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	220f      	movs	r2, #15
 8002e68:	401a      	ands	r2, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d107      	bne.n	8002e82 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002e72:	697a      	ldr	r2, [r7, #20]
 8002e74:	23f0      	movs	r3, #240	; 0xf0
 8002e76:	039b      	lsls	r3, r3, #14
 8002e78:	401a      	ands	r2, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d001      	beq.n	8002e86 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e000      	b.n	8002e88 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	0018      	movs	r0, r3
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	b008      	add	sp, #32
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	40021000 	.word	0x40021000

08002e94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d101      	bne.n	8002ea8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e0bf      	b.n	8003028 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ea8:	4b61      	ldr	r3, [pc, #388]	; (8003030 <HAL_RCC_ClockConfig+0x19c>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2201      	movs	r2, #1
 8002eae:	4013      	ands	r3, r2
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d911      	bls.n	8002eda <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eb6:	4b5e      	ldr	r3, [pc, #376]	; (8003030 <HAL_RCC_ClockConfig+0x19c>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	4393      	bics	r3, r2
 8002ebe:	0019      	movs	r1, r3
 8002ec0:	4b5b      	ldr	r3, [pc, #364]	; (8003030 <HAL_RCC_ClockConfig+0x19c>)
 8002ec2:	683a      	ldr	r2, [r7, #0]
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ec8:	4b59      	ldr	r3, [pc, #356]	; (8003030 <HAL_RCC_ClockConfig+0x19c>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	4013      	ands	r3, r2
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d001      	beq.n	8002eda <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e0a6      	b.n	8003028 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2202      	movs	r2, #2
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	d015      	beq.n	8002f10 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2204      	movs	r2, #4
 8002eea:	4013      	ands	r3, r2
 8002eec:	d006      	beq.n	8002efc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002eee:	4b51      	ldr	r3, [pc, #324]	; (8003034 <HAL_RCC_ClockConfig+0x1a0>)
 8002ef0:	685a      	ldr	r2, [r3, #4]
 8002ef2:	4b50      	ldr	r3, [pc, #320]	; (8003034 <HAL_RCC_ClockConfig+0x1a0>)
 8002ef4:	21e0      	movs	r1, #224	; 0xe0
 8002ef6:	00c9      	lsls	r1, r1, #3
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002efc:	4b4d      	ldr	r3, [pc, #308]	; (8003034 <HAL_RCC_ClockConfig+0x1a0>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	22f0      	movs	r2, #240	; 0xf0
 8002f02:	4393      	bics	r3, r2
 8002f04:	0019      	movs	r1, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	689a      	ldr	r2, [r3, #8]
 8002f0a:	4b4a      	ldr	r3, [pc, #296]	; (8003034 <HAL_RCC_ClockConfig+0x1a0>)
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2201      	movs	r2, #1
 8002f16:	4013      	ands	r3, r2
 8002f18:	d04c      	beq.n	8002fb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d107      	bne.n	8002f32 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f22:	4b44      	ldr	r3, [pc, #272]	; (8003034 <HAL_RCC_ClockConfig+0x1a0>)
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	2380      	movs	r3, #128	; 0x80
 8002f28:	029b      	lsls	r3, r3, #10
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	d120      	bne.n	8002f70 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e07a      	b.n	8003028 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d107      	bne.n	8002f4a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f3a:	4b3e      	ldr	r3, [pc, #248]	; (8003034 <HAL_RCC_ClockConfig+0x1a0>)
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	2380      	movs	r3, #128	; 0x80
 8002f40:	049b      	lsls	r3, r3, #18
 8002f42:	4013      	ands	r3, r2
 8002f44:	d114      	bne.n	8002f70 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e06e      	b.n	8003028 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	2b03      	cmp	r3, #3
 8002f50:	d107      	bne.n	8002f62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002f52:	4b38      	ldr	r3, [pc, #224]	; (8003034 <HAL_RCC_ClockConfig+0x1a0>)
 8002f54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f56:	2380      	movs	r3, #128	; 0x80
 8002f58:	025b      	lsls	r3, r3, #9
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	d108      	bne.n	8002f70 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e062      	b.n	8003028 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f62:	4b34      	ldr	r3, [pc, #208]	; (8003034 <HAL_RCC_ClockConfig+0x1a0>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2202      	movs	r2, #2
 8002f68:	4013      	ands	r3, r2
 8002f6a:	d101      	bne.n	8002f70 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e05b      	b.n	8003028 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f70:	4b30      	ldr	r3, [pc, #192]	; (8003034 <HAL_RCC_ClockConfig+0x1a0>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	2203      	movs	r2, #3
 8002f76:	4393      	bics	r3, r2
 8002f78:	0019      	movs	r1, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685a      	ldr	r2, [r3, #4]
 8002f7e:	4b2d      	ldr	r3, [pc, #180]	; (8003034 <HAL_RCC_ClockConfig+0x1a0>)
 8002f80:	430a      	orrs	r2, r1
 8002f82:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f84:	f7fd fe12 	bl	8000bac <HAL_GetTick>
 8002f88:	0003      	movs	r3, r0
 8002f8a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f8c:	e009      	b.n	8002fa2 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f8e:	f7fd fe0d 	bl	8000bac <HAL_GetTick>
 8002f92:	0002      	movs	r2, r0
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	4a27      	ldr	r2, [pc, #156]	; (8003038 <HAL_RCC_ClockConfig+0x1a4>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e042      	b.n	8003028 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fa2:	4b24      	ldr	r3, [pc, #144]	; (8003034 <HAL_RCC_ClockConfig+0x1a0>)
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	220c      	movs	r2, #12
 8002fa8:	401a      	ands	r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d1ec      	bne.n	8002f8e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fb4:	4b1e      	ldr	r3, [pc, #120]	; (8003030 <HAL_RCC_ClockConfig+0x19c>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	4013      	ands	r3, r2
 8002fbc:	683a      	ldr	r2, [r7, #0]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d211      	bcs.n	8002fe6 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fc2:	4b1b      	ldr	r3, [pc, #108]	; (8003030 <HAL_RCC_ClockConfig+0x19c>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	4393      	bics	r3, r2
 8002fca:	0019      	movs	r1, r3
 8002fcc:	4b18      	ldr	r3, [pc, #96]	; (8003030 <HAL_RCC_ClockConfig+0x19c>)
 8002fce:	683a      	ldr	r2, [r7, #0]
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fd4:	4b16      	ldr	r3, [pc, #88]	; (8003030 <HAL_RCC_ClockConfig+0x19c>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	4013      	ands	r3, r2
 8002fdc:	683a      	ldr	r2, [r7, #0]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d001      	beq.n	8002fe6 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e020      	b.n	8003028 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2204      	movs	r2, #4
 8002fec:	4013      	ands	r3, r2
 8002fee:	d009      	beq.n	8003004 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002ff0:	4b10      	ldr	r3, [pc, #64]	; (8003034 <HAL_RCC_ClockConfig+0x1a0>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	4a11      	ldr	r2, [pc, #68]	; (800303c <HAL_RCC_ClockConfig+0x1a8>)
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	0019      	movs	r1, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	68da      	ldr	r2, [r3, #12]
 8002ffe:	4b0d      	ldr	r3, [pc, #52]	; (8003034 <HAL_RCC_ClockConfig+0x1a0>)
 8003000:	430a      	orrs	r2, r1
 8003002:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003004:	f000 f820 	bl	8003048 <HAL_RCC_GetSysClockFreq>
 8003008:	0001      	movs	r1, r0
 800300a:	4b0a      	ldr	r3, [pc, #40]	; (8003034 <HAL_RCC_ClockConfig+0x1a0>)
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	091b      	lsrs	r3, r3, #4
 8003010:	220f      	movs	r2, #15
 8003012:	4013      	ands	r3, r2
 8003014:	4a0a      	ldr	r2, [pc, #40]	; (8003040 <HAL_RCC_ClockConfig+0x1ac>)
 8003016:	5cd3      	ldrb	r3, [r2, r3]
 8003018:	000a      	movs	r2, r1
 800301a:	40da      	lsrs	r2, r3
 800301c:	4b09      	ldr	r3, [pc, #36]	; (8003044 <HAL_RCC_ClockConfig+0x1b0>)
 800301e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003020:	2003      	movs	r0, #3
 8003022:	f7fd fd7d 	bl	8000b20 <HAL_InitTick>
  
  return HAL_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	0018      	movs	r0, r3
 800302a:	46bd      	mov	sp, r7
 800302c:	b004      	add	sp, #16
 800302e:	bd80      	pop	{r7, pc}
 8003030:	40022000 	.word	0x40022000
 8003034:	40021000 	.word	0x40021000
 8003038:	00001388 	.word	0x00001388
 800303c:	fffff8ff 	.word	0xfffff8ff
 8003040:	08003d64 	.word	0x08003d64
 8003044:	20000000 	.word	0x20000000

08003048 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003048:	b590      	push	{r4, r7, lr}
 800304a:	b08f      	sub	sp, #60	; 0x3c
 800304c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800304e:	2314      	movs	r3, #20
 8003050:	18fb      	adds	r3, r7, r3
 8003052:	4a38      	ldr	r2, [pc, #224]	; (8003134 <HAL_RCC_GetSysClockFreq+0xec>)
 8003054:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003056:	c313      	stmia	r3!, {r0, r1, r4}
 8003058:	6812      	ldr	r2, [r2, #0]
 800305a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800305c:	1d3b      	adds	r3, r7, #4
 800305e:	4a36      	ldr	r2, [pc, #216]	; (8003138 <HAL_RCC_GetSysClockFreq+0xf0>)
 8003060:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003062:	c313      	stmia	r3!, {r0, r1, r4}
 8003064:	6812      	ldr	r2, [r2, #0]
 8003066:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003068:	2300      	movs	r3, #0
 800306a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800306c:	2300      	movs	r3, #0
 800306e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003070:	2300      	movs	r3, #0
 8003072:	637b      	str	r3, [r7, #52]	; 0x34
 8003074:	2300      	movs	r3, #0
 8003076:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003078:	2300      	movs	r3, #0
 800307a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800307c:	4b2f      	ldr	r3, [pc, #188]	; (800313c <HAL_RCC_GetSysClockFreq+0xf4>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003084:	220c      	movs	r2, #12
 8003086:	4013      	ands	r3, r2
 8003088:	2b0c      	cmp	r3, #12
 800308a:	d047      	beq.n	800311c <HAL_RCC_GetSysClockFreq+0xd4>
 800308c:	d849      	bhi.n	8003122 <HAL_RCC_GetSysClockFreq+0xda>
 800308e:	2b04      	cmp	r3, #4
 8003090:	d002      	beq.n	8003098 <HAL_RCC_GetSysClockFreq+0x50>
 8003092:	2b08      	cmp	r3, #8
 8003094:	d003      	beq.n	800309e <HAL_RCC_GetSysClockFreq+0x56>
 8003096:	e044      	b.n	8003122 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003098:	4b29      	ldr	r3, [pc, #164]	; (8003140 <HAL_RCC_GetSysClockFreq+0xf8>)
 800309a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800309c:	e044      	b.n	8003128 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800309e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030a0:	0c9b      	lsrs	r3, r3, #18
 80030a2:	220f      	movs	r2, #15
 80030a4:	4013      	ands	r3, r2
 80030a6:	2214      	movs	r2, #20
 80030a8:	18ba      	adds	r2, r7, r2
 80030aa:	5cd3      	ldrb	r3, [r2, r3]
 80030ac:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80030ae:	4b23      	ldr	r3, [pc, #140]	; (800313c <HAL_RCC_GetSysClockFreq+0xf4>)
 80030b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b2:	220f      	movs	r2, #15
 80030b4:	4013      	ands	r3, r2
 80030b6:	1d3a      	adds	r2, r7, #4
 80030b8:	5cd3      	ldrb	r3, [r2, r3]
 80030ba:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80030bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030be:	23c0      	movs	r3, #192	; 0xc0
 80030c0:	025b      	lsls	r3, r3, #9
 80030c2:	401a      	ands	r2, r3
 80030c4:	2380      	movs	r3, #128	; 0x80
 80030c6:	025b      	lsls	r3, r3, #9
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d109      	bne.n	80030e0 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80030cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030ce:	481c      	ldr	r0, [pc, #112]	; (8003140 <HAL_RCC_GetSysClockFreq+0xf8>)
 80030d0:	f7fd f818 	bl	8000104 <__udivsi3>
 80030d4:	0003      	movs	r3, r0
 80030d6:	001a      	movs	r2, r3
 80030d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030da:	4353      	muls	r3, r2
 80030dc:	637b      	str	r3, [r7, #52]	; 0x34
 80030de:	e01a      	b.n	8003116 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80030e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030e2:	23c0      	movs	r3, #192	; 0xc0
 80030e4:	025b      	lsls	r3, r3, #9
 80030e6:	401a      	ands	r2, r3
 80030e8:	23c0      	movs	r3, #192	; 0xc0
 80030ea:	025b      	lsls	r3, r3, #9
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d109      	bne.n	8003104 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80030f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030f2:	4814      	ldr	r0, [pc, #80]	; (8003144 <HAL_RCC_GetSysClockFreq+0xfc>)
 80030f4:	f7fd f806 	bl	8000104 <__udivsi3>
 80030f8:	0003      	movs	r3, r0
 80030fa:	001a      	movs	r2, r3
 80030fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fe:	4353      	muls	r3, r2
 8003100:	637b      	str	r3, [r7, #52]	; 0x34
 8003102:	e008      	b.n	8003116 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003104:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003106:	480e      	ldr	r0, [pc, #56]	; (8003140 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003108:	f7fc fffc 	bl	8000104 <__udivsi3>
 800310c:	0003      	movs	r3, r0
 800310e:	001a      	movs	r2, r3
 8003110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003112:	4353      	muls	r3, r2
 8003114:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8003116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003118:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800311a:	e005      	b.n	8003128 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800311c:	4b09      	ldr	r3, [pc, #36]	; (8003144 <HAL_RCC_GetSysClockFreq+0xfc>)
 800311e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003120:	e002      	b.n	8003128 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003122:	4b07      	ldr	r3, [pc, #28]	; (8003140 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003124:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003126:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800312a:	0018      	movs	r0, r3
 800312c:	46bd      	mov	sp, r7
 800312e:	b00f      	add	sp, #60	; 0x3c
 8003130:	bd90      	pop	{r4, r7, pc}
 8003132:	46c0      	nop			; (mov r8, r8)
 8003134:	08003d44 	.word	0x08003d44
 8003138:	08003d54 	.word	0x08003d54
 800313c:	40021000 	.word	0x40021000
 8003140:	007a1200 	.word	0x007a1200
 8003144:	02dc6c00 	.word	0x02dc6c00

08003148 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800314c:	4b02      	ldr	r3, [pc, #8]	; (8003158 <HAL_RCC_GetHCLKFreq+0x10>)
 800314e:	681b      	ldr	r3, [r3, #0]
}
 8003150:	0018      	movs	r0, r3
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	46c0      	nop			; (mov r8, r8)
 8003158:	20000000 	.word	0x20000000

0800315c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003160:	f7ff fff2 	bl	8003148 <HAL_RCC_GetHCLKFreq>
 8003164:	0001      	movs	r1, r0
 8003166:	4b06      	ldr	r3, [pc, #24]	; (8003180 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	0a1b      	lsrs	r3, r3, #8
 800316c:	2207      	movs	r2, #7
 800316e:	4013      	ands	r3, r2
 8003170:	4a04      	ldr	r2, [pc, #16]	; (8003184 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003172:	5cd3      	ldrb	r3, [r2, r3]
 8003174:	40d9      	lsrs	r1, r3
 8003176:	000b      	movs	r3, r1
}    
 8003178:	0018      	movs	r0, r3
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	46c0      	nop			; (mov r8, r8)
 8003180:	40021000 	.word	0x40021000
 8003184:	08003d74 	.word	0x08003d74

08003188 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003190:	2300      	movs	r3, #0
 8003192:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003194:	2300      	movs	r3, #0
 8003196:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	2380      	movs	r3, #128	; 0x80
 800319e:	025b      	lsls	r3, r3, #9
 80031a0:	4013      	ands	r3, r2
 80031a2:	d100      	bne.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80031a4:	e08e      	b.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80031a6:	2017      	movs	r0, #23
 80031a8:	183b      	adds	r3, r7, r0
 80031aa:	2200      	movs	r2, #0
 80031ac:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031ae:	4b6e      	ldr	r3, [pc, #440]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80031b0:	69da      	ldr	r2, [r3, #28]
 80031b2:	2380      	movs	r3, #128	; 0x80
 80031b4:	055b      	lsls	r3, r3, #21
 80031b6:	4013      	ands	r3, r2
 80031b8:	d110      	bne.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80031ba:	4b6b      	ldr	r3, [pc, #428]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80031bc:	69da      	ldr	r2, [r3, #28]
 80031be:	4b6a      	ldr	r3, [pc, #424]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80031c0:	2180      	movs	r1, #128	; 0x80
 80031c2:	0549      	lsls	r1, r1, #21
 80031c4:	430a      	orrs	r2, r1
 80031c6:	61da      	str	r2, [r3, #28]
 80031c8:	4b67      	ldr	r3, [pc, #412]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80031ca:	69da      	ldr	r2, [r3, #28]
 80031cc:	2380      	movs	r3, #128	; 0x80
 80031ce:	055b      	lsls	r3, r3, #21
 80031d0:	4013      	ands	r3, r2
 80031d2:	60bb      	str	r3, [r7, #8]
 80031d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031d6:	183b      	adds	r3, r7, r0
 80031d8:	2201      	movs	r2, #1
 80031da:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031dc:	4b63      	ldr	r3, [pc, #396]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	2380      	movs	r3, #128	; 0x80
 80031e2:	005b      	lsls	r3, r3, #1
 80031e4:	4013      	ands	r3, r2
 80031e6:	d11a      	bne.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031e8:	4b60      	ldr	r3, [pc, #384]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	4b5f      	ldr	r3, [pc, #380]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80031ee:	2180      	movs	r1, #128	; 0x80
 80031f0:	0049      	lsls	r1, r1, #1
 80031f2:	430a      	orrs	r2, r1
 80031f4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031f6:	f7fd fcd9 	bl	8000bac <HAL_GetTick>
 80031fa:	0003      	movs	r3, r0
 80031fc:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031fe:	e008      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003200:	f7fd fcd4 	bl	8000bac <HAL_GetTick>
 8003204:	0002      	movs	r2, r0
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b64      	cmp	r3, #100	; 0x64
 800320c:	d901      	bls.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e0a6      	b.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003212:	4b56      	ldr	r3, [pc, #344]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	2380      	movs	r3, #128	; 0x80
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	4013      	ands	r3, r2
 800321c:	d0f0      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800321e:	4b52      	ldr	r3, [pc, #328]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003220:	6a1a      	ldr	r2, [r3, #32]
 8003222:	23c0      	movs	r3, #192	; 0xc0
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	4013      	ands	r3, r2
 8003228:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d034      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685a      	ldr	r2, [r3, #4]
 8003234:	23c0      	movs	r3, #192	; 0xc0
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	4013      	ands	r3, r2
 800323a:	68fa      	ldr	r2, [r7, #12]
 800323c:	429a      	cmp	r2, r3
 800323e:	d02c      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003240:	4b49      	ldr	r3, [pc, #292]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003242:	6a1b      	ldr	r3, [r3, #32]
 8003244:	4a4a      	ldr	r2, [pc, #296]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003246:	4013      	ands	r3, r2
 8003248:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800324a:	4b47      	ldr	r3, [pc, #284]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800324c:	6a1a      	ldr	r2, [r3, #32]
 800324e:	4b46      	ldr	r3, [pc, #280]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003250:	2180      	movs	r1, #128	; 0x80
 8003252:	0249      	lsls	r1, r1, #9
 8003254:	430a      	orrs	r2, r1
 8003256:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003258:	4b43      	ldr	r3, [pc, #268]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800325a:	6a1a      	ldr	r2, [r3, #32]
 800325c:	4b42      	ldr	r3, [pc, #264]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800325e:	4945      	ldr	r1, [pc, #276]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8003260:	400a      	ands	r2, r1
 8003262:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003264:	4b40      	ldr	r3, [pc, #256]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2201      	movs	r2, #1
 800326e:	4013      	ands	r3, r2
 8003270:	d013      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003272:	f7fd fc9b 	bl	8000bac <HAL_GetTick>
 8003276:	0003      	movs	r3, r0
 8003278:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800327a:	e009      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800327c:	f7fd fc96 	bl	8000bac <HAL_GetTick>
 8003280:	0002      	movs	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	4a3c      	ldr	r2, [pc, #240]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d901      	bls.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e067      	b.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003290:	4b35      	ldr	r3, [pc, #212]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003292:	6a1b      	ldr	r3, [r3, #32]
 8003294:	2202      	movs	r2, #2
 8003296:	4013      	ands	r3, r2
 8003298:	d0f0      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800329a:	4b33      	ldr	r3, [pc, #204]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800329c:	6a1b      	ldr	r3, [r3, #32]
 800329e:	4a34      	ldr	r2, [pc, #208]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80032a0:	4013      	ands	r3, r2
 80032a2:	0019      	movs	r1, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685a      	ldr	r2, [r3, #4]
 80032a8:	4b2f      	ldr	r3, [pc, #188]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80032aa:	430a      	orrs	r2, r1
 80032ac:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80032ae:	2317      	movs	r3, #23
 80032b0:	18fb      	adds	r3, r7, r3
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d105      	bne.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032b8:	4b2b      	ldr	r3, [pc, #172]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80032ba:	69da      	ldr	r2, [r3, #28]
 80032bc:	4b2a      	ldr	r3, [pc, #168]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80032be:	492f      	ldr	r1, [pc, #188]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80032c0:	400a      	ands	r2, r1
 80032c2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2201      	movs	r2, #1
 80032ca:	4013      	ands	r3, r2
 80032cc:	d009      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032ce:	4b26      	ldr	r3, [pc, #152]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80032d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d2:	2203      	movs	r2, #3
 80032d4:	4393      	bics	r3, r2
 80032d6:	0019      	movs	r1, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689a      	ldr	r2, [r3, #8]
 80032dc:	4b22      	ldr	r3, [pc, #136]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80032de:	430a      	orrs	r2, r1
 80032e0:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2202      	movs	r2, #2
 80032e8:	4013      	ands	r3, r2
 80032ea:	d009      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032ec:	4b1e      	ldr	r3, [pc, #120]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80032ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f0:	4a23      	ldr	r2, [pc, #140]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80032f2:	4013      	ands	r3, r2
 80032f4:	0019      	movs	r1, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	68da      	ldr	r2, [r3, #12]
 80032fa:	4b1b      	ldr	r3, [pc, #108]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80032fc:	430a      	orrs	r2, r1
 80032fe:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	2380      	movs	r3, #128	; 0x80
 8003306:	02db      	lsls	r3, r3, #11
 8003308:	4013      	ands	r3, r2
 800330a:	d009      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800330c:	4b16      	ldr	r3, [pc, #88]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800330e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003310:	4a1c      	ldr	r2, [pc, #112]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003312:	4013      	ands	r3, r2
 8003314:	0019      	movs	r1, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	691a      	ldr	r2, [r3, #16]
 800331a:	4b13      	ldr	r3, [pc, #76]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800331c:	430a      	orrs	r2, r1
 800331e:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2220      	movs	r2, #32
 8003326:	4013      	ands	r3, r2
 8003328:	d009      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800332a:	4b0f      	ldr	r3, [pc, #60]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800332c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332e:	2210      	movs	r2, #16
 8003330:	4393      	bics	r3, r2
 8003332:	0019      	movs	r1, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	695a      	ldr	r2, [r3, #20]
 8003338:	4b0b      	ldr	r3, [pc, #44]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800333a:	430a      	orrs	r2, r1
 800333c:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	2380      	movs	r3, #128	; 0x80
 8003344:	00db      	lsls	r3, r3, #3
 8003346:	4013      	ands	r3, r2
 8003348:	d009      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800334a:	4b07      	ldr	r3, [pc, #28]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800334c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334e:	2240      	movs	r2, #64	; 0x40
 8003350:	4393      	bics	r3, r2
 8003352:	0019      	movs	r1, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	699a      	ldr	r2, [r3, #24]
 8003358:	4b03      	ldr	r3, [pc, #12]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800335a:	430a      	orrs	r2, r1
 800335c:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800335e:	2300      	movs	r3, #0
}
 8003360:	0018      	movs	r0, r3
 8003362:	46bd      	mov	sp, r7
 8003364:	b006      	add	sp, #24
 8003366:	bd80      	pop	{r7, pc}
 8003368:	40021000 	.word	0x40021000
 800336c:	40007000 	.word	0x40007000
 8003370:	fffffcff 	.word	0xfffffcff
 8003374:	fffeffff 	.word	0xfffeffff
 8003378:	00001388 	.word	0x00001388
 800337c:	efffffff 	.word	0xefffffff
 8003380:	fffcffff 	.word	0xfffcffff
 8003384:	fff3ffff 	.word	0xfff3ffff

08003388 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d101      	bne.n	800339a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e044      	b.n	8003424 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d107      	bne.n	80033b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2274      	movs	r2, #116	; 0x74
 80033a6:	2100      	movs	r1, #0
 80033a8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	0018      	movs	r0, r3
 80033ae:	f7fd fb0f 	bl	80009d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2224      	movs	r2, #36	; 0x24
 80033b6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2101      	movs	r1, #1
 80033c4:	438a      	bics	r2, r1
 80033c6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	0018      	movs	r0, r3
 80033cc:	f000 f8da 	bl	8003584 <UART_SetConfig>
 80033d0:	0003      	movs	r3, r0
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d101      	bne.n	80033da <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e024      	b.n	8003424 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d003      	beq.n	80033ea <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	0018      	movs	r0, r3
 80033e6:	f000 fab5 	bl	8003954 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	685a      	ldr	r2, [r3, #4]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	490d      	ldr	r1, [pc, #52]	; (800342c <HAL_UART_Init+0xa4>)
 80033f6:	400a      	ands	r2, r1
 80033f8:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	689a      	ldr	r2, [r3, #8]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	212a      	movs	r1, #42	; 0x2a
 8003406:	438a      	bics	r2, r1
 8003408:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2101      	movs	r1, #1
 8003416:	430a      	orrs	r2, r1
 8003418:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	0018      	movs	r0, r3
 800341e:	f000 fb4d 	bl	8003abc <UART_CheckIdleState>
 8003422:	0003      	movs	r3, r0
}
 8003424:	0018      	movs	r0, r3
 8003426:	46bd      	mov	sp, r7
 8003428:	b002      	add	sp, #8
 800342a:	bd80      	pop	{r7, pc}
 800342c:	ffffb7ff 	.word	0xffffb7ff

08003430 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b08a      	sub	sp, #40	; 0x28
 8003434:	af02      	add	r7, sp, #8
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	603b      	str	r3, [r7, #0]
 800343c:	1dbb      	adds	r3, r7, #6
 800343e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003444:	2b20      	cmp	r3, #32
 8003446:	d000      	beq.n	800344a <HAL_UART_Transmit+0x1a>
 8003448:	e096      	b.n	8003578 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d003      	beq.n	8003458 <HAL_UART_Transmit+0x28>
 8003450:	1dbb      	adds	r3, r7, #6
 8003452:	881b      	ldrh	r3, [r3, #0]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d101      	bne.n	800345c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e08e      	b.n	800357a <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	689a      	ldr	r2, [r3, #8]
 8003460:	2380      	movs	r3, #128	; 0x80
 8003462:	015b      	lsls	r3, r3, #5
 8003464:	429a      	cmp	r2, r3
 8003466:	d109      	bne.n	800347c <HAL_UART_Transmit+0x4c>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d105      	bne.n	800347c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	2201      	movs	r2, #1
 8003474:	4013      	ands	r3, r2
 8003476:	d001      	beq.n	800347c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e07e      	b.n	800357a <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2274      	movs	r2, #116	; 0x74
 8003480:	5c9b      	ldrb	r3, [r3, r2]
 8003482:	2b01      	cmp	r3, #1
 8003484:	d101      	bne.n	800348a <HAL_UART_Transmit+0x5a>
 8003486:	2302      	movs	r3, #2
 8003488:	e077      	b.n	800357a <HAL_UART_Transmit+0x14a>
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2274      	movs	r2, #116	; 0x74
 800348e:	2101      	movs	r1, #1
 8003490:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2280      	movs	r2, #128	; 0x80
 8003496:	2100      	movs	r1, #0
 8003498:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2221      	movs	r2, #33	; 0x21
 800349e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034a0:	f7fd fb84 	bl	8000bac <HAL_GetTick>
 80034a4:	0003      	movs	r3, r0
 80034a6:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	1dba      	adds	r2, r7, #6
 80034ac:	2150      	movs	r1, #80	; 0x50
 80034ae:	8812      	ldrh	r2, [r2, #0]
 80034b0:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	1dba      	adds	r2, r7, #6
 80034b6:	2152      	movs	r1, #82	; 0x52
 80034b8:	8812      	ldrh	r2, [r2, #0]
 80034ba:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	689a      	ldr	r2, [r3, #8]
 80034c0:	2380      	movs	r3, #128	; 0x80
 80034c2:	015b      	lsls	r3, r3, #5
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d108      	bne.n	80034da <HAL_UART_Transmit+0xaa>
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d104      	bne.n	80034da <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80034d0:	2300      	movs	r3, #0
 80034d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	61bb      	str	r3, [r7, #24]
 80034d8:	e003      	b.n	80034e2 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034de:	2300      	movs	r3, #0
 80034e0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2274      	movs	r2, #116	; 0x74
 80034e6:	2100      	movs	r1, #0
 80034e8:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80034ea:	e02d      	b.n	8003548 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034ec:	697a      	ldr	r2, [r7, #20]
 80034ee:	68f8      	ldr	r0, [r7, #12]
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	9300      	str	r3, [sp, #0]
 80034f4:	0013      	movs	r3, r2
 80034f6:	2200      	movs	r2, #0
 80034f8:	2180      	movs	r1, #128	; 0x80
 80034fa:	f000 fb27 	bl	8003b4c <UART_WaitOnFlagUntilTimeout>
 80034fe:	1e03      	subs	r3, r0, #0
 8003500:	d001      	beq.n	8003506 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e039      	b.n	800357a <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d10b      	bne.n	8003524 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	881a      	ldrh	r2, [r3, #0]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	05d2      	lsls	r2, r2, #23
 8003516:	0dd2      	lsrs	r2, r2, #23
 8003518:	b292      	uxth	r2, r2
 800351a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	3302      	adds	r3, #2
 8003520:	61bb      	str	r3, [r7, #24]
 8003522:	e008      	b.n	8003536 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	781a      	ldrb	r2, [r3, #0]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	b292      	uxth	r2, r2
 800352e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	3301      	adds	r3, #1
 8003534:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2252      	movs	r2, #82	; 0x52
 800353a:	5a9b      	ldrh	r3, [r3, r2]
 800353c:	b29b      	uxth	r3, r3
 800353e:	3b01      	subs	r3, #1
 8003540:	b299      	uxth	r1, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2252      	movs	r2, #82	; 0x52
 8003546:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2252      	movs	r2, #82	; 0x52
 800354c:	5a9b      	ldrh	r3, [r3, r2]
 800354e:	b29b      	uxth	r3, r3
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1cb      	bne.n	80034ec <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003554:	697a      	ldr	r2, [r7, #20]
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	9300      	str	r3, [sp, #0]
 800355c:	0013      	movs	r3, r2
 800355e:	2200      	movs	r2, #0
 8003560:	2140      	movs	r1, #64	; 0x40
 8003562:	f000 faf3 	bl	8003b4c <UART_WaitOnFlagUntilTimeout>
 8003566:	1e03      	subs	r3, r0, #0
 8003568:	d001      	beq.n	800356e <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e005      	b.n	800357a <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2220      	movs	r2, #32
 8003572:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003574:	2300      	movs	r3, #0
 8003576:	e000      	b.n	800357a <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003578:	2302      	movs	r3, #2
  }
}
 800357a:	0018      	movs	r0, r3
 800357c:	46bd      	mov	sp, r7
 800357e:	b008      	add	sp, #32
 8003580:	bd80      	pop	{r7, pc}
	...

08003584 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b088      	sub	sp, #32
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800358c:	231e      	movs	r3, #30
 800358e:	18fb      	adds	r3, r7, r3
 8003590:	2200      	movs	r2, #0
 8003592:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689a      	ldr	r2, [r3, #8]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	431a      	orrs	r2, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	431a      	orrs	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	69db      	ldr	r3, [r3, #28]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4abe      	ldr	r2, [pc, #760]	; (80038ac <UART_SetConfig+0x328>)
 80035b4:	4013      	ands	r3, r2
 80035b6:	0019      	movs	r1, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	697a      	ldr	r2, [r7, #20]
 80035be:	430a      	orrs	r2, r1
 80035c0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	4ab9      	ldr	r2, [pc, #740]	; (80038b0 <UART_SetConfig+0x32c>)
 80035ca:	4013      	ands	r3, r2
 80035cc:	0019      	movs	r1, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	68da      	ldr	r2, [r3, #12]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	430a      	orrs	r2, r1
 80035d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a1b      	ldr	r3, [r3, #32]
 80035e4:	697a      	ldr	r2, [r7, #20]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	4ab0      	ldr	r2, [pc, #704]	; (80038b4 <UART_SetConfig+0x330>)
 80035f2:	4013      	ands	r3, r2
 80035f4:	0019      	movs	r1, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	430a      	orrs	r2, r1
 80035fe:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4aac      	ldr	r2, [pc, #688]	; (80038b8 <UART_SetConfig+0x334>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d127      	bne.n	800365a <UART_SetConfig+0xd6>
 800360a:	4bac      	ldr	r3, [pc, #688]	; (80038bc <UART_SetConfig+0x338>)
 800360c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360e:	2203      	movs	r2, #3
 8003610:	4013      	ands	r3, r2
 8003612:	2b03      	cmp	r3, #3
 8003614:	d00d      	beq.n	8003632 <UART_SetConfig+0xae>
 8003616:	d81b      	bhi.n	8003650 <UART_SetConfig+0xcc>
 8003618:	2b02      	cmp	r3, #2
 800361a:	d014      	beq.n	8003646 <UART_SetConfig+0xc2>
 800361c:	d818      	bhi.n	8003650 <UART_SetConfig+0xcc>
 800361e:	2b00      	cmp	r3, #0
 8003620:	d002      	beq.n	8003628 <UART_SetConfig+0xa4>
 8003622:	2b01      	cmp	r3, #1
 8003624:	d00a      	beq.n	800363c <UART_SetConfig+0xb8>
 8003626:	e013      	b.n	8003650 <UART_SetConfig+0xcc>
 8003628:	231f      	movs	r3, #31
 800362a:	18fb      	adds	r3, r7, r3
 800362c:	2200      	movs	r2, #0
 800362e:	701a      	strb	r2, [r3, #0]
 8003630:	e0bd      	b.n	80037ae <UART_SetConfig+0x22a>
 8003632:	231f      	movs	r3, #31
 8003634:	18fb      	adds	r3, r7, r3
 8003636:	2202      	movs	r2, #2
 8003638:	701a      	strb	r2, [r3, #0]
 800363a:	e0b8      	b.n	80037ae <UART_SetConfig+0x22a>
 800363c:	231f      	movs	r3, #31
 800363e:	18fb      	adds	r3, r7, r3
 8003640:	2204      	movs	r2, #4
 8003642:	701a      	strb	r2, [r3, #0]
 8003644:	e0b3      	b.n	80037ae <UART_SetConfig+0x22a>
 8003646:	231f      	movs	r3, #31
 8003648:	18fb      	adds	r3, r7, r3
 800364a:	2208      	movs	r2, #8
 800364c:	701a      	strb	r2, [r3, #0]
 800364e:	e0ae      	b.n	80037ae <UART_SetConfig+0x22a>
 8003650:	231f      	movs	r3, #31
 8003652:	18fb      	adds	r3, r7, r3
 8003654:	2210      	movs	r2, #16
 8003656:	701a      	strb	r2, [r3, #0]
 8003658:	e0a9      	b.n	80037ae <UART_SetConfig+0x22a>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a98      	ldr	r2, [pc, #608]	; (80038c0 <UART_SetConfig+0x33c>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d134      	bne.n	80036ce <UART_SetConfig+0x14a>
 8003664:	4b95      	ldr	r3, [pc, #596]	; (80038bc <UART_SetConfig+0x338>)
 8003666:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003668:	23c0      	movs	r3, #192	; 0xc0
 800366a:	029b      	lsls	r3, r3, #10
 800366c:	4013      	ands	r3, r2
 800366e:	22c0      	movs	r2, #192	; 0xc0
 8003670:	0292      	lsls	r2, r2, #10
 8003672:	4293      	cmp	r3, r2
 8003674:	d017      	beq.n	80036a6 <UART_SetConfig+0x122>
 8003676:	22c0      	movs	r2, #192	; 0xc0
 8003678:	0292      	lsls	r2, r2, #10
 800367a:	4293      	cmp	r3, r2
 800367c:	d822      	bhi.n	80036c4 <UART_SetConfig+0x140>
 800367e:	2280      	movs	r2, #128	; 0x80
 8003680:	0292      	lsls	r2, r2, #10
 8003682:	4293      	cmp	r3, r2
 8003684:	d019      	beq.n	80036ba <UART_SetConfig+0x136>
 8003686:	2280      	movs	r2, #128	; 0x80
 8003688:	0292      	lsls	r2, r2, #10
 800368a:	4293      	cmp	r3, r2
 800368c:	d81a      	bhi.n	80036c4 <UART_SetConfig+0x140>
 800368e:	2b00      	cmp	r3, #0
 8003690:	d004      	beq.n	800369c <UART_SetConfig+0x118>
 8003692:	2280      	movs	r2, #128	; 0x80
 8003694:	0252      	lsls	r2, r2, #9
 8003696:	4293      	cmp	r3, r2
 8003698:	d00a      	beq.n	80036b0 <UART_SetConfig+0x12c>
 800369a:	e013      	b.n	80036c4 <UART_SetConfig+0x140>
 800369c:	231f      	movs	r3, #31
 800369e:	18fb      	adds	r3, r7, r3
 80036a0:	2200      	movs	r2, #0
 80036a2:	701a      	strb	r2, [r3, #0]
 80036a4:	e083      	b.n	80037ae <UART_SetConfig+0x22a>
 80036a6:	231f      	movs	r3, #31
 80036a8:	18fb      	adds	r3, r7, r3
 80036aa:	2202      	movs	r2, #2
 80036ac:	701a      	strb	r2, [r3, #0]
 80036ae:	e07e      	b.n	80037ae <UART_SetConfig+0x22a>
 80036b0:	231f      	movs	r3, #31
 80036b2:	18fb      	adds	r3, r7, r3
 80036b4:	2204      	movs	r2, #4
 80036b6:	701a      	strb	r2, [r3, #0]
 80036b8:	e079      	b.n	80037ae <UART_SetConfig+0x22a>
 80036ba:	231f      	movs	r3, #31
 80036bc:	18fb      	adds	r3, r7, r3
 80036be:	2208      	movs	r2, #8
 80036c0:	701a      	strb	r2, [r3, #0]
 80036c2:	e074      	b.n	80037ae <UART_SetConfig+0x22a>
 80036c4:	231f      	movs	r3, #31
 80036c6:	18fb      	adds	r3, r7, r3
 80036c8:	2210      	movs	r2, #16
 80036ca:	701a      	strb	r2, [r3, #0]
 80036cc:	e06f      	b.n	80037ae <UART_SetConfig+0x22a>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a7c      	ldr	r2, [pc, #496]	; (80038c4 <UART_SetConfig+0x340>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d134      	bne.n	8003742 <UART_SetConfig+0x1be>
 80036d8:	4b78      	ldr	r3, [pc, #480]	; (80038bc <UART_SetConfig+0x338>)
 80036da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036dc:	23c0      	movs	r3, #192	; 0xc0
 80036de:	031b      	lsls	r3, r3, #12
 80036e0:	4013      	ands	r3, r2
 80036e2:	22c0      	movs	r2, #192	; 0xc0
 80036e4:	0312      	lsls	r2, r2, #12
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d017      	beq.n	800371a <UART_SetConfig+0x196>
 80036ea:	22c0      	movs	r2, #192	; 0xc0
 80036ec:	0312      	lsls	r2, r2, #12
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d822      	bhi.n	8003738 <UART_SetConfig+0x1b4>
 80036f2:	2280      	movs	r2, #128	; 0x80
 80036f4:	0312      	lsls	r2, r2, #12
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d019      	beq.n	800372e <UART_SetConfig+0x1aa>
 80036fa:	2280      	movs	r2, #128	; 0x80
 80036fc:	0312      	lsls	r2, r2, #12
 80036fe:	4293      	cmp	r3, r2
 8003700:	d81a      	bhi.n	8003738 <UART_SetConfig+0x1b4>
 8003702:	2b00      	cmp	r3, #0
 8003704:	d004      	beq.n	8003710 <UART_SetConfig+0x18c>
 8003706:	2280      	movs	r2, #128	; 0x80
 8003708:	02d2      	lsls	r2, r2, #11
 800370a:	4293      	cmp	r3, r2
 800370c:	d00a      	beq.n	8003724 <UART_SetConfig+0x1a0>
 800370e:	e013      	b.n	8003738 <UART_SetConfig+0x1b4>
 8003710:	231f      	movs	r3, #31
 8003712:	18fb      	adds	r3, r7, r3
 8003714:	2200      	movs	r2, #0
 8003716:	701a      	strb	r2, [r3, #0]
 8003718:	e049      	b.n	80037ae <UART_SetConfig+0x22a>
 800371a:	231f      	movs	r3, #31
 800371c:	18fb      	adds	r3, r7, r3
 800371e:	2202      	movs	r2, #2
 8003720:	701a      	strb	r2, [r3, #0]
 8003722:	e044      	b.n	80037ae <UART_SetConfig+0x22a>
 8003724:	231f      	movs	r3, #31
 8003726:	18fb      	adds	r3, r7, r3
 8003728:	2204      	movs	r2, #4
 800372a:	701a      	strb	r2, [r3, #0]
 800372c:	e03f      	b.n	80037ae <UART_SetConfig+0x22a>
 800372e:	231f      	movs	r3, #31
 8003730:	18fb      	adds	r3, r7, r3
 8003732:	2208      	movs	r2, #8
 8003734:	701a      	strb	r2, [r3, #0]
 8003736:	e03a      	b.n	80037ae <UART_SetConfig+0x22a>
 8003738:	231f      	movs	r3, #31
 800373a:	18fb      	adds	r3, r7, r3
 800373c:	2210      	movs	r2, #16
 800373e:	701a      	strb	r2, [r3, #0]
 8003740:	e035      	b.n	80037ae <UART_SetConfig+0x22a>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a60      	ldr	r2, [pc, #384]	; (80038c8 <UART_SetConfig+0x344>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d104      	bne.n	8003756 <UART_SetConfig+0x1d2>
 800374c:	231f      	movs	r3, #31
 800374e:	18fb      	adds	r3, r7, r3
 8003750:	2200      	movs	r2, #0
 8003752:	701a      	strb	r2, [r3, #0]
 8003754:	e02b      	b.n	80037ae <UART_SetConfig+0x22a>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a5c      	ldr	r2, [pc, #368]	; (80038cc <UART_SetConfig+0x348>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d104      	bne.n	800376a <UART_SetConfig+0x1e6>
 8003760:	231f      	movs	r3, #31
 8003762:	18fb      	adds	r3, r7, r3
 8003764:	2200      	movs	r2, #0
 8003766:	701a      	strb	r2, [r3, #0]
 8003768:	e021      	b.n	80037ae <UART_SetConfig+0x22a>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a58      	ldr	r2, [pc, #352]	; (80038d0 <UART_SetConfig+0x34c>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d104      	bne.n	800377e <UART_SetConfig+0x1fa>
 8003774:	231f      	movs	r3, #31
 8003776:	18fb      	adds	r3, r7, r3
 8003778:	2200      	movs	r2, #0
 800377a:	701a      	strb	r2, [r3, #0]
 800377c:	e017      	b.n	80037ae <UART_SetConfig+0x22a>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a54      	ldr	r2, [pc, #336]	; (80038d4 <UART_SetConfig+0x350>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d104      	bne.n	8003792 <UART_SetConfig+0x20e>
 8003788:	231f      	movs	r3, #31
 800378a:	18fb      	adds	r3, r7, r3
 800378c:	2200      	movs	r2, #0
 800378e:	701a      	strb	r2, [r3, #0]
 8003790:	e00d      	b.n	80037ae <UART_SetConfig+0x22a>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a50      	ldr	r2, [pc, #320]	; (80038d8 <UART_SetConfig+0x354>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d104      	bne.n	80037a6 <UART_SetConfig+0x222>
 800379c:	231f      	movs	r3, #31
 800379e:	18fb      	adds	r3, r7, r3
 80037a0:	2200      	movs	r2, #0
 80037a2:	701a      	strb	r2, [r3, #0]
 80037a4:	e003      	b.n	80037ae <UART_SetConfig+0x22a>
 80037a6:	231f      	movs	r3, #31
 80037a8:	18fb      	adds	r3, r7, r3
 80037aa:	2210      	movs	r2, #16
 80037ac:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	69da      	ldr	r2, [r3, #28]
 80037b2:	2380      	movs	r3, #128	; 0x80
 80037b4:	021b      	lsls	r3, r3, #8
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d15d      	bne.n	8003876 <UART_SetConfig+0x2f2>
  {
    switch (clocksource)
 80037ba:	231f      	movs	r3, #31
 80037bc:	18fb      	adds	r3, r7, r3
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	2b08      	cmp	r3, #8
 80037c2:	d015      	beq.n	80037f0 <UART_SetConfig+0x26c>
 80037c4:	dc18      	bgt.n	80037f8 <UART_SetConfig+0x274>
 80037c6:	2b04      	cmp	r3, #4
 80037c8:	d00d      	beq.n	80037e6 <UART_SetConfig+0x262>
 80037ca:	dc15      	bgt.n	80037f8 <UART_SetConfig+0x274>
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d002      	beq.n	80037d6 <UART_SetConfig+0x252>
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d005      	beq.n	80037e0 <UART_SetConfig+0x25c>
 80037d4:	e010      	b.n	80037f8 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037d6:	f7ff fcc1 	bl	800315c <HAL_RCC_GetPCLK1Freq>
 80037da:	0003      	movs	r3, r0
 80037dc:	61bb      	str	r3, [r7, #24]
        break;
 80037de:	e012      	b.n	8003806 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037e0:	4b3e      	ldr	r3, [pc, #248]	; (80038dc <UART_SetConfig+0x358>)
 80037e2:	61bb      	str	r3, [r7, #24]
        break;
 80037e4:	e00f      	b.n	8003806 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037e6:	f7ff fc2f 	bl	8003048 <HAL_RCC_GetSysClockFreq>
 80037ea:	0003      	movs	r3, r0
 80037ec:	61bb      	str	r3, [r7, #24]
        break;
 80037ee:	e00a      	b.n	8003806 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037f0:	2380      	movs	r3, #128	; 0x80
 80037f2:	021b      	lsls	r3, r3, #8
 80037f4:	61bb      	str	r3, [r7, #24]
        break;
 80037f6:	e006      	b.n	8003806 <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 80037f8:	2300      	movs	r3, #0
 80037fa:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80037fc:	231e      	movs	r3, #30
 80037fe:	18fb      	adds	r3, r7, r3
 8003800:	2201      	movs	r2, #1
 8003802:	701a      	strb	r2, [r3, #0]
        break;
 8003804:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d100      	bne.n	800380e <UART_SetConfig+0x28a>
 800380c:	e095      	b.n	800393a <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	005a      	lsls	r2, r3, #1
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	085b      	lsrs	r3, r3, #1
 8003818:	18d2      	adds	r2, r2, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	0019      	movs	r1, r3
 8003820:	0010      	movs	r0, r2
 8003822:	f7fc fc6f 	bl	8000104 <__udivsi3>
 8003826:	0003      	movs	r3, r0
 8003828:	b29b      	uxth	r3, r3
 800382a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	2b0f      	cmp	r3, #15
 8003830:	d91c      	bls.n	800386c <UART_SetConfig+0x2e8>
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	2380      	movs	r3, #128	; 0x80
 8003836:	025b      	lsls	r3, r3, #9
 8003838:	429a      	cmp	r2, r3
 800383a:	d217      	bcs.n	800386c <UART_SetConfig+0x2e8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	b29a      	uxth	r2, r3
 8003840:	200e      	movs	r0, #14
 8003842:	183b      	adds	r3, r7, r0
 8003844:	210f      	movs	r1, #15
 8003846:	438a      	bics	r2, r1
 8003848:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	085b      	lsrs	r3, r3, #1
 800384e:	b29b      	uxth	r3, r3
 8003850:	2207      	movs	r2, #7
 8003852:	4013      	ands	r3, r2
 8003854:	b299      	uxth	r1, r3
 8003856:	183b      	adds	r3, r7, r0
 8003858:	183a      	adds	r2, r7, r0
 800385a:	8812      	ldrh	r2, [r2, #0]
 800385c:	430a      	orrs	r2, r1
 800385e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	183a      	adds	r2, r7, r0
 8003866:	8812      	ldrh	r2, [r2, #0]
 8003868:	60da      	str	r2, [r3, #12]
 800386a:	e066      	b.n	800393a <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 800386c:	231e      	movs	r3, #30
 800386e:	18fb      	adds	r3, r7, r3
 8003870:	2201      	movs	r2, #1
 8003872:	701a      	strb	r2, [r3, #0]
 8003874:	e061      	b.n	800393a <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003876:	231f      	movs	r3, #31
 8003878:	18fb      	adds	r3, r7, r3
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	2b08      	cmp	r3, #8
 800387e:	d02f      	beq.n	80038e0 <UART_SetConfig+0x35c>
 8003880:	dc32      	bgt.n	80038e8 <UART_SetConfig+0x364>
 8003882:	2b04      	cmp	r3, #4
 8003884:	d00d      	beq.n	80038a2 <UART_SetConfig+0x31e>
 8003886:	dc2f      	bgt.n	80038e8 <UART_SetConfig+0x364>
 8003888:	2b00      	cmp	r3, #0
 800388a:	d002      	beq.n	8003892 <UART_SetConfig+0x30e>
 800388c:	2b02      	cmp	r3, #2
 800388e:	d005      	beq.n	800389c <UART_SetConfig+0x318>
 8003890:	e02a      	b.n	80038e8 <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003892:	f7ff fc63 	bl	800315c <HAL_RCC_GetPCLK1Freq>
 8003896:	0003      	movs	r3, r0
 8003898:	61bb      	str	r3, [r7, #24]
        break;
 800389a:	e02c      	b.n	80038f6 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800389c:	4b0f      	ldr	r3, [pc, #60]	; (80038dc <UART_SetConfig+0x358>)
 800389e:	61bb      	str	r3, [r7, #24]
        break;
 80038a0:	e029      	b.n	80038f6 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038a2:	f7ff fbd1 	bl	8003048 <HAL_RCC_GetSysClockFreq>
 80038a6:	0003      	movs	r3, r0
 80038a8:	61bb      	str	r3, [r7, #24]
        break;
 80038aa:	e024      	b.n	80038f6 <UART_SetConfig+0x372>
 80038ac:	efff69f3 	.word	0xefff69f3
 80038b0:	ffffcfff 	.word	0xffffcfff
 80038b4:	fffff4ff 	.word	0xfffff4ff
 80038b8:	40013800 	.word	0x40013800
 80038bc:	40021000 	.word	0x40021000
 80038c0:	40004400 	.word	0x40004400
 80038c4:	40004800 	.word	0x40004800
 80038c8:	40004c00 	.word	0x40004c00
 80038cc:	40005000 	.word	0x40005000
 80038d0:	40011400 	.word	0x40011400
 80038d4:	40011800 	.word	0x40011800
 80038d8:	40011c00 	.word	0x40011c00
 80038dc:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038e0:	2380      	movs	r3, #128	; 0x80
 80038e2:	021b      	lsls	r3, r3, #8
 80038e4:	61bb      	str	r3, [r7, #24]
        break;
 80038e6:	e006      	b.n	80038f6 <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 80038e8:	2300      	movs	r3, #0
 80038ea:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80038ec:	231e      	movs	r3, #30
 80038ee:	18fb      	adds	r3, r7, r3
 80038f0:	2201      	movs	r2, #1
 80038f2:	701a      	strb	r2, [r3, #0]
        break;
 80038f4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d01e      	beq.n	800393a <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	085a      	lsrs	r2, r3, #1
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	18d2      	adds	r2, r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	0019      	movs	r1, r3
 800390c:	0010      	movs	r0, r2
 800390e:	f7fc fbf9 	bl	8000104 <__udivsi3>
 8003912:	0003      	movs	r3, r0
 8003914:	b29b      	uxth	r3, r3
 8003916:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	2b0f      	cmp	r3, #15
 800391c:	d909      	bls.n	8003932 <UART_SetConfig+0x3ae>
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	2380      	movs	r3, #128	; 0x80
 8003922:	025b      	lsls	r3, r3, #9
 8003924:	429a      	cmp	r2, r3
 8003926:	d204      	bcs.n	8003932 <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = usartdiv;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	693a      	ldr	r2, [r7, #16]
 800392e:	60da      	str	r2, [r3, #12]
 8003930:	e003      	b.n	800393a <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8003932:	231e      	movs	r3, #30
 8003934:	18fb      	adds	r3, r7, r3
 8003936:	2201      	movs	r2, #1
 8003938:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003946:	231e      	movs	r3, #30
 8003948:	18fb      	adds	r3, r7, r3
 800394a:	781b      	ldrb	r3, [r3, #0]
}
 800394c:	0018      	movs	r0, r3
 800394e:	46bd      	mov	sp, r7
 8003950:	b008      	add	sp, #32
 8003952:	bd80      	pop	{r7, pc}

08003954 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003960:	2201      	movs	r2, #1
 8003962:	4013      	ands	r3, r2
 8003964:	d00b      	beq.n	800397e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	4a4a      	ldr	r2, [pc, #296]	; (8003a98 <UART_AdvFeatureConfig+0x144>)
 800396e:	4013      	ands	r3, r2
 8003970:	0019      	movs	r1, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	430a      	orrs	r2, r1
 800397c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003982:	2202      	movs	r2, #2
 8003984:	4013      	ands	r3, r2
 8003986:	d00b      	beq.n	80039a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	4a43      	ldr	r2, [pc, #268]	; (8003a9c <UART_AdvFeatureConfig+0x148>)
 8003990:	4013      	ands	r3, r2
 8003992:	0019      	movs	r1, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	430a      	orrs	r2, r1
 800399e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a4:	2204      	movs	r2, #4
 80039a6:	4013      	ands	r3, r2
 80039a8:	d00b      	beq.n	80039c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	4a3b      	ldr	r2, [pc, #236]	; (8003aa0 <UART_AdvFeatureConfig+0x14c>)
 80039b2:	4013      	ands	r3, r2
 80039b4:	0019      	movs	r1, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	430a      	orrs	r2, r1
 80039c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c6:	2208      	movs	r2, #8
 80039c8:	4013      	ands	r3, r2
 80039ca:	d00b      	beq.n	80039e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	4a34      	ldr	r2, [pc, #208]	; (8003aa4 <UART_AdvFeatureConfig+0x150>)
 80039d4:	4013      	ands	r3, r2
 80039d6:	0019      	movs	r1, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	430a      	orrs	r2, r1
 80039e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e8:	2210      	movs	r2, #16
 80039ea:	4013      	ands	r3, r2
 80039ec:	d00b      	beq.n	8003a06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	4a2c      	ldr	r2, [pc, #176]	; (8003aa8 <UART_AdvFeatureConfig+0x154>)
 80039f6:	4013      	ands	r3, r2
 80039f8:	0019      	movs	r1, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	430a      	orrs	r2, r1
 8003a04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	d00b      	beq.n	8003a28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	4a25      	ldr	r2, [pc, #148]	; (8003aac <UART_AdvFeatureConfig+0x158>)
 8003a18:	4013      	ands	r3, r2
 8003a1a:	0019      	movs	r1, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	430a      	orrs	r2, r1
 8003a26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2c:	2240      	movs	r2, #64	; 0x40
 8003a2e:	4013      	ands	r3, r2
 8003a30:	d01d      	beq.n	8003a6e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	4a1d      	ldr	r2, [pc, #116]	; (8003ab0 <UART_AdvFeatureConfig+0x15c>)
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	0019      	movs	r1, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	430a      	orrs	r2, r1
 8003a48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a4e:	2380      	movs	r3, #128	; 0x80
 8003a50:	035b      	lsls	r3, r3, #13
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d10b      	bne.n	8003a6e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	4a15      	ldr	r2, [pc, #84]	; (8003ab4 <UART_AdvFeatureConfig+0x160>)
 8003a5e:	4013      	ands	r3, r2
 8003a60:	0019      	movs	r1, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a72:	2280      	movs	r2, #128	; 0x80
 8003a74:	4013      	ands	r3, r2
 8003a76:	d00b      	beq.n	8003a90 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	4a0e      	ldr	r2, [pc, #56]	; (8003ab8 <UART_AdvFeatureConfig+0x164>)
 8003a80:	4013      	ands	r3, r2
 8003a82:	0019      	movs	r1, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	430a      	orrs	r2, r1
 8003a8e:	605a      	str	r2, [r3, #4]
  }
}
 8003a90:	46c0      	nop			; (mov r8, r8)
 8003a92:	46bd      	mov	sp, r7
 8003a94:	b002      	add	sp, #8
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	fffdffff 	.word	0xfffdffff
 8003a9c:	fffeffff 	.word	0xfffeffff
 8003aa0:	fffbffff 	.word	0xfffbffff
 8003aa4:	ffff7fff 	.word	0xffff7fff
 8003aa8:	ffffefff 	.word	0xffffefff
 8003aac:	ffffdfff 	.word	0xffffdfff
 8003ab0:	ffefffff 	.word	0xffefffff
 8003ab4:	ff9fffff 	.word	0xff9fffff
 8003ab8:	fff7ffff 	.word	0xfff7ffff

08003abc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b086      	sub	sp, #24
 8003ac0:	af02      	add	r7, sp, #8
 8003ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2280      	movs	r2, #128	; 0x80
 8003ac8:	2100      	movs	r1, #0
 8003aca:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003acc:	f7fd f86e 	bl	8000bac <HAL_GetTick>
 8003ad0:	0003      	movs	r3, r0
 8003ad2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2208      	movs	r2, #8
 8003adc:	4013      	ands	r3, r2
 8003ade:	2b08      	cmp	r3, #8
 8003ae0:	d10c      	bne.n	8003afc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2280      	movs	r2, #128	; 0x80
 8003ae6:	0391      	lsls	r1, r2, #14
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	4a17      	ldr	r2, [pc, #92]	; (8003b48 <UART_CheckIdleState+0x8c>)
 8003aec:	9200      	str	r2, [sp, #0]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f000 f82c 	bl	8003b4c <UART_WaitOnFlagUntilTimeout>
 8003af4:	1e03      	subs	r3, r0, #0
 8003af6:	d001      	beq.n	8003afc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e021      	b.n	8003b40 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2204      	movs	r2, #4
 8003b04:	4013      	ands	r3, r2
 8003b06:	2b04      	cmp	r3, #4
 8003b08:	d10c      	bne.n	8003b24 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2280      	movs	r2, #128	; 0x80
 8003b0e:	03d1      	lsls	r1, r2, #15
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	4a0d      	ldr	r2, [pc, #52]	; (8003b48 <UART_CheckIdleState+0x8c>)
 8003b14:	9200      	str	r2, [sp, #0]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f000 f818 	bl	8003b4c <UART_WaitOnFlagUntilTimeout>
 8003b1c:	1e03      	subs	r3, r0, #0
 8003b1e:	d001      	beq.n	8003b24 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e00d      	b.n	8003b40 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2220      	movs	r2, #32
 8003b28:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2220      	movs	r2, #32
 8003b2e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2274      	movs	r2, #116	; 0x74
 8003b3a:	2100      	movs	r1, #0
 8003b3c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	0018      	movs	r0, r3
 8003b42:	46bd      	mov	sp, r7
 8003b44:	b004      	add	sp, #16
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	01ffffff 	.word	0x01ffffff

08003b4c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b094      	sub	sp, #80	; 0x50
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	603b      	str	r3, [r7, #0]
 8003b58:	1dfb      	adds	r3, r7, #7
 8003b5a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b5c:	e0a3      	b.n	8003ca6 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b60:	3301      	adds	r3, #1
 8003b62:	d100      	bne.n	8003b66 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003b64:	e09f      	b.n	8003ca6 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b66:	f7fd f821 	bl	8000bac <HAL_GetTick>
 8003b6a:	0002      	movs	r2, r0
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d302      	bcc.n	8003b7c <UART_WaitOnFlagUntilTimeout+0x30>
 8003b76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d13d      	bne.n	8003bf8 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b7c:	f3ef 8310 	mrs	r3, PRIMASK
 8003b80:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b84:	647b      	str	r3, [r7, #68]	; 0x44
 8003b86:	2301      	movs	r3, #1
 8003b88:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b8c:	f383 8810 	msr	PRIMASK, r3
}
 8003b90:	46c0      	nop			; (mov r8, r8)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	494c      	ldr	r1, [pc, #304]	; (8003cd0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003b9e:	400a      	ands	r2, r1
 8003ba0:	601a      	str	r2, [r3, #0]
 8003ba2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ba4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba8:	f383 8810 	msr	PRIMASK, r3
}
 8003bac:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bae:	f3ef 8310 	mrs	r3, PRIMASK
 8003bb2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bb6:	643b      	str	r3, [r7, #64]	; 0x40
 8003bb8:	2301      	movs	r3, #1
 8003bba:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bbe:	f383 8810 	msr	PRIMASK, r3
}
 8003bc2:	46c0      	nop			; (mov r8, r8)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	689a      	ldr	r2, [r3, #8]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2101      	movs	r1, #1
 8003bd0:	438a      	bics	r2, r1
 8003bd2:	609a      	str	r2, [r3, #8]
 8003bd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bda:	f383 8810 	msr	PRIMASK, r3
}
 8003bde:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2220      	movs	r2, #32
 8003be4:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2220      	movs	r2, #32
 8003bea:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2274      	movs	r2, #116	; 0x74
 8003bf0:	2100      	movs	r1, #0
 8003bf2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e067      	b.n	8003cc8 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2204      	movs	r2, #4
 8003c00:	4013      	ands	r3, r2
 8003c02:	d050      	beq.n	8003ca6 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	69da      	ldr	r2, [r3, #28]
 8003c0a:	2380      	movs	r3, #128	; 0x80
 8003c0c:	011b      	lsls	r3, r3, #4
 8003c0e:	401a      	ands	r2, r3
 8003c10:	2380      	movs	r3, #128	; 0x80
 8003c12:	011b      	lsls	r3, r3, #4
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d146      	bne.n	8003ca6 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2280      	movs	r2, #128	; 0x80
 8003c1e:	0112      	lsls	r2, r2, #4
 8003c20:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c22:	f3ef 8310 	mrs	r3, PRIMASK
 8003c26:	613b      	str	r3, [r7, #16]
  return(result);
 8003c28:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	f383 8810 	msr	PRIMASK, r3
}
 8003c36:	46c0      	nop			; (mov r8, r8)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4923      	ldr	r1, [pc, #140]	; (8003cd0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003c44:	400a      	ands	r2, r1
 8003c46:	601a      	str	r2, [r3, #0]
 8003c48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c4a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	f383 8810 	msr	PRIMASK, r3
}
 8003c52:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c54:	f3ef 8310 	mrs	r3, PRIMASK
 8003c58:	61fb      	str	r3, [r7, #28]
  return(result);
 8003c5a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c5e:	2301      	movs	r3, #1
 8003c60:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c62:	6a3b      	ldr	r3, [r7, #32]
 8003c64:	f383 8810 	msr	PRIMASK, r3
}
 8003c68:	46c0      	nop			; (mov r8, r8)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	689a      	ldr	r2, [r3, #8]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2101      	movs	r1, #1
 8003c76:	438a      	bics	r2, r1
 8003c78:	609a      	str	r2, [r3, #8]
 8003c7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c7c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c80:	f383 8810 	msr	PRIMASK, r3
}
 8003c84:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2220      	movs	r2, #32
 8003c8a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2220      	movs	r2, #32
 8003c90:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2280      	movs	r2, #128	; 0x80
 8003c96:	2120      	movs	r1, #32
 8003c98:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2274      	movs	r2, #116	; 0x74
 8003c9e:	2100      	movs	r1, #0
 8003ca0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e010      	b.n	8003cc8 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	69db      	ldr	r3, [r3, #28]
 8003cac:	68ba      	ldr	r2, [r7, #8]
 8003cae:	4013      	ands	r3, r2
 8003cb0:	68ba      	ldr	r2, [r7, #8]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	425a      	negs	r2, r3
 8003cb6:	4153      	adcs	r3, r2
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	001a      	movs	r2, r3
 8003cbc:	1dfb      	adds	r3, r7, #7
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d100      	bne.n	8003cc6 <UART_WaitOnFlagUntilTimeout+0x17a>
 8003cc4:	e74b      	b.n	8003b5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	0018      	movs	r0, r3
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	b014      	add	sp, #80	; 0x50
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	fffffe5f 	.word	0xfffffe5f

08003cd4 <__libc_init_array>:
 8003cd4:	b570      	push	{r4, r5, r6, lr}
 8003cd6:	2600      	movs	r6, #0
 8003cd8:	4d0c      	ldr	r5, [pc, #48]	; (8003d0c <__libc_init_array+0x38>)
 8003cda:	4c0d      	ldr	r4, [pc, #52]	; (8003d10 <__libc_init_array+0x3c>)
 8003cdc:	1b64      	subs	r4, r4, r5
 8003cde:	10a4      	asrs	r4, r4, #2
 8003ce0:	42a6      	cmp	r6, r4
 8003ce2:	d109      	bne.n	8003cf8 <__libc_init_array+0x24>
 8003ce4:	2600      	movs	r6, #0
 8003ce6:	f000 f821 	bl	8003d2c <_init>
 8003cea:	4d0a      	ldr	r5, [pc, #40]	; (8003d14 <__libc_init_array+0x40>)
 8003cec:	4c0a      	ldr	r4, [pc, #40]	; (8003d18 <__libc_init_array+0x44>)
 8003cee:	1b64      	subs	r4, r4, r5
 8003cf0:	10a4      	asrs	r4, r4, #2
 8003cf2:	42a6      	cmp	r6, r4
 8003cf4:	d105      	bne.n	8003d02 <__libc_init_array+0x2e>
 8003cf6:	bd70      	pop	{r4, r5, r6, pc}
 8003cf8:	00b3      	lsls	r3, r6, #2
 8003cfa:	58eb      	ldr	r3, [r5, r3]
 8003cfc:	4798      	blx	r3
 8003cfe:	3601      	adds	r6, #1
 8003d00:	e7ee      	b.n	8003ce0 <__libc_init_array+0xc>
 8003d02:	00b3      	lsls	r3, r6, #2
 8003d04:	58eb      	ldr	r3, [r5, r3]
 8003d06:	4798      	blx	r3
 8003d08:	3601      	adds	r6, #1
 8003d0a:	e7f2      	b.n	8003cf2 <__libc_init_array+0x1e>
 8003d0c:	08003d7c 	.word	0x08003d7c
 8003d10:	08003d7c 	.word	0x08003d7c
 8003d14:	08003d7c 	.word	0x08003d7c
 8003d18:	08003d80 	.word	0x08003d80

08003d1c <memset>:
 8003d1c:	0003      	movs	r3, r0
 8003d1e:	1882      	adds	r2, r0, r2
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d100      	bne.n	8003d26 <memset+0xa>
 8003d24:	4770      	bx	lr
 8003d26:	7019      	strb	r1, [r3, #0]
 8003d28:	3301      	adds	r3, #1
 8003d2a:	e7f9      	b.n	8003d20 <memset+0x4>

08003d2c <_init>:
 8003d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d2e:	46c0      	nop			; (mov r8, r8)
 8003d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d32:	bc08      	pop	{r3}
 8003d34:	469e      	mov	lr, r3
 8003d36:	4770      	bx	lr

08003d38 <_fini>:
 8003d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d3a:	46c0      	nop			; (mov r8, r8)
 8003d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d3e:	bc08      	pop	{r3}
 8003d40:	469e      	mov	lr, r3
 8003d42:	4770      	bx	lr
